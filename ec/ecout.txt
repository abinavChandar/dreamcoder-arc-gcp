Registered rot90 with inferred type grid -> grid.
Registered rot180 with inferred type grid -> grid.
Registered rot270 with inferred type grid -> grid.
Registered flipx with inferred type grid -> grid.
Registered flipy with inferred type grid -> grid.
Registered swapxy with inferred type grid -> grid.
Registered ic_filtercol with inferred type colour -> grid -> grid.
Registered ic_erasecol with inferred type colour -> grid -> grid.
Registered setcol with inferred type colour -> grid -> grid.
Registered set_bg with inferred type colour -> grid -> grid.
Registered getpos with inferred type grid -> pos.
Registered getsize with inferred type grid -> size.
Registered ic_toorigin with inferred type grid -> grid.
Registered fillobj with inferred type colour -> grid -> grid.
Registered ic_fill with inferred type grid -> grid.
Registered ic_interior with inferred type grid -> grid.
Registered ic_center with inferred type grid -> grid.
Registered topcol with inferred type grid -> colour.
Registered rarestcol with inferred type grid -> colour.
Registered countPixels with inferred type grid -> count.
Registered countColours with inferred type grid -> count.
Registered countToX with inferred type count -> colour -> grid.
Registered countToY with inferred type count -> colour -> grid.
Registered countToXY with inferred type count -> colour -> grid.
Registered ic_makeborder with inferred type grid -> grid.
Registered ic_compress2 with inferred type grid -> grid.
Registered ic_compress3 with inferred type grid -> grid.
Registered ic_connectX with inferred type grid -> grid.
Registered ic_connectY with inferred type grid -> grid.
Registered ic_connectY with inferred type grid -> grid.
Registered left_half with inferred type grid -> grid.
Registered right_half with inferred type grid -> grid.
Registered top_half with inferred type grid -> grid.
Registered bottom_half with inferred type grid -> grid.
Registered ic_embed with inferred type grid -> grid -> grid.
Registered ic_splitcols with inferred type grid -> list(grid).
Registered ic_splitall with inferred type grid -> list(grid).
Registered split8 with inferred type grid -> list(grid).
Registered ic_splitcolumns with inferred type grid -> list(grid).
Registered ic_splitrows with inferred type grid -> list(grid).
Registered pickcommon with inferred type list(grid) -> grid.
Registered pickmax_count with inferred type list(grid) -> grid.
Registered pickmax_neg_count with inferred type list(grid) -> grid.
Registered pickmax_size with inferred type list(grid) -> grid.
Registered pickmax_neg_size with inferred type list(grid) -> grid.
Registered pickmax_cols with inferred type list(grid) -> grid.
Registered pickmax_interior_count with inferred type list(grid) -> grid.
Registered pickmax_neg_interior_count with inferred type list(grid) -> grid.
Registered pickmax_x_pos with inferred type list(grid) -> grid.
Registered pickmax_x_neg with inferred type list(grid) -> grid.
Registered pickmax_y_pos with inferred type list(grid) -> grid.
Registered pickmax_y_neg with inferred type list(grid) -> grid.
Registered ic_pickunique with inferred type list(grid) -> grid.
Registered ic_composegrowing with inferred type list(grid) -> grid.
Registered mklist with inferred type grid -> grid -> list(grid).
Registered lcons with inferred type grid -> list(grid) -> list(grid).
Registered overlay with inferred type grid -> grid -> grid.
Registered colourPixel with inferred type colour -> grid.
Registered repeatX with inferred type grid -> grid.
Registered repeatY with inferred type grid -> grid.
Registered mirrorX with inferred type grid -> grid.
Registered mirrorY with inferred type grid -> grid.
Registered colourHull with inferred type colour -> grid -> grid.
Registered get_bg with inferred type colour -> grid -> grid.
Registered logical_and with inferred type grid -> grid -> grid.
Registered map with inferred type (grid -> grid) -> list(grid) -> list(grid).
Registered value c1 of type colour.
Registered value c2 of type colour.
Registered value c3 of type colour.
Registered value c4 of type colour.
Registered value c5 of type colour.
Registered value c6 of type colour.
Registered value c7 of type colour.
Registered value c8 of type colour.
Registered value c9 of type colour.
Registered 74 total primitives.
Primitive map already exists, skipping ocaml code generation for it
CUDA is available?: False
using cuda?: False
Running EC on nozomi @ 2023-04-15 01:06:58.115818 with 48 CPUs and parameters:
	 noConsolidation  =  False
	 biasOptimal  =  False
	 contextual  =  False
	 iterations  =  5
	 enumerationTimeout  =  240
	 reuseRecognition  =  False
	 ensembleSize  =  1
	 recognitionTimeout  =  360
	 helmholtzRatio  =  1.0
	 topk_use_only_likelihood  =  False
	 pseudoCounts  =  30.0
	 aic  =  0.1
	 structurePenalty  =  0.1
	 arity  =  3
	 taskReranker  =  default
	 storeTaskMetrics  =  True
	 rewriteTaskMetrics  =  False
	 maximumFrontier  =  10
	 solver  =  python
	 topK  =  5
	 evaluationTimeout  =  1.0
	 cuda  =  False

Currently using this much memory: 169750528
Currently using this much memory: 169750528
Using a waking task batch of size: 400
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 48 jobs | 0 CPUs | 400 tasks | 192.0m CPU rem | 4.0m rem | 0.0 avg lb
Enumerated     7,688 programs | 48 jobs | 47 CPUs | 400 tasks | 179.2m CPU rem | 3.7m rem | 12.0 avg lb
Enumerated   418,945 programs | 48 jobs | 47 CPUs | 392 tasks | 62.1m CPU rem | 1.3m rem | 14.0 avg lb
Enumerated   838,420 programs | 48 jobs | 47 CPUs | 389 tasks | 58.1m CPU rem | 1.2m rem | 14.4 avg lb
Enumerated 1,904,380 programs | 48 jobs | 47 CPUs | 383 tasks | 54.1m CPU rem | 1.1m rem | 15.5 avg lb
Enumerated 2,190,610 programs | 48 jobs | 47 CPUs | 383 tasks | 48.0m CPU rem | 1.0m rem | 15.8 avg lb
Enumerated 2,318,920 programs | 48 jobs | 47 CPUs | 383 tasks | 42.4m CPU rem | 0.9m rem | 16.0 avg lb
Enumerated 2,351,887 programs | 34 jobs | 47 CPUs | 265 tasks | 0.0m CPU rem | 0.0m rem | 16.0 avg lb
We enumerated this many programs, for each task:
	 [10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 961, 9815, 10036, 9880, 10073, 961, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 5896, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 961, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 5896, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 961, 9882, 9988, 9827, 9863, 961, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 5896, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 5896, 9319, 9464, 9530, 9815, 5896, 5896, 961, 9751, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 5896, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 961, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 9798, 9809, 9520, 9694, 9850, 9899, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 5896, 9882, 9920, 8906, 8685, 9254, 9337, 8952, 9752, 9844, 9751, 9601, 9361, 9880, 9640, 9617, 9178, 9940, 9882, 9319, 9464, 9530, 9815, 10036, 9880, 10073, 9751, 9790, 9674, 9798, 9809, 961, 9694, 9850, 5896, 9538, 9703, 9437, 9627, 10004, 9503, 9559, 9760, 9763, 9571, 9882, 9988, 9827, 9863, 9882, 9920, 8906, 8685, 9254, 9337]
Generative model enumeration results:
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -10.300383 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (ic_compress2 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (ic_pickunique (ic_splitall $0))) ; log prior = -9.981929 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (ic_compress2 (repeatX $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (pickcommon (split8 $0))) ; log prior = -9.981929 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (mirrorY (top_half $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (flipx $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (flipy $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (flipx $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (pickcommon (ic_splitall (mirrorX $0)))) ; log prior = -13.933173 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (flipy (ic_compress2 $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (ic_compress3 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (ic_compress2 (ic_compress3 $0))) ; log prior = -11.853731 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (fillobj c1 $0)) ; log prior = -10.300383 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (pickcommon (split8 $0))) ; log prior = -9.981929 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (ic_compress3 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -7.902487 ; log likelihood = 0.000000
Hits 29/400 tasks
Average description length of a program solving a task: 9.580927 nats
Generative model average:  9 sec.	median: 4 	max: 95 	standard deviation 17
Currently using this much memory: 169840640
Frontiers discovered top down: 29
Total frontiers: 29
Using an ensemble size of 1. Note that we will only store and test on the best recognition model.
Currently using this much memory: 171511808
(ID=0): Training a recognition model from 29 frontiers, 100% Helmholtz, feature extractor MikelArcNet.
(ID=0): Got 0 Helmholtz frontiers - random Helmholtz training? : True
(ID=0): Contextual? False
(ID=0): Bias optimal? False
(ID=0): Aux loss? False (n.b. we train a 'auxiliary' classifier anyway - this controls if gradients propagate back to the future extractor)
Sampling 1000 programs from the prior on 48 CPUs...
Got 504/1000 valid samples.
(ID=0): Epoch 1 Loss 10.48
(ID=0): 	vs MDL (w/o neural net) 10.30
(ID=0): 	1 cum grad steps. 0.3 steps/sec | 74-way aux classif loss 0.6994
(ID=0): Epoch 50 Loss 24.21
(ID=0): 	vs MDL (w/o neural net) 24.48
(ID=0): 	50 cum grad steps. 8.0 steps/sec | 74-way aux classif loss 0.6859
(ID=0): Epoch 100 Loss 20.53
(ID=0): 	vs MDL (w/o neural net) 21.17
(ID=0): 	100 cum grad steps. 11.6 steps/sec | 74-way aux classif loss 0.6141
(ID=0): Epoch 150 Loss 22.89
(ID=0): 	vs MDL (w/o neural net) 24.12
(ID=0): 	150 cum grad steps. 13.6 steps/sec | 74-way aux classif loss 0.5831
(ID=0): Epoch 200 Loss 22.11
(ID=0): 	vs MDL (w/o neural net) 23.93
(ID=0): 	200 cum grad steps. 15.1 steps/sec | 74-way aux classif loss 0.5162
(ID=0): Epoch 250 Loss 22.73
(ID=0): 	vs MDL (w/o neural net) 25.00
(ID=0): 	250 cum grad steps. 16.2 steps/sec | 74-way aux classif loss 0.4917
(ID=0): Epoch 300 Loss 23.19
(ID=0): 	vs MDL (w/o neural net) 25.63
(ID=0): 	300 cum grad steps. 16.9 steps/sec | 74-way aux classif loss 0.4713
(ID=0): Epoch 350 Loss 18.74
(ID=0): 	vs MDL (w/o neural net) 20.76
(ID=0): 	350 cum grad steps. 17.5 steps/sec | 74-way aux classif loss 0.4241
(ID=0): Epoch 400 Loss 22.09
(ID=0): 	vs MDL (w/o neural net) 24.75
(ID=0): 	400 cum grad steps. 17.9 steps/sec | 74-way aux classif loss 0.4111
(ID=0): Epoch 450 Loss 21.31
(ID=0): 	vs MDL (w/o neural net) 24.11
(ID=0): 	450 cum grad steps. 18.3 steps/sec | 74-way aux classif loss 0.3906
(ID=0): Epoch 500 Loss 20.22
(ID=0): 	vs MDL (w/o neural net) 23.35
(ID=0): 	500 cum grad steps. 18.6 steps/sec | 74-way aux classif loss 0.3682
Sampling 1000 programs from the prior on 48 CPUs...
Got 514/1000 valid samples.
(ID=0): Epoch 550 Loss 19.36
(ID=0): 	vs MDL (w/o neural net) 21.73
(ID=0): 	550 cum grad steps. 16.8 steps/sec | 74-way aux classif loss 0.3620
(ID=0): Epoch 600 Loss 20.84
(ID=0): 	vs MDL (w/o neural net) 23.96
(ID=0): 	600 cum grad steps. 17.1 steps/sec | 74-way aux classif loss 0.3477
(ID=0): Epoch 650 Loss 19.32
(ID=0): 	vs MDL (w/o neural net) 22.05
(ID=0): 	650 cum grad steps. 17.4 steps/sec | 74-way aux classif loss 0.3141
(ID=0): Epoch 700 Loss 19.97
(ID=0): 	vs MDL (w/o neural net) 23.00
(ID=0): 	700 cum grad steps. 17.7 steps/sec | 74-way aux classif loss 0.3293
(ID=0): Epoch 750 Loss 19.41
(ID=0): 	vs MDL (w/o neural net) 22.44
(ID=0): 	750 cum grad steps. 18.0 steps/sec | 74-way aux classif loss 0.3141
(ID=0): Epoch 800 Loss 19.44
(ID=0): 	vs MDL (w/o neural net) 21.94
(ID=0): 	800 cum grad steps. 18.2 steps/sec | 74-way aux classif loss 0.3169
(ID=0): Epoch 850 Loss 21.37
(ID=0): 	vs MDL (w/o neural net) 24.57
(ID=0): 	850 cum grad steps. 18.4 steps/sec | 74-way aux classif loss 0.3179
(ID=0): Epoch 900 Loss 21.37
(ID=0): 	vs MDL (w/o neural net) 24.62
(ID=0): 	900 cum grad steps. 18.6 steps/sec | 74-way aux classif loss 0.3127
(ID=0): Epoch 950 Loss 22.16
(ID=0): 	vs MDL (w/o neural net) 26.05
(ID=0): 	950 cum grad steps. 18.7 steps/sec | 74-way aux classif loss 0.3133
(ID=0): Epoch 1000 Loss 21.75
(ID=0): 	vs MDL (w/o neural net) 24.57
(ID=0): 	1000 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.3181
Sampling 1000 programs from the prior on 48 CPUs...
Got 481/1000 valid samples.
(ID=0): Epoch 1050 Loss 19.77
(ID=0): 	vs MDL (w/o neural net) 22.14
(ID=0): 	1050 cum grad steps. 17.9 steps/sec | 74-way aux classif loss 0.3140
(ID=0): Epoch 1100 Loss 19.65
(ID=0): 	vs MDL (w/o neural net) 22.65
(ID=0): 	1100 cum grad steps. 18.0 steps/sec | 74-way aux classif loss 0.2816
(ID=0): Epoch 1150 Loss 20.25
(ID=0): 	vs MDL (w/o neural net) 23.39
(ID=0): 	1150 cum grad steps. 18.2 steps/sec | 74-way aux classif loss 0.2887
(ID=0): Epoch 1200 Loss 18.66
(ID=0): 	vs MDL (w/o neural net) 21.09
(ID=0): 	1200 cum grad steps. 18.4 steps/sec | 74-way aux classif loss 0.2800
(ID=0): Epoch 1250 Loss 19.52
(ID=0): 	vs MDL (w/o neural net) 22.28
(ID=0): 	1250 cum grad steps. 18.5 steps/sec | 74-way aux classif loss 0.2762
(ID=0): Epoch 1300 Loss 20.17
(ID=0): 	vs MDL (w/o neural net) 23.18
(ID=0): 	1300 cum grad steps. 18.7 steps/sec | 74-way aux classif loss 0.2820
(ID=0): Epoch 1350 Loss 21.99
(ID=0): 	vs MDL (w/o neural net) 25.25
(ID=0): 	1350 cum grad steps. 18.8 steps/sec | 74-way aux classif loss 0.2878
(ID=0): Epoch 1400 Loss 20.09
(ID=0): 	vs MDL (w/o neural net) 22.92
(ID=0): 	1400 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.2802
(ID=0): Epoch 1450 Loss 20.66
(ID=0): 	vs MDL (w/o neural net) 23.81
(ID=0): 	1450 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2782
Sampling 1000 programs from the prior on 48 CPUs...
Got 497/1000 valid samples.
(ID=0): Epoch 1500 Loss 20.40
(ID=0): 	vs MDL (w/o neural net) 23.27
(ID=0): 	1500 cum grad steps. 18.4 steps/sec | 74-way aux classif loss 0.2760
(ID=0): Epoch 1550 Loss 19.96
(ID=0): 	vs MDL (w/o neural net) 22.54
(ID=0): 	1550 cum grad steps. 18.5 steps/sec | 74-way aux classif loss 0.2729
(ID=0): Epoch 1600 Loss 21.11
(ID=0): 	vs MDL (w/o neural net) 24.27
(ID=0): 	1600 cum grad steps. 18.6 steps/sec | 74-way aux classif loss 0.2802
(ID=0): Epoch 1650 Loss 20.87
(ID=0): 	vs MDL (w/o neural net) 23.68
(ID=0): 	1650 cum grad steps. 18.7 steps/sec | 74-way aux classif loss 0.2860
(ID=0): Epoch 1700 Loss 19.30
(ID=0): 	vs MDL (w/o neural net) 22.08
(ID=0): 	1700 cum grad steps. 18.8 steps/sec | 74-way aux classif loss 0.2654
(ID=0): Epoch 1750 Loss 21.83
(ID=0): 	vs MDL (w/o neural net) 24.77
(ID=0): 	1750 cum grad steps. 18.8 steps/sec | 74-way aux classif loss 0.2836
(ID=0): Epoch 1800 Loss 20.55
(ID=0): 	vs MDL (w/o neural net) 23.71
(ID=0): 	1800 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.2715
(ID=0): Epoch 1850 Loss 19.01
(ID=0): 	vs MDL (w/o neural net) 21.87
(ID=0): 	1850 cum grad steps. 19.0 steps/sec | 74-way aux classif loss 0.2624
(ID=0): Epoch 1900 Loss 19.79
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	1900 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2678
(ID=0): Epoch 1950 Loss 19.88
(ID=0): 	vs MDL (w/o neural net) 22.94
(ID=0): 	1950 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2665
Sampling 1000 programs from the prior on 48 CPUs...
Got 535/1000 valid samples.
(ID=0): Epoch 2000 Loss 18.34
(ID=0): 	vs MDL (w/o neural net) 21.23
(ID=0): 	2000 cum grad steps. 18.6 steps/sec | 74-way aux classif loss 0.2422
(ID=0): Epoch 2050 Loss 20.28
(ID=0): 	vs MDL (w/o neural net) 23.60
(ID=0): 	2050 cum grad steps. 18.7 steps/sec | 74-way aux classif loss 0.2624
(ID=0): Epoch 2100 Loss 21.93
(ID=0): 	vs MDL (w/o neural net) 25.35
(ID=0): 	2100 cum grad steps. 18.8 steps/sec | 74-way aux classif loss 0.2728
(ID=0): Epoch 2150 Loss 20.27
(ID=0): 	vs MDL (w/o neural net) 22.99
(ID=0): 	2150 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.2636
(ID=0): Epoch 2200 Loss 21.10
(ID=0): 	vs MDL (w/o neural net) 24.03
(ID=0): 	2200 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.2642
(ID=0): Epoch 2250 Loss 18.31
(ID=0): 	vs MDL (w/o neural net) 20.88
(ID=0): 	2250 cum grad steps. 19.0 steps/sec | 74-way aux classif loss 0.2582
(ID=0): Epoch 2300 Loss 19.77
(ID=0): 	vs MDL (w/o neural net) 22.44
(ID=0): 	2300 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2641
(ID=0): Epoch 2350 Loss 17.87
(ID=0): 	vs MDL (w/o neural net) 21.13
(ID=0): 	2350 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2382
(ID=0): Epoch 2400 Loss 17.09
(ID=0): 	vs MDL (w/o neural net) 19.98
(ID=0): 	2400 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2354
(ID=0): Epoch 2450 Loss 17.94
(ID=0): 	vs MDL (w/o neural net) 20.72
(ID=0): 	2450 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2521
(ID=0): Epoch 2500 Loss 20.46
(ID=0): 	vs MDL (w/o neural net) 23.26
(ID=0): 	2500 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.3162
Sampling 1000 programs from the prior on 48 CPUs...
Got 519/1000 valid samples.
(ID=0): Epoch 2550 Loss 22.74
(ID=0): 	vs MDL (w/o neural net) 26.12
(ID=0): 	2550 cum grad steps. 18.9 steps/sec | 74-way aux classif loss 0.2724
(ID=0): Epoch 2600 Loss 20.55
(ID=0): 	vs MDL (w/o neural net) 23.91
(ID=0): 	2600 cum grad steps. 19.0 steps/sec | 74-way aux classif loss 0.2512
(ID=0): Epoch 2650 Loss 19.28
(ID=0): 	vs MDL (w/o neural net) 22.06
(ID=0): 	2650 cum grad steps. 19.0 steps/sec | 74-way aux classif loss 0.2542
(ID=0): Epoch 2700 Loss 18.86
(ID=0): 	vs MDL (w/o neural net) 21.83
(ID=0): 	2700 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2386
(ID=0): Epoch 2750 Loss 19.91
(ID=0): 	vs MDL (w/o neural net) 23.26
(ID=0): 	2750 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2506
(ID=0): Epoch 2800 Loss 19.00
(ID=0): 	vs MDL (w/o neural net) 21.92
(ID=0): 	2800 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2474
(ID=0): Epoch 2850 Loss 19.55
(ID=0): 	vs MDL (w/o neural net) 22.42
(ID=0): 	2850 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2515
(ID=0): Epoch 2900 Loss 19.07
(ID=0): 	vs MDL (w/o neural net) 22.42
(ID=0): 	2900 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2468
(ID=0): Epoch 2950 Loss 18.88
(ID=0): 	vs MDL (w/o neural net) 21.52
(ID=0): 	2950 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2521
(ID=0): Epoch 3000 Loss 19.99
(ID=0): 	vs MDL (w/o neural net) 22.99
(ID=0): 	3000 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2516
(ID=0): Epoch 3050 Loss 19.88
(ID=0): 	vs MDL (w/o neural net) 23.31
(ID=0): 	3050 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2759
Sampling 1000 programs from the prior on 48 CPUs...
Got 510/1000 valid samples.
(ID=0): Epoch 3100 Loss 21.01
(ID=0): 	vs MDL (w/o neural net) 24.57
(ID=0): 	3100 cum grad steps. 19.0 steps/sec | 74-way aux classif loss 0.2602
(ID=0): Epoch 3150 Loss 19.04
(ID=0): 	vs MDL (w/o neural net) 21.87
(ID=0): 	3150 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2430
(ID=0): Epoch 3200 Loss 19.57
(ID=0): 	vs MDL (w/o neural net) 22.33
(ID=0): 	3200 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2554
(ID=0): Epoch 3250 Loss 18.48
(ID=0): 	vs MDL (w/o neural net) 21.25
(ID=0): 	3250 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2461
(ID=0): Epoch 3300 Loss 17.71
(ID=0): 	vs MDL (w/o neural net) 20.75
(ID=0): 	3300 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2327
(ID=0): Epoch 3350 Loss 20.34
(ID=0): 	vs MDL (w/o neural net) 23.46
(ID=0): 	3350 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2605
(ID=0): Epoch 3400 Loss 22.86
(ID=0): 	vs MDL (w/o neural net) 26.24
(ID=0): 	3400 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2772
(ID=0): Epoch 3450 Loss 19.23
(ID=0): 	vs MDL (w/o neural net) 22.10
(ID=0): 	3450 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2783
(ID=0): Epoch 3500 Loss 20.31
(ID=0): 	vs MDL (w/o neural net) 23.24
(ID=0): 	3500 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2637
(ID=0): Epoch 3550 Loss 18.94
(ID=0): 	vs MDL (w/o neural net) 22.03
(ID=0): 	3550 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2419
Sampling 1000 programs from the prior on 48 CPUs...
Got 496/1000 valid samples.
(ID=0): Epoch 3600 Loss 19.23
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	3600 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2440
(ID=0): Epoch 3650 Loss 20.07
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	3650 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2528
(ID=0): Epoch 3700 Loss 21.53
(ID=0): 	vs MDL (w/o neural net) 24.77
(ID=0): 	3700 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2664
(ID=0): Epoch 3750 Loss 18.75
(ID=0): 	vs MDL (w/o neural net) 21.65
(ID=0): 	3750 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2396
(ID=0): Epoch 3800 Loss 19.84
(ID=0): 	vs MDL (w/o neural net) 23.16
(ID=0): 	3800 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2655
(ID=0): Epoch 3850 Loss 20.64
(ID=0): 	vs MDL (w/o neural net) 24.29
(ID=0): 	3850 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2621
(ID=0): Epoch 3900 Loss 20.65
(ID=0): 	vs MDL (w/o neural net) 23.85
(ID=0): 	3900 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2581
(ID=0): Epoch 3950 Loss 19.79
(ID=0): 	vs MDL (w/o neural net) 22.62
(ID=0): 	3950 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2509
(ID=0): Epoch 4000 Loss 20.57
(ID=0): 	vs MDL (w/o neural net) 23.65
(ID=0): 	4000 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2698
(ID=0): Epoch 4050 Loss 19.39
(ID=0): 	vs MDL (w/o neural net) 22.35
(ID=0): 	4050 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2524
Sampling 1000 programs from the prior on 48 CPUs...
Got 493/1000 valid samples.
(ID=0): Epoch 4100 Loss 17.22
(ID=0): 	vs MDL (w/o neural net) 20.18
(ID=0): 	4100 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2327
(ID=0): Epoch 4150 Loss 18.95
(ID=0): 	vs MDL (w/o neural net) 22.20
(ID=0): 	4150 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2428
(ID=0): Epoch 4200 Loss 18.04
(ID=0): 	vs MDL (w/o neural net) 21.48
(ID=0): 	4200 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2366
(ID=0): Epoch 4250 Loss 20.82
(ID=0): 	vs MDL (w/o neural net) 24.15
(ID=0): 	4250 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2578
(ID=0): Epoch 4300 Loss 21.22
(ID=0): 	vs MDL (w/o neural net) 24.66
(ID=0): 	4300 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2516
(ID=0): Epoch 4350 Loss 20.26
(ID=0): 	vs MDL (w/o neural net) 23.69
(ID=0): 	4350 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2510
(ID=0): Epoch 4400 Loss 20.80
(ID=0): 	vs MDL (w/o neural net) 24.09
(ID=0): 	4400 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2546
(ID=0): Epoch 4450 Loss 21.94
(ID=0): 	vs MDL (w/o neural net) 24.94
(ID=0): 	4450 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2676
(ID=0): Epoch 4500 Loss 20.40
(ID=0): 	vs MDL (w/o neural net) 24.10
(ID=0): 	4500 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2507
Sampling 1000 programs from the prior on 48 CPUs...
Got 496/1000 valid samples.
(ID=0): Epoch 4550 Loss 20.17
(ID=0): 	vs MDL (w/o neural net) 23.63
(ID=0): 	4550 cum grad steps. 19.1 steps/sec | 74-way aux classif loss 0.2529
(ID=0): Epoch 4600 Loss 21.12
(ID=0): 	vs MDL (w/o neural net) 24.55
(ID=0): 	4600 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2627
(ID=0): Epoch 4650 Loss 19.39
(ID=0): 	vs MDL (w/o neural net) 22.55
(ID=0): 	4650 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2516
(ID=0): Epoch 4700 Loss 20.73
(ID=0): 	vs MDL (w/o neural net) 23.68
(ID=0): 	4700 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2627
(ID=0): Epoch 4750 Loss 21.61
(ID=0): 	vs MDL (w/o neural net) 25.00
(ID=0): 	4750 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2570
(ID=0): Epoch 4800 Loss 18.43
(ID=0): 	vs MDL (w/o neural net) 21.59
(ID=0): 	4800 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2380
(ID=0): Epoch 4850 Loss 20.81
(ID=0): 	vs MDL (w/o neural net) 24.13
(ID=0): 	4850 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2547
(ID=0): Epoch 4900 Loss 20.19
(ID=0): 	vs MDL (w/o neural net) 23.55
(ID=0): 	4900 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2526
(ID=0): Epoch 4950 Loss 18.02
(ID=0): 	vs MDL (w/o neural net) 21.05
(ID=0): 	4950 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2308
(ID=0): Epoch 5000 Loss 21.82
(ID=0): 	vs MDL (w/o neural net) 25.34
(ID=0): 	5000 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2635
Sampling 1000 programs from the prior on 48 CPUs...
Got 526/1000 valid samples.
(ID=0): Epoch 5050 Loss 19.14
(ID=0): 	vs MDL (w/o neural net) 22.10
(ID=0): 	5050 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2419
(ID=0): Epoch 5100 Loss 18.47
(ID=0): 	vs MDL (w/o neural net) 21.69
(ID=0): 	5100 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2372
(ID=0): Epoch 5150 Loss 19.32
(ID=0): 	vs MDL (w/o neural net) 22.43
(ID=0): 	5150 cum grad steps. 19.2 steps/sec | 74-way aux classif loss 0.2427
(ID=0): Epoch 5200 Loss 20.07
(ID=0): 	vs MDL (w/o neural net) 23.11
(ID=0): 	5200 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2482
(ID=0): Epoch 5250 Loss 18.49
(ID=0): 	vs MDL (w/o neural net) 21.32
(ID=0): 	5250 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2376
(ID=0): Epoch 5300 Loss 19.99
(ID=0): 	vs MDL (w/o neural net) 23.47
(ID=0): 	5300 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2421
(ID=0): Epoch 5350 Loss 22.36
(ID=0): 	vs MDL (w/o neural net) 25.86
(ID=0): 	5350 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2657
(ID=0): Epoch 5400 Loss 18.15
(ID=0): 	vs MDL (w/o neural net) 21.28
(ID=0): 	5400 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2394
(ID=0): Epoch 5450 Loss 20.66
(ID=0): 	vs MDL (w/o neural net) 24.35
(ID=0): 	5450 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2584
(ID=0): Epoch 5500 Loss 18.62
(ID=0): 	vs MDL (w/o neural net) 21.94
(ID=0): 	5500 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2450
(ID=0): Epoch 5550 Loss 17.38
(ID=0): 	vs MDL (w/o neural net) 20.45
(ID=0): 	5550 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2500
Sampling 1000 programs from the prior on 48 CPUs...
Got 506/1000 valid samples.
(ID=0): Epoch 5600 Loss 20.75
(ID=0): 	vs MDL (w/o neural net) 24.31
(ID=0): 	5600 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2635
(ID=0): Epoch 5650 Loss 19.75
(ID=0): 	vs MDL (w/o neural net) 22.79
(ID=0): 	5650 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2505
(ID=0): Epoch 5700 Loss 18.75
(ID=0): 	vs MDL (w/o neural net) 21.91
(ID=0): 	5700 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2461
(ID=0): Epoch 5750 Loss 17.58
(ID=0): 	vs MDL (w/o neural net) 20.72
(ID=0): 	5750 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2303
(ID=0): Epoch 5800 Loss 21.03
(ID=0): 	vs MDL (w/o neural net) 24.34
(ID=0): 	5800 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2578
(ID=0): Epoch 5850 Loss 21.00
(ID=0): 	vs MDL (w/o neural net) 24.81
(ID=0): 	5850 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2495
(ID=0): Epoch 5900 Loss 20.01
(ID=0): 	vs MDL (w/o neural net) 23.67
(ID=0): 	5900 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2473
(ID=0): Epoch 5950 Loss 17.53
(ID=0): 	vs MDL (w/o neural net) 20.42
(ID=0): 	5950 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2273
(ID=0): Epoch 6000 Loss 20.76
(ID=0): 	vs MDL (w/o neural net) 24.24
(ID=0): 	6000 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2573
(ID=0): Epoch 6050 Loss 19.02
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	6050 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2859
Sampling 1000 programs from the prior on 48 CPUs...
Got 501/1000 valid samples.
(ID=0): Epoch 6100 Loss 21.33
(ID=0): 	vs MDL (w/o neural net) 24.65
(ID=0): 	6100 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2601
(ID=0): Epoch 6150 Loss 18.64
(ID=0): 	vs MDL (w/o neural net) 22.07
(ID=0): 	6150 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2351
(ID=0): Epoch 6200 Loss 19.74
(ID=0): 	vs MDL (w/o neural net) 22.99
(ID=0): 	6200 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2462
(ID=0): Epoch 6250 Loss 18.67
(ID=0): 	vs MDL (w/o neural net) 21.81
(ID=0): 	6250 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2422
(ID=0): Epoch 6300 Loss 20.17
(ID=0): 	vs MDL (w/o neural net) 23.49
(ID=0): 	6300 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2546
(ID=0): Epoch 6350 Loss 20.86
(ID=0): 	vs MDL (w/o neural net) 24.31
(ID=0): 	6350 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2547
(ID=0): Epoch 6400 Loss 18.60
(ID=0): 	vs MDL (w/o neural net) 21.78
(ID=0): 	6400 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2393
(ID=0): Epoch 6450 Loss 20.99
(ID=0): 	vs MDL (w/o neural net) 24.37
(ID=0): 	6450 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2636
(ID=0): Epoch 6500 Loss 18.34
(ID=0): 	vs MDL (w/o neural net) 21.73
(ID=0): 	6500 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2385
(ID=0): Epoch 6550 Loss 20.10
(ID=0): 	vs MDL (w/o neural net) 23.78
(ID=0): 	6550 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2527
Sampling 1000 programs from the prior on 48 CPUs...
Got 468/1000 valid samples.
(ID=0): Epoch 6600 Loss 21.60
(ID=0): 	vs MDL (w/o neural net) 24.63
(ID=0): 	6600 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2599
(ID=0): Epoch 6650 Loss 21.37
(ID=0): 	vs MDL (w/o neural net) 24.74
(ID=0): 	6650 cum grad steps. 19.3 steps/sec | 74-way aux classif loss 0.2622
(ID=0): Epoch 6700 Loss 18.96
(ID=0): 	vs MDL (w/o neural net) 22.06
(ID=0): 	6700 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2422
(ID=0): Epoch 6750 Loss 19.77
(ID=0): 	vs MDL (w/o neural net) 23.06
(ID=0): 	6750 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2439
(ID=0): Epoch 6800 Loss 19.26
(ID=0): 	vs MDL (w/o neural net) 22.25
(ID=0): 	6800 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2398
(ID=0): Epoch 6850 Loss 17.81
(ID=0): 	vs MDL (w/o neural net) 21.26
(ID=0): 	6850 cum grad steps. 19.4 steps/sec | 74-way aux classif loss 0.2295
(ID=0): Epoch 6900 Loss 19.53
(ID=0): 	vs MDL (w/o neural net) 22.77
(ID=0): 	6900 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2405
(ID=0): Epoch 6950 Loss 20.68
(ID=0): 	vs MDL (w/o neural net) 24.30
(ID=0): 	6950 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2505
(ID=0): Epoch 7000 Loss 19.16
(ID=0): 	vs MDL (w/o neural net) 22.44
(ID=0): 	7000 cum grad steps. 19.5 steps/sec | 74-way aux classif loss 0.2398
(ID=0):   Trained recognition model in 360.01768231391907 seconds
Currently using this much memory: 457752576
Trained an ensemble of 1 recognition models, now enumerating.
Enumerating from recognizer 0 of 1
Evaluated recognition model in 3.8 seconds
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 400 jobs | 0 CPUs | 400 tasks | 1600.0m CPU rem | 33.3m rem | 0.0 avg lb
Enumerated     4,104 programs | 400 jobs | 47 CPUs | 400 tasks | 1596.4m CPU rem | 33.3m rem | 1.8 avg lb
Enumerated    20,143 programs | 400 jobs | 47 CPUs | 400 tasks | 1592.3m CPU rem | 33.2m rem | 2.3 avg lb
Enumerated    90,439 programs | 400 jobs | 47 CPUs | 400 tasks | 1588.1m CPU rem | 33.1m rem | 2.9 avg lb
Enumerated   143,126 programs | 398 jobs | 47 CPUs | 398 tasks | 1576.6m CPU rem | 32.8m rem | 3.4 avg lb
Enumerated   187,957 programs | 398 jobs | 47 CPUs | 398 tasks | 1572.5m CPU rem | 32.8m rem | 3.9 avg lb
Enumerated   246,112 programs | 398 jobs | 47 CPUs | 398 tasks | 1568.3m CPU rem | 32.7m rem | 4.5 avg lb
Enumerated   303,627 programs | 398 jobs | 47 CPUs | 398 tasks | 1564.2m CPU rem | 32.6m rem | 5.1 avg lb
Enumerated   353,456 programs | 397 jobs | 47 CPUs | 397 tasks | 1556.2m CPU rem | 32.4m rem | 5.6 avg lb
Enumerated   403,059 programs | 396 jobs | 47 CPUs | 396 tasks | 1548.4m CPU rem | 32.3m rem | 6.2 avg lb
Enumerated   440,015 programs | 395 jobs | 47 CPUs | 395 tasks | 1540.5m CPU rem | 32.1m rem | 6.7 avg lb
Enumerated   504,422 programs | 393 jobs | 47 CPUs | 393 tasks | 1528.9m CPU rem | 31.9m rem | 7.2 avg lb
Enumerated   556,979 programs | 393 jobs | 47 CPUs | 393 tasks | 1524.8m CPU rem | 31.8m rem | 7.8 avg lb
Enumerated   602,631 programs | 393 jobs | 47 CPUs | 393 tasks | 1520.7m CPU rem | 31.7m rem | 8.3 avg lb
Enumerated   667,246 programs | 392 jobs | 47 CPUs | 392 tasks | 1512.9m CPU rem | 31.5m rem | 8.9 avg lb
Enumerated   724,197 programs | 391 jobs | 47 CPUs | 391 tasks | 1505.0m CPU rem | 31.4m rem | 9.4 avg lb
Enumerated   788,246 programs | 391 jobs | 47 CPUs | 391 tasks | 1500.9m CPU rem | 31.3m rem | 10.0 avg lb
Enumerated   842,521 programs | 391 jobs | 47 CPUs | 391 tasks | 1496.9m CPU rem | 31.2m rem | 10.6 avg lb
Enumerated   894,278 programs | 391 jobs | 47 CPUs | 391 tasks | 1492.7m CPU rem | 31.1m rem | 11.1 avg lb
Enumerated   942,849 programs | 391 jobs | 47 CPUs | 391 tasks | 1488.7m CPU rem | 31.0m rem | 11.7 avg lb
Enumerated   999,927 programs | 390 jobs | 47 CPUs | 390 tasks | 1480.8m CPU rem | 30.9m rem | 12.0 avg lb
Enumerated 1,049,533 programs | 390 jobs | 47 CPUs | 390 tasks | 1476.7m CPU rem | 30.8m rem | 12.1 avg lb
Enumerated 1,108,582 programs | 389 jobs | 47 CPUs | 389 tasks | 1468.8m CPU rem | 30.6m rem | 12.2 avg lb
Enumerated 1,155,552 programs | 389 jobs | 47 CPUs | 389 tasks | 1464.5m CPU rem | 30.5m rem | 12.3 avg lb
Enumerated 1,185,063 programs | 389 jobs | 47 CPUs | 389 tasks | 1460.4m CPU rem | 30.4m rem | 12.4 avg lb
Enumerated 1,212,334 programs | 389 jobs | 47 CPUs | 389 tasks | 1456.3m CPU rem | 30.3m rem | 12.4 avg lb
Enumerated 1,285,752 programs | 388 jobs | 47 CPUs | 388 tasks | 1448.9m CPU rem | 30.2m rem | 12.5 avg lb
Enumerated 1,370,769 programs | 387 jobs | 47 CPUs | 387 tasks | 1441.2m CPU rem | 30.0m rem | 12.5 avg lb
Enumerated 1,507,199 programs | 387 jobs | 47 CPUs | 387 tasks | 1436.9m CPU rem | 29.9m rem | 12.6 avg lb
Enumerated 1,631,730 programs | 387 jobs | 47 CPUs | 387 tasks | 1432.8m CPU rem | 29.9m rem | 12.6 avg lb
Enumerated 1,748,628 programs | 387 jobs | 47 CPUs | 387 tasks | 1428.6m CPU rem | 29.8m rem | 12.7 avg lb
Enumerated 1,879,896 programs | 387 jobs | 47 CPUs | 387 tasks | 1424.2m CPU rem | 29.7m rem | 12.7 avg lb
Enumerated 1,959,967 programs | 387 jobs | 47 CPUs | 387 tasks | 1420.1m CPU rem | 29.6m rem | 12.8 avg lb
Enumerated 2,114,248 programs | 387 jobs | 47 CPUs | 387 tasks | 1415.8m CPU rem | 29.5m rem | 12.8 avg lb
Enumerated 2,201,775 programs | 387 jobs | 47 CPUs | 387 tasks | 1411.8m CPU rem | 29.4m rem | 12.9 avg lb
Enumerated 2,350,967 programs | 387 jobs | 47 CPUs | 387 tasks | 1407.4m CPU rem | 29.3m rem | 13.0 avg lb
Enumerated 2,467,428 programs | 387 jobs | 47 CPUs | 387 tasks | 1403.2m CPU rem | 29.2m rem | 13.0 avg lb
Enumerated 2,624,020 programs | 386 jobs | 47 CPUs | 386 tasks | 1395.9m CPU rem | 29.1m rem | 13.1 avg lb
Enumerated 2,718,529 programs | 386 jobs | 47 CPUs | 386 tasks | 1391.4m CPU rem | 29.0m rem | 13.1 avg lb
Enumerated 2,843,651 programs | 386 jobs | 47 CPUs | 386 tasks | 1386.9m CPU rem | 28.9m rem | 13.2 avg lb
Enumerated 2,956,954 programs | 386 jobs | 47 CPUs | 386 tasks | 1382.7m CPU rem | 28.8m rem | 13.2 avg lb
Enumerated 3,067,998 programs | 386 jobs | 47 CPUs | 386 tasks | 1378.0m CPU rem | 28.7m rem | 13.3 avg lb
Enumerated 3,163,302 programs | 386 jobs | 47 CPUs | 386 tasks | 1373.7m CPU rem | 28.6m rem | 13.3 avg lb
Enumerated 3,289,970 programs | 386 jobs | 47 CPUs | 386 tasks | 1369.6m CPU rem | 28.5m rem | 13.3 avg lb
Enumerated 3,427,594 programs | 386 jobs | 47 CPUs | 386 tasks | 1365.4m CPU rem | 28.4m rem | 13.4 avg lb
Enumerated 3,568,170 programs | 386 jobs | 47 CPUs | 386 tasks | 1361.2m CPU rem | 28.4m rem | 13.4 avg lb
Enumerated 3,705,767 programs | 386 jobs | 47 CPUs | 386 tasks | 1357.0m CPU rem | 28.3m rem | 13.5 avg lb
Enumerated 3,820,625 programs | 386 jobs | 47 CPUs | 386 tasks | 1352.9m CPU rem | 28.2m rem | 13.5 avg lb
Enumerated 3,958,025 programs | 384 jobs | 47 CPUs | 384 tasks | 1341.8m CPU rem | 28.0m rem | 13.6 avg lb
Enumerated 4,057,532 programs | 383 jobs | 47 CPUs | 383 tasks | 1334.5m CPU rem | 27.8m rem | 13.6 avg lb
Enumerated 4,153,677 programs | 383 jobs | 47 CPUs | 383 tasks | 1330.0m CPU rem | 27.7m rem | 13.7 avg lb
Enumerated 4,332,823 programs | 383 jobs | 47 CPUs | 383 tasks | 1325.9m CPU rem | 27.6m rem | 13.7 avg lb
Enumerated 4,454,334 programs | 383 jobs | 47 CPUs | 383 tasks | 1321.5m CPU rem | 27.5m rem | 13.8 avg lb
Enumerated 4,593,498 programs | 383 jobs | 47 CPUs | 383 tasks | 1317.4m CPU rem | 27.4m rem | 13.8 avg lb
Enumerated 4,716,776 programs | 382 jobs | 47 CPUs | 382 tasks | 1310.2m CPU rem | 27.3m rem | 13.9 avg lb
Enumerated 4,855,223 programs | 382 jobs | 47 CPUs | 382 tasks | 1305.8m CPU rem | 27.2m rem | 13.9 avg lb
Enumerated 4,989,518 programs | 382 jobs | 47 CPUs | 382 tasks | 1301.5m CPU rem | 27.1m rem | 14.0 avg lb
Enumerated 5,110,204 programs | 382 jobs | 47 CPUs | 382 tasks | 1296.9m CPU rem | 27.0m rem | 14.0 avg lb
Enumerated 5,246,454 programs | 382 jobs | 47 CPUs | 382 tasks | 1292.4m CPU rem | 26.9m rem | 14.1 avg lb
Enumerated 5,404,492 programs | 382 jobs | 47 CPUs | 382 tasks | 1288.0m CPU rem | 26.8m rem | 14.2 avg lb
Enumerated 5,506,469 programs | 382 jobs | 47 CPUs | 382 tasks | 1283.8m CPU rem | 26.7m rem | 14.2 avg lb
Enumerated 5,672,185 programs | 382 jobs | 47 CPUs | 382 tasks | 1279.5m CPU rem | 26.7m rem | 14.2 avg lb
Enumerated 5,852,608 programs | 382 jobs | 47 CPUs | 382 tasks | 1275.3m CPU rem | 26.6m rem | 14.3 avg lb
Enumerated 5,955,407 programs | 381 jobs | 47 CPUs | 381 tasks | 1267.5m CPU rem | 26.4m rem | 14.4 avg lb
Enumerated 6,073,080 programs | 380 jobs | 47 CPUs | 380 tasks | 1259.8m CPU rem | 26.2m rem | 14.4 avg lb
Enumerated 6,171,477 programs | 380 jobs | 47 CPUs | 380 tasks | 1255.6m CPU rem | 26.2m rem | 14.4 avg lb
Enumerated 6,233,920 programs | 379 jobs | 47 CPUs | 379 tasks | 1246.6m CPU rem | 26.0m rem | 14.5 avg lb
Enumerated 6,261,471 programs | 379 jobs | 47 CPUs | 379 tasks | 1242.4m CPU rem | 25.9m rem | 14.5 avg lb
Enumerated 6,327,189 programs | 379 jobs | 47 CPUs | 379 tasks | 1234.6m CPU rem | 25.7m rem | 14.5 avg lb
Enumerated 6,385,027 programs | 378 jobs | 47 CPUs | 378 tasks | 1223.0m CPU rem | 25.5m rem | 14.5 avg lb
Enumerated 6,445,900 programs | 378 jobs | 47 CPUs | 378 tasks | 1217.7m CPU rem | 25.4m rem | 14.5 avg lb
Enumerated 6,507,925 programs | 378 jobs | 47 CPUs | 378 tasks | 1209.2m CPU rem | 25.2m rem | 14.5 avg lb
Enumerated 6,534,269 programs | 378 jobs | 47 CPUs | 378 tasks | 1192.0m CPU rem | 24.8m rem | 14.6 avg lb
Enumerated 6,604,261 programs | 377 jobs | 47 CPUs | 377 tasks | 1134.3m CPU rem | 23.6m rem | 14.6 avg lb
Enumerated 7,146,957 programs | 371 jobs | 47 CPUs | 371 tasks | 1130.2m CPU rem | 23.5m rem | 14.6 avg lb
Enumerated 7,437,498 programs | 368 jobs | 47 CPUs | 368 tasks | 1125.1m CPU rem | 23.4m rem | 14.6 avg lb
Enumerated 8,124,104 programs | 361 jobs | 47 CPUs | 361 tasks | 1120.7m CPU rem | 23.3m rem | 14.6 avg lb
Enumerated 8,140,706 programs | 361 jobs | 47 CPUs | 361 tasks | 1116.6m CPU rem | 23.3m rem | 14.6 avg lb
Enumerated 8,640,649 programs | 355 jobs | 47 CPUs | 355 tasks | 1108.4m CPU rem | 23.1m rem | 14.6 avg lb
Enumerated 9,068,451 programs | 348 jobs | 47 CPUs | 348 tasks | 1104.4m CPU rem | 23.0m rem | 14.6 avg lb
Enumerated 9,721,085 programs | 344 jobs | 47 CPUs | 344 tasks | 1099.8m CPU rem | 22.9m rem | 14.7 avg lb
Enumerated 10,227,158 programs | 336 jobs | 47 CPUs | 336 tasks | 1088.2m CPU rem | 22.7m rem | 14.7 avg lb
Enumerated 10,363,614 programs | 335 jobs | 47 CPUs | 335 tasks | 1080.3m CPU rem | 22.5m rem | 14.8 avg lb
Enumerated 10,570,604 programs | 333 jobs | 47 CPUs | 333 tasks | 1076.0m CPU rem | 22.4m rem | 14.8 avg lb
Enumerated 10,632,967 programs | 333 jobs | 47 CPUs | 333 tasks | 1071.6m CPU rem | 22.3m rem | 14.8 avg lb
Enumerated 10,982,200 programs | 330 jobs | 47 CPUs | 330 tasks | 1066.4m CPU rem | 22.2m rem | 14.8 avg lb
Enumerated 11,171,287 programs | 328 jobs | 47 CPUs | 328 tasks | 1058.9m CPU rem | 22.1m rem | 14.9 avg lb
Enumerated 11,305,813 programs | 327 jobs | 47 CPUs | 327 tasks | 1046.5m CPU rem | 21.8m rem | 14.9 avg lb
Enumerated 11,409,027 programs | 326 jobs | 47 CPUs | 326 tasks | 1027.0m CPU rem | 21.4m rem | 14.9 avg lb
Enumerated 11,415,748 programs | 326 jobs | 47 CPUs | 326 tasks | 1020.5m CPU rem | 21.3m rem | 14.9 avg lb
Enumerated 11,468,109 programs | 325 jobs | 47 CPUs | 325 tasks | 992.2m CPU rem | 20.7m rem | 14.9 avg lb
Enumerated 11,474,841 programs | 324 jobs | 47 CPUs | 324 tasks | 983.2m CPU rem | 20.5m rem | 14.9 avg lb
Enumerated 11,563,977 programs | 323 jobs | 47 CPUs | 323 tasks | 971.3m CPU rem | 20.2m rem | 14.9 avg lb
Enumerated 11,755,996 programs | 321 jobs | 47 CPUs | 321 tasks | 966.4m CPU rem | 20.1m rem | 14.9 avg lb
Enumerated 12,127,192 programs | 317 jobs | 47 CPUs | 317 tasks | 961.6m CPU rem | 20.0m rem | 14.9 avg lb
Enumerated 12,433,130 programs | 314 jobs | 47 CPUs | 314 tasks | 956.7m CPU rem | 19.9m rem | 14.9 avg lb
Enumerated 12,709,452 programs | 310 jobs | 47 CPUs | 310 tasks | 951.6m CPU rem | 19.8m rem | 15.0 avg lb
Enumerated 12,989,489 programs | 308 jobs | 47 CPUs | 308 tasks | 947.1m CPU rem | 19.7m rem | 15.0 avg lb
Enumerated 13,319,550 programs | 303 jobs | 47 CPUs | 303 tasks | 942.7m CPU rem | 19.6m rem | 15.0 avg lb
Enumerated 13,765,602 programs | 299 jobs | 47 CPUs | 299 tasks | 938.4m CPU rem | 19.5m rem | 15.1 avg lb
Enumerated 13,962,417 programs | 296 jobs | 47 CPUs | 296 tasks | 934.2m CPU rem | 19.5m rem | 15.1 avg lb
Enumerated 14,342,380 programs | 293 jobs | 47 CPUs | 293 tasks | 927.6m CPU rem | 19.3m rem | 15.1 avg lb
Enumerated 14,774,760 programs | 288 jobs | 47 CPUs | 288 tasks | 921.0m CPU rem | 19.2m rem | 15.1 avg lb
Enumerated 15,449,279 programs | 281 jobs | 47 CPUs | 281 tasks | 915.3m CPU rem | 19.1m rem | 15.2 avg lb
Enumerated 15,574,589 programs | 280 jobs | 47 CPUs | 280 tasks | 910.7m CPU rem | 19.0m rem | 15.2 avg lb
Enumerated 15,672,775 programs | 279 jobs | 47 CPUs | 279 tasks | 904.7m CPU rem | 18.8m rem | 15.2 avg lb
Enumerated 15,841,285 programs | 279 jobs | 47 CPUs | 279 tasks | 900.4m CPU rem | 18.8m rem | 15.2 avg lb
Enumerated 15,919,884 programs | 279 jobs | 47 CPUs | 279 tasks | 882.9m CPU rem | 18.4m rem | 15.3 avg lb
Enumerated 16,002,993 programs | 278 jobs | 47 CPUs | 278 tasks | 871.5m CPU rem | 18.2m rem | 15.3 avg lb
Enumerated 16,083,335 programs | 277 jobs | 47 CPUs | 277 tasks | 830.9m CPU rem | 17.3m rem | 15.3 avg lb
Enumerated 16,233,189 programs | 275 jobs | 47 CPUs | 275 tasks | 824.3m CPU rem | 17.2m rem | 15.3 avg lb
Enumerated 16,323,905 programs | 274 jobs | 47 CPUs | 274 tasks | 817.6m CPU rem | 17.0m rem | 15.3 avg lb
Enumerated 16,708,312 programs | 269 jobs | 47 CPUs | 269 tasks | 812.9m CPU rem | 16.9m rem | 15.3 avg lb
Enumerated 16,800,228 programs | 268 jobs | 47 CPUs | 268 tasks | 806.9m CPU rem | 16.8m rem | 15.4 avg lb
Enumerated 17,284,764 programs | 263 jobs | 47 CPUs | 263 tasks | 802.6m CPU rem | 16.7m rem | 15.4 avg lb
Enumerated 17,594,951 programs | 260 jobs | 47 CPUs | 260 tasks | 796.3m CPU rem | 16.6m rem | 15.4 avg lb
Enumerated 18,084,435 programs | 255 jobs | 47 CPUs | 255 tasks | 792.2m CPU rem | 16.5m rem | 15.5 avg lb
Enumerated 18,286,294 programs | 253 jobs | 47 CPUs | 253 tasks | 788.0m CPU rem | 16.4m rem | 15.5 avg lb
Enumerated 18,577,184 programs | 250 jobs | 47 CPUs | 250 tasks | 780.9m CPU rem | 16.3m rem | 15.5 avg lb
Enumerated 18,908,897 programs | 248 jobs | 47 CPUs | 248 tasks | 776.2m CPU rem | 16.2m rem | 15.6 avg lb
Enumerated 19,611,878 programs | 240 jobs | 47 CPUs | 240 tasks | 772.1m CPU rem | 16.1m rem | 15.7 avg lb
Enumerated 19,787,707 programs | 238 jobs | 47 CPUs | 238 tasks | 767.8m CPU rem | 16.0m rem | 15.7 avg lb
Enumerated 20,000,140 programs | 237 jobs | 47 CPUs | 237 tasks | 763.5m CPU rem | 15.9m rem | 15.7 avg lb
Enumerated 20,125,670 programs | 236 jobs | 47 CPUs | 236 tasks | 759.1m CPU rem | 15.8m rem | 15.8 avg lb
Enumerated 20,456,632 programs | 233 jobs | 47 CPUs | 233 tasks | 754.9m CPU rem | 15.7m rem | 15.8 avg lb
Enumerated 20,474,029 programs | 232 jobs | 47 CPUs | 232 tasks | 745.2m CPU rem | 15.5m rem | 15.8 avg lb
Enumerated 20,587,315 programs | 231 jobs | 47 CPUs | 231 tasks | 736.5m CPU rem | 15.3m rem | 15.9 avg lb
Enumerated 20,690,875 programs | 230 jobs | 47 CPUs | 230 tasks | 722.5m CPU rem | 15.1m rem | 15.9 avg lb
Enumerated 20,793,066 programs | 228 jobs | 47 CPUs | 228 tasks | 680.1m CPU rem | 14.2m rem | 15.9 avg lb
Enumerated 20,885,284 programs | 227 jobs | 47 CPUs | 227 tasks | 675.4m CPU rem | 14.1m rem | 15.9 avg lb
Enumerated 20,976,163 programs | 226 jobs | 47 CPUs | 226 tasks | 666.0m CPU rem | 13.9m rem | 15.9 avg lb
Enumerated 21,241,106 programs | 223 jobs | 47 CPUs | 223 tasks | 661.6m CPU rem | 13.8m rem | 16.0 avg lb
Enumerated 21,490,155 programs | 220 jobs | 47 CPUs | 220 tasks | 656.7m CPU rem | 13.7m rem | 16.0 avg lb
Enumerated 21,636,784 programs | 218 jobs | 47 CPUs | 218 tasks | 651.0m CPU rem | 13.6m rem | 16.0 avg lb
Enumerated 21,951,708 programs | 215 jobs | 47 CPUs | 215 tasks | 646.8m CPU rem | 13.5m rem | 16.1 avg lb
Enumerated 22,226,726 programs | 212 jobs | 47 CPUs | 212 tasks | 641.8m CPU rem | 13.4m rem | 16.1 avg lb
Enumerated 22,364,771 programs | 210 jobs | 47 CPUs | 210 tasks | 636.5m CPU rem | 13.3m rem | 16.2 avg lb
Enumerated 22,860,332 programs | 206 jobs | 47 CPUs | 206 tasks | 627.6m CPU rem | 13.1m rem | 16.2 avg lb
Enumerated 23,213,828 programs | 202 jobs | 47 CPUs | 202 tasks | 623.3m CPU rem | 13.0m rem | 16.3 avg lb
Enumerated 23,550,558 programs | 198 jobs | 47 CPUs | 198 tasks | 619.0m CPU rem | 12.9m rem | 16.4 avg lb
Enumerated 23,982,012 programs | 196 jobs | 47 CPUs | 196 tasks | 614.4m CPU rem | 12.8m rem | 16.5 avg lb
Enumerated 24,387,677 programs | 193 jobs | 47 CPUs | 193 tasks | 610.1m CPU rem | 12.7m rem | 16.6 avg lb
Enumerated 24,619,582 programs | 190 jobs | 47 CPUs | 190 tasks | 602.6m CPU rem | 12.6m rem | 16.6 avg lb
Enumerated 25,073,871 programs | 186 jobs | 47 CPUs | 186 tasks | 598.3m CPU rem | 12.5m rem | 16.8 avg lb
Enumerated 25,394,215 programs | 183 jobs | 47 CPUs | 183 tasks | 592.7m CPU rem | 12.3m rem | 16.8 avg lb
Enumerated 25,527,030 programs | 182 jobs | 47 CPUs | 182 tasks | 588.2m CPU rem | 12.3m rem | 16.9 avg lb
Enumerated 25,632,630 programs | 182 jobs | 47 CPUs | 182 tasks | 584.0m CPU rem | 12.2m rem | 17.0 avg lb
Enumerated 25,727,640 programs | 182 jobs | 47 CPUs | 182 tasks | 578.3m CPU rem | 12.0m rem | 17.1 avg lb
Enumerated 25,743,467 programs | 182 jobs | 47 CPUs | 182 tasks | 572.6m CPU rem | 11.9m rem | 17.1 avg lb
Enumerated 25,992,340 programs | 181 jobs | 47 CPUs | 181 tasks | 568.1m CPU rem | 11.8m rem | 17.2 avg lb
Enumerated 26,302,704 programs | 179 jobs | 47 CPUs | 179 tasks | 562.9m CPU rem | 11.7m rem | 17.3 avg lb
Enumerated 26,550,625 programs | 179 jobs | 47 CPUs | 179 tasks | 558.7m CPU rem | 11.6m rem | 17.4 avg lb
Enumerated 26,633,042 programs | 179 jobs | 47 CPUs | 179 tasks | 553.9m CPU rem | 11.5m rem | 17.4 avg lb
Enumerated 26,661,573 programs | 179 jobs | 47 CPUs | 179 tasks | 549.2m CPU rem | 11.4m rem | 17.4 avg lb
Enumerated 27,092,472 programs | 178 jobs | 47 CPUs | 178 tasks | 541.3m CPU rem | 11.3m rem | 17.5 avg lb
Enumerated 27,224,810 programs | 178 jobs | 47 CPUs | 178 tasks | 536.4m CPU rem | 11.2m rem | 17.6 avg lb
Enumerated 27,364,196 programs | 177 jobs | 47 CPUs | 177 tasks | 531.9m CPU rem | 11.1m rem | 17.7 avg lb
Enumerated 27,607,411 programs | 177 jobs | 47 CPUs | 177 tasks | 527.6m CPU rem | 11.0m rem | 17.7 avg lb
Enumerated 27,746,480 programs | 176 jobs | 47 CPUs | 176 tasks | 523.1m CPU rem | 10.9m rem | 17.8 avg lb
Enumerated 27,993,048 programs | 175 jobs | 47 CPUs | 175 tasks | 517.0m CPU rem | 10.8m rem | 17.9 avg lb
Enumerated 28,511,575 programs | 173 jobs | 47 CPUs | 173 tasks | 512.7m CPU rem | 10.7m rem | 18.0 avg lb
Enumerated 28,671,457 programs | 173 jobs | 47 CPUs | 173 tasks | 508.1m CPU rem | 10.6m rem | 18.1 avg lb
Enumerated 28,762,185 programs | 172 jobs | 47 CPUs | 172 tasks | 503.5m CPU rem | 10.5m rem | 18.1 avg lb
Enumerated 29,152,676 programs | 172 jobs | 47 CPUs | 172 tasks | 499.4m CPU rem | 10.4m rem | 18.2 avg lb
Enumerated 29,296,274 programs | 172 jobs | 47 CPUs | 172 tasks | 495.1m CPU rem | 10.3m rem | 18.2 avg lb
Enumerated 29,366,101 programs | 172 jobs | 47 CPUs | 172 tasks | 490.7m CPU rem | 10.2m rem | 18.2 avg lb
Enumerated 29,731,304 programs | 172 jobs | 47 CPUs | 172 tasks | 485.5m CPU rem | 10.1m rem | 18.3 avg lb
Enumerated 30,030,465 programs | 170 jobs | 47 CPUs | 170 tasks | 481.4m CPU rem | 10.0m rem | 18.4 avg lb
Enumerated 30,049,277 programs | 170 jobs | 47 CPUs | 170 tasks | 477.3m CPU rem | 9.9m rem | 18.4 avg lb
Enumerated 30,189,626 programs | 169 jobs | 47 CPUs | 169 tasks | 471.3m CPU rem | 9.8m rem | 18.4 avg lb
Enumerated 30,394,114 programs | 169 jobs | 47 CPUs | 169 tasks | 465.5m CPU rem | 9.7m rem | 18.4 avg lb
Enumerated 30,600,231 programs | 169 jobs | 47 CPUs | 169 tasks | 461.0m CPU rem | 9.6m rem | 18.5 avg lb
Enumerated 30,819,089 programs | 168 jobs | 47 CPUs | 168 tasks | 453.0m CPU rem | 9.4m rem | 18.5 avg lb
Enumerated 31,184,401 programs | 168 jobs | 47 CPUs | 168 tasks | 448.2m CPU rem | 9.3m rem | 18.5 avg lb
Enumerated 31,381,160 programs | 166 jobs | 47 CPUs | 166 tasks | 442.0m CPU rem | 9.2m rem | 18.6 avg lb
Enumerated 31,486,467 programs | 165 jobs | 47 CPUs | 165 tasks | 436.1m CPU rem | 9.1m rem | 18.6 avg lb
Enumerated 31,734,842 programs | 164 jobs | 47 CPUs | 164 tasks | 431.1m CPU rem | 9.0m rem | 18.7 avg lb
Enumerated 32,004,082 programs | 164 jobs | 47 CPUs | 164 tasks | 426.2m CPU rem | 8.9m rem | 18.7 avg lb
Enumerated 32,436,547 programs | 163 jobs | 47 CPUs | 163 tasks | 420.4m CPU rem | 8.8m rem | 18.8 avg lb
Enumerated 32,772,605 programs | 161 jobs | 47 CPUs | 161 tasks | 416.0m CPU rem | 8.7m rem | 18.8 avg lb
Enumerated 32,987,389 programs | 161 jobs | 47 CPUs | 161 tasks | 410.3m CPU rem | 8.5m rem | 18.9 avg lb
Enumerated 33,242,982 programs | 160 jobs | 47 CPUs | 160 tasks | 405.9m CPU rem | 8.5m rem | 18.9 avg lb
Enumerated 33,477,690 programs | 158 jobs | 47 CPUs | 158 tasks | 398.0m CPU rem | 8.3m rem | 18.9 avg lb
Enumerated 33,687,223 programs | 157 jobs | 47 CPUs | 157 tasks | 391.9m CPU rem | 8.2m rem | 19.0 avg lb
Enumerated 34,058,711 programs | 155 jobs | 47 CPUs | 155 tasks | 387.2m CPU rem | 8.1m rem | 19.1 avg lb
Enumerated 34,412,188 programs | 155 jobs | 47 CPUs | 155 tasks | 380.4m CPU rem | 7.9m rem | 19.1 avg lb
Enumerated 34,867,519 programs | 153 jobs | 47 CPUs | 153 tasks | 375.9m CPU rem | 7.8m rem | 19.2 avg lb
Enumerated 35,093,295 programs | 152 jobs | 47 CPUs | 152 tasks | 371.8m CPU rem | 7.7m rem | 19.2 avg lb
Enumerated 35,355,660 programs | 149 jobs | 47 CPUs | 149 tasks | 366.8m CPU rem | 7.6m rem | 19.2 avg lb
Enumerated 35,766,741 programs | 146 jobs | 47 CPUs | 146 tasks | 358.8m CPU rem | 7.5m rem | 19.3 avg lb
Enumerated 35,812,360 programs | 146 jobs | 47 CPUs | 146 tasks | 352.4m CPU rem | 7.3m rem | 19.4 avg lb
Enumerated 36,244,291 programs | 144 jobs | 47 CPUs | 144 tasks | 346.6m CPU rem | 7.2m rem | 19.4 avg lb
Enumerated 36,529,510 programs | 144 jobs | 47 CPUs | 144 tasks | 342.1m CPU rem | 7.1m rem | 19.5 avg lb
Enumerated 36,756,022 programs | 142 jobs | 47 CPUs | 142 tasks | 337.2m CPU rem | 7.0m rem | 19.5 avg lb
Enumerated 36,907,804 programs | 141 jobs | 47 CPUs | 141 tasks | 330.8m CPU rem | 6.9m rem | 19.5 avg lb
Enumerated 37,209,517 programs | 141 jobs | 47 CPUs | 141 tasks | 324.4m CPU rem | 6.8m rem | 19.6 avg lb
Enumerated 37,527,141 programs | 140 jobs | 47 CPUs | 140 tasks | 320.0m CPU rem | 6.7m rem | 19.6 avg lb
Enumerated 38,097,860 programs | 137 jobs | 47 CPUs | 137 tasks | 315.1m CPU rem | 6.6m rem | 19.8 avg lb
Enumerated 38,246,743 programs | 136 jobs | 47 CPUs | 136 tasks | 310.3m CPU rem | 6.5m rem | 19.8 avg lb
Enumerated 38,429,225 programs | 135 jobs | 47 CPUs | 135 tasks | 305.9m CPU rem | 6.4m rem | 19.8 avg lb
Enumerated 38,670,997 programs | 134 jobs | 47 CPUs | 134 tasks | 293.8m CPU rem | 6.1m rem | 19.9 avg lb
Enumerated 38,840,538 programs | 133 jobs | 47 CPUs | 133 tasks | 286.0m CPU rem | 6.0m rem | 19.9 avg lb
Enumerated 39,023,742 programs | 132 jobs | 47 CPUs | 132 tasks | 280.1m CPU rem | 5.8m rem | 19.9 avg lb
Enumerated 39,285,570 programs | 131 jobs | 47 CPUs | 131 tasks | 275.3m CPU rem | 5.7m rem | 20.0 avg lb
Enumerated 39,869,324 programs | 128 jobs | 47 CPUs | 128 tasks | 271.2m CPU rem | 5.6m rem | 20.1 avg lb
Enumerated 40,329,422 programs | 126 jobs | 47 CPUs | 126 tasks | 262.5m CPU rem | 5.5m rem | 20.2 avg lb
Enumerated 40,853,653 programs | 124 jobs | 47 CPUs | 124 tasks | 256.6m CPU rem | 5.3m rem | 20.3 avg lb
Enumerated 41,145,603 programs | 122 jobs | 47 CPUs | 122 tasks | 250.8m CPU rem | 5.2m rem | 20.4 avg lb
Enumerated 41,796,255 programs | 119 jobs | 47 CPUs | 119 tasks | 245.7m CPU rem | 5.1m rem | 20.5 avg lb
Enumerated 41,929,760 programs | 119 jobs | 47 CPUs | 119 tasks | 239.1m CPU rem | 5.0m rem | 20.6 avg lb
Enumerated 42,117,858 programs | 119 jobs | 47 CPUs | 119 tasks | 233.5m CPU rem | 4.9m rem | 20.6 avg lb
Enumerated 42,295,936 programs | 117 jobs | 47 CPUs | 117 tasks | 229.2m CPU rem | 4.8m rem | 20.6 avg lb
Enumerated 42,317,189 programs | 116 jobs | 47 CPUs | 116 tasks | 225.1m CPU rem | 4.7m rem | 20.7 avg lb
Enumerated 42,563,698 programs | 113 jobs | 47 CPUs | 113 tasks | 220.2m CPU rem | 4.6m rem | 20.7 avg lb
Enumerated 42,766,907 programs | 113 jobs | 47 CPUs | 113 tasks | 213.8m CPU rem | 4.5m rem | 20.7 avg lb
Enumerated 42,913,707 programs | 112 jobs | 47 CPUs | 112 tasks | 208.7m CPU rem | 4.3m rem | 20.8 avg lb
Enumerated 43,120,480 programs | 110 jobs | 47 CPUs | 110 tasks | 200.5m CPU rem | 4.2m rem | 20.8 avg lb
Enumerated 43,505,652 programs | 106 jobs | 47 CPUs | 106 tasks | 194.5m CPU rem | 4.1m rem | 20.9 avg lb
Enumerated 44,013,696 programs | 103 jobs | 47 CPUs | 103 tasks | 189.5m CPU rem | 3.9m rem | 21.0 avg lb
Enumerated 44,412,436 programs | 100 jobs | 47 CPUs | 100 tasks | 185.0m CPU rem | 3.9m rem | 21.1 avg lb
Enumerated 44,551,481 programs | 96 jobs | 47 CPUs | 96 tasks | 180.9m CPU rem | 3.8m rem | 21.1 avg lb
Enumerated 44,707,839 programs | 94 jobs | 47 CPUs | 94 tasks | 174.8m CPU rem | 3.6m rem | 21.2 avg lb
Enumerated 44,963,313 programs | 92 jobs | 47 CPUs | 92 tasks | 169.6m CPU rem | 3.5m rem | 21.3 avg lb
Enumerated 45,384,727 programs | 89 jobs | 47 CPUs | 89 tasks | 165.0m CPU rem | 3.4m rem | 21.4 avg lb
Enumerated 45,785,734 programs | 85 jobs | 47 CPUs | 85 tasks | 157.2m CPU rem | 3.3m rem | 21.5 avg lb
Enumerated 46,324,842 programs | 81 jobs | 47 CPUs | 81 tasks | 153.1m CPU rem | 3.2m rem | 21.7 avg lb
Enumerated 46,680,651 programs | 79 jobs | 47 CPUs | 79 tasks | 148.0m CPU rem | 3.1m rem | 21.7 avg lb
Enumerated 46,711,042 programs | 78 jobs | 47 CPUs | 78 tasks | 140.6m CPU rem | 2.9m rem | 21.8 avg lb
Enumerated 47,196,923 programs | 74 jobs | 47 CPUs | 74 tasks | 136.1m CPU rem | 2.8m rem | 22.0 avg lb
Enumerated 47,459,505 programs | 72 jobs | 47 CPUs | 72 tasks | 131.9m CPU rem | 2.7m rem | 22.1 avg lb
Enumerated 47,796,546 programs | 69 jobs | 47 CPUs | 69 tasks | 123.4m CPU rem | 2.6m rem | 22.3 avg lb
Enumerated 48,168,332 programs | 65 jobs | 47 CPUs | 65 tasks | 117.8m CPU rem | 2.5m rem | 22.5 avg lb
Enumerated 48,278,094 programs | 63 jobs | 47 CPUs | 63 tasks | 112.4m CPU rem | 2.3m rem | 22.6 avg lb
Enumerated 48,691,468 programs | 59 jobs | 47 CPUs | 59 tasks | 106.2m CPU rem | 2.2m rem | 22.8 avg lb
Enumerated 48,810,294 programs | 59 jobs | 47 CPUs | 59 tasks | 98.3m CPU rem | 2.0m rem | 22.9 avg lb
Enumerated 49,025,719 programs | 57 jobs | 47 CPUs | 57 tasks | 94.1m CPU rem | 2.0m rem | 23.0 avg lb
Enumerated 49,690,046 programs | 51 jobs | 47 CPUs | 51 tasks | 89.9m CPU rem | 1.9m rem | 23.5 avg lb
Enumerated 49,871,888 programs | 49 jobs | 47 CPUs | 49 tasks | 85.8m CPU rem | 1.8m rem | 24.0 avg lb
Enumerated 50,077,699 programs | 46 jobs | 45 CPUs | 46 tasks | 81.2m CPU rem | 1.7m rem | 24.5 avg lb
Enumerated 50,418,717 programs | 45 jobs | 47 CPUs | 45 tasks | 77.2m CPU rem | 1.7m rem | 24.9 avg lb
Enumerated 50,668,580 programs | 44 jobs | 47 CPUs | 44 tasks | 72.7m CPU rem | 1.6m rem | 25.1 avg lb
Enumerated 50,795,439 programs | 43 jobs | 47 CPUs | 43 tasks | 67.7m CPU rem | 1.5m rem | 25.3 avg lb
Enumerated 50,902,101 programs | 42 jobs | 45 CPUs | 42 tasks | 64.1m CPU rem | 1.5m rem | 25.4 avg lb
Enumerated 51,362,458 programs | 41 jobs | 47 CPUs | 41 tasks | 60.6m CPU rem | 1.4m rem | 25.7 avg lb
Enumerated 51,637,273 programs | 40 jobs | 47 CPUs | 40 tasks | 54.7m CPU rem | 1.3m rem | 25.9 avg lb
Enumerated 52,030,410 programs | 38 jobs | 47 CPUs | 38 tasks | 51.2m CPU rem | 1.3m rem | 26.2 avg lb
Enumerated 52,220,171 programs | 38 jobs | 47 CPUs | 38 tasks | 47.2m CPU rem | 1.2m rem | 26.4 avg lb
Enumerated 52,310,647 programs | 37 jobs | 47 CPUs | 37 tasks | 43.4m CPU rem | 1.1m rem | 26.5 avg lb
Enumerated 52,654,119 programs | 35 jobs | 47 CPUs | 35 tasks | 39.1m CPU rem | 1.1m rem | 26.7 avg lb
Enumerated 52,764,381 programs | 35 jobs | 46 CPUs | 35 tasks | 35.0m CPU rem | 1.0m rem | 26.7 avg lb
Enumerated 53,241,807 programs | 32 jobs | 45 CPUs | 32 tasks | 31.0m CPU rem | 0.9m rem | 27.1 avg lb
Enumerated 53,702,004 programs | 31 jobs | 47 CPUs | 31 tasks | 27.7m CPU rem | 0.9m rem | 27.5 avg lb
Enumerated 54,301,956 programs | 27 jobs | 47 CPUs | 27 tasks | 24.9m CPU rem | 0.9m rem | 28.1 avg lb
Enumerated 54,786,179 programs | 24 jobs | 43 CPUs | 24 tasks | 22.1m CPU rem | 0.9m rem | 28.7 avg lb
Enumerated 55,089,085 programs | 22 jobs | 39 CPUs | 22 tasks | 19.9m CPU rem | 0.9m rem | 29.1 avg lb
Enumerated 55,404,929 programs | 20 jobs | 43 CPUs | 20 tasks | 16.6m CPU rem | 0.8m rem | 29.7 avg lb
Enumerated 55,906,707 programs | 18 jobs | 45 CPUs | 18 tasks | 13.8m CPU rem | 0.7m rem | 30.4 avg lb
Enumerated 56,548,266 programs | 14 jobs | 42 CPUs | 14 tasks | 10.7m CPU rem | 0.7m rem | 32.1 avg lb
Enumerated 56,575,435 programs | 13 jobs | 39 CPUs | 13 tasks | 9.2m CPU rem | 0.7m rem | 32.6 avg lb
Enumerated 57,045,540 programs | 11 jobs | 46 CPUs | 11 tasks | 7.8m CPU rem | 0.7m rem | 34.2 avg lb
Enumerated 57,241,278 programs | 10 jobs | 36 CPUs | 10 tasks | 6.9m CPU rem | 0.6m rem | 34.8 avg lb
Enumerated 57,377,637 programs | 9 jobs | 47 CPUs | 9 tasks | 5.8m CPU rem | 0.6m rem | 35.8 avg lb
Enumerated 57,723,534 programs | 8 jobs | 46 CPUs | 8 tasks | 4.4m CPU rem | 0.5m rem | 37.2 avg lb
Enumerated 58,070,143 programs | 8 jobs | 45 CPUs | 8 tasks | 3.2m CPU rem | 0.4m rem | 37.5 avg lb
Enumerated 58,307,421 programs | 6 jobs | 42 CPUs | 6 tasks | 2.3m CPU rem | 0.3m rem | 41.3 avg lb
Enumerated 58,523,532 programs | 5 jobs | 36 CPUs | 5 tasks | 1.3m CPU rem | 0.2m rem | 43.6 avg lb
Enumerated 58,640,509 programs | 4 jobs | 37 CPUs | 4 tasks | 0.8m CPU rem | 0.2m rem | 47.5 avg lb
Enumerated 58,758,974 programs | 3 jobs | 25 CPUs | 3 tasks | 0.1m CPU rem | 0.0m rem | 52.0 avg lb
We enumerated this many programs, for each task:
	 [330149, 26306, 228006, 132261, 186331, 206146, 214711, 134515, 122660, 186730, 197552, 186917, 116368, 118402, 215008, 231236, 133807, 124219, 122752, 198018, 115030, 201608, 134331, 116675, 127208, 243262, 210575, 203147, 97223, 131626, 4472, 126637, 188975, 215105, 198423, 4551, 211484, 169066, 165991, 192492, 10888, 207411, 213101, 183772, 22255, 130985, 203963, 117806, 89334, 129957, 126072, 205602, 247645, 149271, 100448, 578589, 13357, 116712, 190609, 204913, 160568, 201766, 128239, 129443, 119567, 119573, 126285, 202468, 175125, 175447, 170450, 232118, 200733, 113229, 197685, 121038, 121249, 191004, 4932, 119912, 188856, 116952, 215425, 115638, 127717, 113667, 2914, 112320, 205020, 121873, 119451, 111351, 185067, 178782, 33469, 120960, 120679, 122782, 207698, 144977, 119059, 211032, 595420, 213302, 123085, 120374, 113967, 206385, 121935, 109560, 202825, 115815, 26019, 126407, 79109, 50148, 117773, 115413, 204949, 125197, 187700, 126648, 207726, 131867, 182583, 128421, 99438, 192181, 12877, 166768, 129940, 105063, 120967, 99768, 136905, 214275, 106410, 114870, 194319, 1213, 117707, 216705, 193244, 235249, 106358, 179914, 137283, 118639, 172307, 5070, 128721, 250196, 218507, 193417, 4995, 186568, 183600, 121077, 100997, 186781, 116377, 166510, 189064, 2517, 189758, 121603, 281740, 189892, 190382, 101366, 113558, 2288, 121043, 87415, 155639, 130653, 4315, 4052, 2834, 244115, 199366, 191829, 120323, 86950, 98688, 277601, 101929, 127750, 177527, 201147, 194872, 122582, 127572, 222989, 115091, 124198, 115880, 101078, 119167, 223934, 102363, 121591, 121614, 114716, 84342, 121921, 153945, 168307, 108672, 7002, 290209, 183067, 107834, 211380, 106908, 95305, 211504, 27242, 210457, 116685, 115629, 180007, 227340, 114047, 206294, 197474, 215810, 185453, 249241, 128385, 126726, 115955, 95881, 127335, 203817, 212549, 115882, 99580, 129984, 198615, 5004, 119176, 87855, 123220, 127658, 118465, 82172, 115962, 4767, 190581, 26435, 131641, 178649, 188588, 170697, 115684, 253157, 126039, 118236, 196444, 129661, 233149, 126550, 92206, 181726, 264952, 187537, 115053, 115841, 189788, 204249, 130751, 217775, 124071, 122603, 126178, 186443, 122420, 125656, 115770, 111830, 205281, 199029, 117399, 106351, 118498, 189377, 124231, 113647, 89127, 31776, 129334, 123198, 195551, 152269, 304506, 104160, 128261, 194091, 108999, 118137, 197449, 123004, 242123, 166741, 109089, 122109, 120274, 130575, 101133, 2400, 177550, 118046, 200933, 238343, 193339, 189496, 230850, 124770, 129452, 294640, 214968, 198301, 123428, 104837, 71972, 263384, 108306, 119281, 206671, 205428, 129720, 211320, 298772, 121759, 187695, 122042, 120528, 69665, 120323, 205601, 194948, 204929, 128200, 200086, 3947, 341882, 106279, 112155, 116625, 160708, 113082, 130626, 186272, 146320, 73729, 97086, 119018, 107777, 186770, 203282, 243435, 193342, 123397, 115357, 113283, 124045, 180899, 204891, 124180, 125139, 175481, 208270, 251906, 133083, 123798, 5338, 123984, 118514, 2164, 206125, 107438, 120980, 109108, 28802, 240167, 107541, 114778, 126017, 187648, 71160, 196659, 184833, 77164, 274664, 115242, 202401, 163768, 125648, 151971]
Recognizer 0 solved 54/400 tasks; total tasks solved is now 54.
Best recognizer: 0.
Currently using this much memory: 1169588224
Recognition model enumeration results for the best recognizer.
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -7.330343 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (ic_compress2 (ic_erasecol (topcol $0) $0))) ; log prior = -13.380996 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (ic_compress2 $0)) ; log prior = -4.714093 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (pickmax_size (split8 $0))) ; log prior = -7.132946 ; log likelihood = 0.000000
HIT 2013d3e2 w/ (lambda (left_half (top_half (ic_compress2 $0)))) ; log prior = -14.295451 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -12.475417 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -13.879735 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) ; log prior = -14.240231 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (ic_compress2 (repeatX $0))) ; log prior = -10.645238 ; log likelihood = 0.000000
HIT 2dee498d w/ (lambda (ic_compress2 (ic_embed $0 (swapxy $0)))) ; log prior = -14.813060 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (pickcommon (split8 $0))) ; log prior = -7.543324 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -14.466786 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -6.874598 ; log likelihood = 0.000000
HIT 40853293 w/ (lambda (overlay $0 (ic_connectY $0))) ; log prior = -10.813091 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (overlay $0 (ic_makeborder $0))) ; log prior = -11.994936 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -10.141113 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (mirrorY (top_half $0))) ; log prior = -9.685498 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (flipx $0))) ; log prior = -13.855623 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (colourHull (topcol $0) $0)) ; log prior = -9.167500 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -5.352745 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -14.544717 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (flipy $0)) ; log prior = -5.067377 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (mirrorX (mirrorY $0))) ; log prior = -15.956635 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (flipx $0)) ; log prior = -4.857381 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.512778 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -7.248239 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (pickcommon (ic_splitall (mirrorX $0)))) ; log prior = -11.493439 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (flipy (ic_compress2 $0))) ; log prior = -8.712192 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (ic_compress3 $0)) ; log prior = -5.493563 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -6.839950 ; log likelihood = 0.000000
HIT 7b6016b9 w/ (lambda (set_bg c3 (fillobj c2 $0))) ; log prior = -13.316135 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -6.508326 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (ic_compress2 (ic_compress3 $0))) ; log prior = -8.807691 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (set_bg c5 (ic_filtercol (topcol $0) $0))) ; log prior = -23.664688 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -5.043020 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -5.567789 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (fillobj c1 $0)) ; log prior = -7.361377 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (ic_composegrowing (split8 (ic_erasecol c1 $0)))) ; log prior = -13.530579 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) ; log prior = -13.719015 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (ic_connectX (get_bg (rarestcol $0) $0))) ; log prior = -13.945405 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (set_bg c2 (ic_erasecol c6 $0))) ; log prior = -13.384026 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (colourPixel (rarestcol (ic_connectX $0)))) ; log prior = -11.514812 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) ; log prior = -13.836830 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (set_bg c5 (ic_erasecol c7 $0))) ; log prior = -14.025637 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -6.400940 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (fillobj c1 (ic_makeborder $0))) ; log prior = -12.844586 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (ic_filtercol c3 (fillobj c3 $0))) ; log prior = -13.522448 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (topcol $0))) ; log prior = -11.209761 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (pickcommon (split8 $0))) ; log prior = -7.753869 ; log likelihood = 0.000000
HIT ded97339 w/ (lambda (overlay $0 (ic_connectY $0))) ; log prior = -14.722814 ; log likelihood = 0.000000
HIT e3497940 w/ (lambda (left_half (overlay $0 (flipy $0)))) ; log prior = -18.492759 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (ic_compress3 $0)) ; log prior = -5.222827 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -6.376898 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (overlay $0 (flipx $0))) ; log prior = -10.846367 ; log likelihood = 0.000000
Hits 54/400 tasks
Average description length of a program solving a task: 10.595326 nats
Recognition model average:  24 sec.	median: 2 	max: 233 	standard deviation 49
Cumulative results for the full ensemble of 1 recognizers: 
Frontiers discovered bottom up: 54
Total frontiers: 54
Average search time:  24 sec.	median: 2 	max: 233 	standard deviation 49
54 / 400 total hit tasks
              bottom miss  bottom hit  
top miss          346          25      
top hit            0           29      
Currently using this much memory: 1169588224
Showing the top 5 programs in each frontier being sent to the compressor:
00d62c1b
-0.04	(lambda (fillobj c4 $0))
-3.99	(lambda (fillobj c4 (ic_toorigin $0)))
-3.99	(lambda (ic_toorigin (fillobj c4 $0)))
-6.39	(lambda (fillobj c4 (ic_erasecol c6 $0)))
-6.39	(lambda (ic_erasecol c6 (fillobj c4 $0)))

0b148d64
-0.69	(lambda (ic_compress2 (ic_erasecol (topcol $0) $0)))
-0.69	(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))

1cf80156
-0.75	(lambda (ic_compress2 $0))
-2.83	(lambda (ic_composegrowing (ic_splitall $0)))
-2.83	(lambda (ic_composegrowing (split8 $0)))
-2.83	(lambda (ic_pickunique (ic_splitall $0)))
-2.83	(lambda (ic_pickunique (split8 $0)))

1f85a75f
-2.30	(lambda (ic_pickunique (ic_splitall $0)))
-2.30	(lambda (ic_pickunique (split8 $0)))
-2.30	(lambda (pickmax_cols (ic_splitall $0)))
-2.30	(lambda (pickmax_interior_count (ic_splitall $0)))
-2.30	(lambda (pickmax_interior_count (split8 $0)))

2013d3e2
-0.69	(lambda (left_half (top_half (ic_compress2 $0))))
-0.69	(lambda (top_half (left_half (ic_compress2 $0))))

22168020
-1.50	(lambda (overlay $0 (ic_connectX $0)))
-1.50	(lambda (overlay $0 (ic_connectY $0)))
-1.50	(lambda (overlay (ic_connectX $0) $0))
-1.50	(lambda (overlay (ic_connectY $0) $0))
-3.58	(lambda (ic_composegrowing (mklist $0 (ic_connectX $0))))

22eb0ac0
-1.50	(lambda (overlay $0 (ic_connectX $0)))
-1.50	(lambda (overlay $0 (ic_connectY $0)))
-1.50	(lambda (overlay (ic_connectX $0) $0))
-1.50	(lambda (overlay (ic_connectY $0) $0))
-3.58	(lambda (ic_composegrowing (mklist $0 (ic_connectX $0))))

23b5c85d
0.00	(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))

28bf18c6
-1.10	(lambda (ic_compress2 (repeatX $0)))
-1.10	(lambda (repeatX (ic_compress2 $0)))
-3.18	(lambda (repeatX (ic_composegrowing (ic_splitall $0))))
-3.18	(lambda (repeatX (ic_composegrowing (split8 $0))))
-3.18	(lambda (repeatX (ic_pickunique (split8 $0))))

2dee498d
-1.10	(lambda (ic_compress2 (ic_embed $0 (rot270 $0))))
-1.10	(lambda (ic_compress2 (ic_embed $0 (rot90 $0))))
-1.10	(lambda (ic_compress2 (ic_embed $0 (swapxy $0))))

39a8645d
-0.15	(lambda (pickcommon (split8 $0)))
-4.10	(lambda (ic_compress2 (pickcommon (split8 $0))))
-4.10	(lambda (ic_toorigin (pickcommon (split8 $0))))
-4.10	(lambda (pickcommon (split8 (ic_compress2 $0))))
-4.10	(lambda (pickcommon (split8 (ic_compress3 $0))))

3af2c5a8
-0.77	(lambda (mirrorX (mirrorY $0)))
-0.77	(lambda (mirrorY (mirrorX $0)))
-4.72	(lambda (flipx (mirrorX (mirrorY $0))))
-4.72	(lambda (flipx (mirrorY (mirrorX $0))))
-4.72	(lambda (ic_toorigin (mirrorX (mirrorY $0))))

3c9b0459
-0.16	(lambda (rot180 $0))
-4.11	(lambda (flipx (flipy $0)))
-4.11	(lambda (flipy (flipx $0)))
-4.11	(lambda (ic_compress2 (rot180 $0)))
-4.11	(lambda (ic_compress3 (rot180 $0)))

40853293
-0.83	(lambda (overlay $0 (ic_connectY $0)))
-0.83	(lambda (overlay (ic_connectY $0) $0))
-2.91	(lambda (ic_composegrowing (mklist $0 (ic_connectY $0))))
-2.91	(lambda (ic_composegrowing (mklist (ic_connectY $0) $0)))
-4.78	(lambda (ic_toorigin (overlay $0 (ic_connectY $0))))

4258a5f9
-0.40	(lambda (fillobj c5 (ic_makeborder $0)))
-1.96	(lambda (overlay $0 (ic_makeborder $0)))
-1.96	(lambda (overlay (ic_makeborder $0) $0))
-4.04	(lambda (ic_composegrowing (mklist $0 (ic_makeborder $0))))
-4.04	(lambda (ic_composegrowing (mklist (ic_makeborder $0) $0)))

445eab21
-0.14	(lambda (countToXY (countColours $0) (topcol $0)))
-3.40	(lambda (colourHull (topcol $0) (ic_center $0)))
-4.09	(lambda (countToXY (countColours $0) (topcol (ic_compress2 $0))))
-4.09	(lambda (countToXY (countColours $0) (topcol (swapxy $0))))
-4.09	(lambda (countToXY (countColours (ic_compress2 $0)) (topcol $0)))

496994bd
-0.12	(lambda (mirrorY (top_half $0)))
-4.07	(lambda (flipx (mirrorY (top_half $0))))
-4.07	(lambda (overlay $0 (flipx $0)))
-4.07	(lambda (overlay $0 (rot180 $0)))
-4.07	(lambda (overlay (flipx $0) $0))

4c4377d9
-0.16	(lambda (mirrorY (flipx $0)))
-4.11	(lambda (flipx (mirrorY (flipx $0))))
-4.11	(lambda (flipy (mirrorY (rot180 $0))))
-4.11	(lambda (ic_toorigin (mirrorY (flipx $0))))
-4.11	(lambda (mirrorY (flipx (ic_toorigin $0))))

5582e5ca
-0.14	(lambda (colourHull (topcol $0) $0))
-4.10	(lambda (colourHull (topcol $0) (flipx $0)))
-4.10	(lambda (colourHull (topcol $0) (ic_toorigin $0)))
-4.10	(lambda (colourHull (topcol $0) (rot90 $0)))
-4.10	(lambda (colourHull (topcol (flipx $0)) $0))

6150a2bd
-0.15	(lambda (rot180 $0))
-4.10	(lambda (flipx (flipy $0)))
-4.10	(lambda (flipy (flipx $0)))
-4.10	(lambda (ic_compress3 (rot180 $0)))
-4.10	(lambda (ic_toorigin (rot180 $0)))

62c24649
-0.77	(lambda (mirrorX (mirrorY $0)))
-0.77	(lambda (mirrorY (mirrorX $0)))
-4.72	(lambda (flipx (mirrorX (mirrorY $0))))
-4.72	(lambda (flipx (mirrorY (mirrorX $0))))
-4.72	(lambda (ic_toorigin (mirrorX (mirrorY $0))))

67a3c6ac
-0.16	(lambda (flipy $0))
-4.11	(lambda (flipx (rot180 $0)))
-4.11	(lambda (flipy (ic_compress2 $0)))
-4.11	(lambda (flipy (ic_compress3 $0)))
-4.11	(lambda (flipy (ic_toorigin $0)))

67e8384a
-0.77	(lambda (mirrorX (mirrorY $0)))
-0.77	(lambda (mirrorY (mirrorX $0)))
-4.72	(lambda (flipx (mirrorX (mirrorY $0))))
-4.72	(lambda (flipx (mirrorY (mirrorX $0))))
-4.72	(lambda (ic_toorigin (mirrorX (mirrorY $0))))

68b16354
-0.16	(lambda (flipx $0))
-4.11	(lambda (bottom_half (mirrorY $0)))
-4.11	(lambda (flipx (ic_compress2 $0)))
-4.11	(lambda (flipx (ic_compress3 $0)))
-4.11	(lambda (flipx (ic_toorigin $0)))

6d0aefbc
-0.10	(lambda (mirrorX $0))
-4.05	(lambda (flipy (mirrorX $0)))
-4.05	(lambda (ic_compress2 (mirrorX $0)))
-4.05	(lambda (ic_toorigin (mirrorX $0)))
-4.05	(lambda (mirrorX (ic_compress2 $0)))

6fa7a44f
-0.10	(lambda (mirrorY $0))
-4.05	(lambda (flipx (mirrorY $0)))
-4.05	(lambda (ic_compress2 (mirrorY $0)))
-4.05	(lambda (ic_toorigin (mirrorY $0)))
-4.05	(lambda (mirrorY (ic_compress2 $0)))

72ca375d
-0.73	(lambda (pickcommon (ic_splitall (mirrorX $0))))
-0.73	(lambda (pickcommon (split8 (mirrorX $0))))
-4.68	(lambda (flipy (pickcommon (ic_splitall (mirrorX $0)))))
-4.68	(lambda (flipy (pickcommon (split8 (mirrorX $0)))))
-4.68	(lambda (ic_toorigin (pickcommon (ic_splitall (mirrorX $0)))))

7468f01a
-1.10	(lambda (flipy (ic_compress2 $0)))
-1.10	(lambda (ic_compress2 (flipy $0)))
-3.18	(lambda (flipy (ic_composegrowing (split8 $0))))
-3.18	(lambda (ic_composegrowing (ic_splitall (flipy $0))))
-3.18	(lambda (ic_composegrowing (split8 (flipy $0))))

746b3537
-0.10	(lambda (ic_compress3 $0))
-4.05	(lambda (ic_compress2 (ic_compress3 $0)))
-4.05	(lambda (ic_compress3 (ic_compress2 $0)))
-4.05	(lambda (ic_compress3 (ic_compress3 $0)))
-4.05	(lambda (ic_compress3 (ic_toorigin $0)))

74dd1130
-0.16	(lambda (swapxy $0))
-4.11	(lambda (flipx (rot90 $0)))
-4.11	(lambda (flipy (rot270 $0)))
-4.11	(lambda (ic_compress2 (swapxy $0)))
-4.11	(lambda (ic_compress3 (swapxy $0)))

7b6016b9
0.00	(lambda (set_bg c3 (fillobj c2 $0)))

8be77c9e
-0.07	(lambda (mirrorY $0))
-4.02	(lambda (flipx (mirrorY $0)))
-4.02	(lambda (ic_toorigin (mirrorY $0)))
-4.02	(lambda (mirrorY (ic_toorigin $0)))
-6.10	(lambda (mirrorY (ic_composegrowing (ic_splitcols $0))))

90c28cc7
-0.95	(lambda (ic_compress2 (ic_compress3 $0)))
-0.95	(lambda (ic_compress3 (ic_compress2 $0)))
-3.03	(lambda (ic_composegrowing (ic_splitall (ic_compress3 $0))))
-3.03	(lambda (ic_composegrowing (split8 (ic_compress3 $0))))
-3.03	(lambda (ic_compress3 (ic_composegrowing (ic_splitall $0))))

9565186b
0.00	(lambda (set_bg c5 (ic_filtercol (topcol $0) $0)))

9dfd6313
-0.16	(lambda (swapxy $0))
-4.11	(lambda (flipx (rot90 $0)))
-4.11	(lambda (flipy (rot270 $0)))
-4.11	(lambda (ic_compress2 (swapxy $0)))
-4.11	(lambda (ic_compress3 (swapxy $0)))

a416b8f3
-0.08	(lambda (repeatX $0))
-4.04	(lambda (ic_compress3 (repeatX $0)))
-4.04	(lambda (ic_toorigin (repeatX $0)))
-4.04	(lambda (repeatX (ic_compress3 $0)))
-4.04	(lambda (repeatX (ic_toorigin $0)))

a5313dff
-0.04	(lambda (fillobj c1 $0))
-3.99	(lambda (fillobj c1 (ic_toorigin $0)))
-3.99	(lambda (ic_toorigin (fillobj c1 $0)))
-6.39	(lambda (fillobj c1 (ic_erasecol c6 $0)))
-6.39	(lambda (ic_erasecol c6 (fillobj c1 $0)))

a740d043
-0.69	(lambda (ic_composegrowing (ic_splitall (ic_erasecol c1 $0))))
-0.69	(lambda (ic_composegrowing (split8 (ic_erasecol c1 $0))))

a87f7484
0.00	(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))

aabf363d
-1.10	(lambda (ic_connectX (get_bg (rarestcol $0) $0)))
-1.10	(lambda (ic_connectY (get_bg (rarestcol $0) $0)))
-1.10	(lambda (ic_interior (get_bg (rarestcol $0) $0)))

b1948b0a
-0.70	(lambda (set_bg c2 (ic_erasecol c6 $0)))
-0.70	(lambda (set_bg c2 (ic_filtercol c7 $0)))
-4.65	(lambda (set_bg c2 (ic_erasecol (rarestcol $0) $0)))

b9b7f026
-1.59	(lambda (colourPixel (rarestcol (ic_connectX $0))))
-1.59	(lambda (colourPixel (rarestcol (ic_connectY $0))))
-1.59	(lambda (colourPixel (topcol (ic_connectX $0))))
-1.59	(lambda (colourPixel (topcol (ic_connectY $0))))
-3.15	(lambda (ic_compress2 (ic_compress3 (ic_connectX $0))))

be94b721
0.00	(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))

c8f0f002
0.00	(lambda (set_bg c5 (ic_erasecol c7 $0)))

c9e6f938
-0.07	(lambda (mirrorX $0))
-4.02	(lambda (flipy (mirrorX $0)))
-4.02	(lambda (ic_toorigin (mirrorX $0)))
-4.02	(lambda (mirrorX (ic_toorigin $0)))
-6.10	(lambda (ic_composegrowing (ic_splitcolumns (mirrorX $0))))

ce22a75a
-0.06	(lambda (fillobj c1 (ic_makeborder $0)))
-4.01	(lambda (fillobj c1 (ic_makeborder (ic_toorigin $0))))
-4.01	(lambda (fillobj c1 (ic_toorigin (ic_makeborder $0))))
-4.01	(lambda (ic_toorigin (fillobj c1 (ic_makeborder $0))))
-5.77	(lambda (ic_composegrowing (lcons (ic_makeborder $0) (ic_splitcols $0))))

d5d6de2d
-1.13	(lambda (ic_erasecol c2 (fillobj c3 $0)))
-1.13	(lambda (ic_filtercol c3 (fillobj c3 $0)))
-2.68	(lambda (ic_connectX (get_bg c3 (ic_connectX $0))))
-2.68	(lambda (ic_connectX (get_bg c3 (ic_interior $0))))
-2.68	(lambda (ic_connectY (get_bg c3 (ic_connectX $0))))

d631b094
-0.77	(lambda (countToY (countPixels $0) (rarestcol $0)))
-0.77	(lambda (countToY (countPixels $0) (topcol $0)))
-4.72	(lambda (countToY (countPixels $0) (topcol (flipx $0))))
-4.72	(lambda (countToY (countPixels $0) (topcol (ic_compress2 $0))))
-4.72	(lambda (countToY (countPixels $0) (topcol (ic_toorigin $0))))

d9fac9be
-0.16	(lambda (pickcommon (split8 $0)))
-4.11	(lambda (pickcommon (split8 (flipy $0))))
-4.11	(lambda (pickcommon (split8 (ic_compress2 $0))))
-4.11	(lambda (pickcommon (split8 (ic_compress3 $0))))
-4.11	(lambda (pickcommon (split8 (ic_toorigin $0))))

ded97339
-0.83	(lambda (overlay $0 (ic_connectY $0)))
-0.83	(lambda (overlay (ic_connectY $0) $0))
-2.90	(lambda (ic_composegrowing (mklist $0 (ic_connectY $0))))
-2.90	(lambda (ic_composegrowing (mklist (ic_connectY $0) $0)))
-4.98	(lambda (ic_composegrowing (lcons $0 (split8 (ic_connectY $0)))))

e3497940
-0.81	(lambda (left_half (overlay $0 (flipy $0))))
-0.81	(lambda (left_half (overlay (flipy $0) $0)))
-2.89	(lambda (left_half (ic_composegrowing (mklist $0 (flipy $0)))))
-2.89	(lambda (left_half (ic_composegrowing (mklist (flipy $0) $0))))

eb5a1d5d
-0.16	(lambda (ic_compress3 $0))
-4.11	(lambda (flipx (ic_compress3 $0)))
-4.11	(lambda (ic_compress3 (flipx $0)))
-4.11	(lambda (ic_compress3 (flipy $0)))
-4.11	(lambda (ic_compress3 (ic_compress2 $0)))

ed36ccf7
-0.12	(lambda (rot90 $0))
-4.07	(lambda (flipx (swapxy $0)))
-4.07	(lambda (ic_toorigin (rot90 $0)))
-4.07	(lambda (rot180 (rot270 $0)))
-4.07	(lambda (rot270 (rot180 $0)))

f25ffba3
-0.83	(lambda (overlay $0 (flipx $0)))
-0.83	(lambda (overlay (flipx $0) $0))
-2.91	(lambda (ic_composegrowing (mklist $0 (flipx $0))))
-2.91	(lambda (ic_composegrowing (mklist (flipx $0) $0)))
-4.99	(lambda (ic_composegrowing (lcons $0 (ic_splitall (flipx $0)))))

Compression message saved to: compressionMessages/2023-04-15T01:50:20.143021
Compression backend will run for most 99 iterations
Total number of candidates: 7100
Constructed version spaces and coalesced candidates in 3.25124s.
Trimmed down the beam, have only 297 best candidates
Rewrote topK in 7.41942s.
Initial score: -601.628024
Scored candidates in 8.18872s.
Improved score to -583.945280 (dScore=17.682744) w/ new primitive
	#(lambda (overlay $0 (ic_connectY $0))) : grid -> grid
rewrote all of the frontiers in 6.48108s.
Completed one step of memory consolidation in 26.2185s.
New primitive is used 4 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
  (lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
  (lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
  (lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
Total number of candidates: 7749
Constructed version spaces and coalesced candidates in 3.4593s.
Trimmed down the beam, have only 297 best candidates
Rewrote topK in 7.53987s.
Initial score: -584.227936
Scored candidates in 8.05008s.
Improved score to -570.932523 (dScore=13.295414) w/ new primitive
	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) : grid -> grid
rewrote all of the frontiers in 6.54189s.
Completed one step of memory consolidation in 26.5102s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
  (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
Total number of candidates: 7504
Constructed version spaces and coalesced candidates in 3.28674s.
Trimmed down the beam, have only 299 best candidates
Rewrote topK in 7.4659s.
Initial score: -571.458300
Scored candidates in 8.1446s.
Improved score to -558.011360 (dScore=13.446940) w/ new primitive
	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) : grid -> grid
rewrote all of the frontiers in 6.48539s.
Completed one step of memory consolidation in 26.2522s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
  (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
Total number of candidates: 7082
Constructed version spaces and coalesced candidates in 3.50557s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 7.33074s.
Initial score: -558.546630
Scored candidates in 8.28749s.
Improved score to -551.739180 (dScore=6.807450) w/ new primitive
	#(lambda (mirrorX (mirrorY $0))) : grid -> grid
rewrote all of the frontiers in 6.42248s.
Completed one step of memory consolidation in 26.4137s.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (mirrorX (mirrorY $0))) $0))
  (lambda (#(lambda (mirrorX (mirrorY $0))) $0))
  (lambda (#(lambda (mirrorX (mirrorY $0))) $0))
Total number of candidates: 6822
Constructed version spaces and coalesced candidates in 3.43892s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 7.3423s.
Initial score: -552.262737
Scored candidates in 8.41652s.
Improved score to -545.514852 (dScore=6.747885) w/ new primitive
	#(lambda (overlay $0 (flipx $0))) : grid -> grid
rewrote all of the frontiers in 6.48236s.
Completed one step of memory consolidation in 26.5602s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (overlay $0 (flipx $0))) $0))
  (lambda (#(lambda (overlay $0 (flipx $0))) $0))
Total number of candidates: 6688
Constructed version spaces and coalesced candidates in 3.34407s.
Trimmed down the beam, have only 300 best candidates
Rewrote topK in 7.40393s.
Initial score: -545.823387
Scored candidates in 8.62925s.
Improved score to -541.022312 (dScore=4.801075) w/ new primitive
	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) : grid -> colour -> colour -> grid
rewrote all of the frontiers in 6.36494s.
Completed one step of memory consolidation in 26.6107s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2))
  (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
Total number of candidates: 6404
Constructed version spaces and coalesced candidates in 3.48266s.
Trimmed down the beam, have only 298 best candidates
Rewrote topK in 7.13629s.
Initial score: -541.392145
Scored candidates in 8.71197s.
Improved score to -536.919533 (dScore=4.472612) w/ new primitive
	#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) : grid -> colour -> grid
rewrote all of the frontiers in 6.33741s.
Completed one step of memory consolidation in 26.5103s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5))
  (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1))
Total number of candidates: 6284
Constructed version spaces and coalesced candidates in 3.37485s.
Trimmed down the beam, have only 296 best candidates
Rewrote topK in 6.89103s.
Initial score: -537.044776
Scored candidates in 8.78837s.
Improved score to -534.009254 (dScore=3.035522) w/ new primitive
	#(lambda (pickcommon (split8 $0))) : grid -> grid
rewrote all of the frontiers in 6.30703s.
Completed one step of memory consolidation in 26.2078s.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (pickcommon (split8 $0))) $0))
  (lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
  (lambda (#(lambda (pickcommon (split8 $0))) $0))
Total number of candidates: 5833
Constructed version spaces and coalesced candidates in 3.27793s.
Trimmed down the beam, have only 296 best candidates
Rewrote topK in 6.53213s.
Initial score: -534.316613
Scored candidates in 8.85325s.
Improved score to -531.301772 (dScore=3.014841) w/ new primitive
	#(lambda (lambda (ic_connectX (get_bg $0 $1)))) : grid -> colour -> grid
rewrote all of the frontiers in 6.29543s.
Completed one step of memory consolidation in 25.7963s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0)))
  (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_connectX $0) c3))
Total number of candidates: 5804
Constructed version spaces and coalesced candidates in 3.08737s.
Trimmed down the beam, have only 295 best candidates
Rewrote topK in 6.66026s.
Initial score: -531.608003
Scored candidates in 9.15349s.
Improved score to -528.794122 (dScore=2.813881) w/ new primitive
	#(lambda (ic_compress2 (ic_compress3 $0))) : grid -> grid
rewrote all of the frontiers in 6.21846s.
Completed one step of memory consolidation in 25.9775s.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
  (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
  (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0)))
Total number of candidates: 5784
Constructed version spaces and coalesced candidates in 2.92502s.
Trimmed down the beam, have only 294 best candidates
Rewrote topK in 6.40223s.
Initial score: -529.072495
Scored candidates in 9.21329s.
Improved score to -526.426032 (dScore=2.646463) w/ new primitive
	#(lambda (ic_filtercol (topcol $0) $0)) : grid -> grid
rewrote all of the frontiers in 6.29852s.
Completed one step of memory consolidation in 25.648s.
New primitive is used 3 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
  (lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
  (lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
Total number of candidates: 5689
Constructed version spaces and coalesced candidates in 2.7904s.
Trimmed down the beam, have only 293 best candidates
Rewrote topK in 6.34198s.
Initial score: -534.484193
Scored candidates in 9.24855s.
Improved score to -528.752651 (dScore=5.731542) w/ new primitive
	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) : grid -> grid
rewrote all of the frontiers in 5.95462s.
Completed one step of memory consolidation in 25.1519s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
  (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
Total number of candidates: 5644
Constructed version spaces and coalesced candidates in 2.77125s.
Trimmed down the beam, have only 293 best candidates
Rewrote topK in 6.46329s.
Initial score: -529.065625
Scored candidates in 9.37533s.
Improved score to -526.493628 (dScore=2.571996) w/ new primitive
	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) : grid -> grid
rewrote all of the frontiers in 6.00187s.
Completed one step of memory consolidation in 25.4012s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
Total number of candidates: 5666
Constructed version spaces and coalesced candidates in 2.89181s.
Trimmed down the beam, have only 293 best candidates
Rewrote topK in 6.33896s.
Initial score: -526.808117
Scored candidates in 9.64413s.
Improved score to -525.022562 (dScore=1.785554) w/ new primitive
	#(lambda (ic_compress2 (flipy $0))) : grid -> grid
rewrote all of the frontiers in 5.96919s.
Completed one step of memory consolidation in 25.661s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_compress2 (flipy $0))) $0))
Total number of candidates: 5663
Constructed version spaces and coalesced candidates in 2.92001s.
Trimmed down the beam, have only 291 best candidates
Rewrote topK in 6.37957s.
Initial score: -525.347211
Scored candidates in 9.62849s.
Improved score to -524.653987 (dScore=0.693224) w/ new primitive
	#(lambda (colourHull (topcol $0))) : grid -> grid -> grid
rewrote all of the frontiers in 6.24198s.
Completed one step of memory consolidation in 25.9634s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (colourHull (topcol $0))) $0 $0))
Total number of candidates: 4996
Constructed version spaces and coalesced candidates in 2.99s.
Trimmed down the beam, have only 289 best candidates
Rewrote topK in 6.38441s.
Initial score: -524.978707
Scored candidates in 9.98223s.
Improved score to -524.437618 (dScore=0.541088) w/ new primitive
	#(lambda (overlay (ic_connectY $0) $0)) : grid -> grid
rewrote all of the frontiers in 5.91452s.
Completed one step of memory consolidation in 26.0707s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4572
Constructed version spaces and coalesced candidates in 2.92711s.
Trimmed down the beam, have only 288 best candidates
Rewrote topK in 6.22078s.
Initial score: -524.746791
Scored candidates in 9.88337s.
Improved score to -524.305373 (dScore=0.441418) w/ new primitive
	#(lambda (fillobj c1 (ic_toorigin $0))) : grid -> grid
rewrote all of the frontiers in 5.89845s.
Completed one step of memory consolidation in 25.7132s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0))
Total number of candidates: 4484
Constructed version spaces and coalesced candidates in 2.83795s.
Trimmed down the beam, have only 287 best candidates
Rewrote topK in 6.16809s.
Initial score: -524.624266
Scored candidates in 10.0523s.
Improved score to -524.279702 (dScore=0.344564) w/ new primitive
	#(lambda (ic_composegrowing (split8 $0))) : grid -> grid
rewrote all of the frontiers in 6.06569s.
Completed one step of memory consolidation in 25.9134s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0)))
Total number of candidates: 4400
Constructed version spaces and coalesced candidates in 2.78039s.
Trimmed down the beam, have only 286 best candidates
Rewrote topK in 6.02719s.
Initial score: -524.568860
Scored candidates in 10.0764s.
Improved score to -524.492217 (dScore=0.076643) w/ new primitive
	#(lambda (mirrorY (mirrorX $0))) : grid -> grid
rewrote all of the frontiers in 6.0799s.
Completed one step of memory consolidation in 25.7176s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4251
Constructed version spaces and coalesced candidates in 2.81902s.
Trimmed down the beam, have only 285 best candidates
Rewrote topK in 6.01295s.
Initial score: -524.811513
Scored candidates in 10.2493s.
Improved score to -524.747999 (dScore=0.063514) w/ new primitive
	#(lambda (flipx (mirrorY $0))) : grid -> grid
rewrote all of the frontiers in 6.05102s.
Completed one step of memory consolidation in 25.8721s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4229
Constructed version spaces and coalesced candidates in 2.78219s.
Trimmed down the beam, have only 284 best candidates
Rewrote topK in 5.92634s.
Initial score: -525.053639
Scored candidates in 10.6429s.
No improvement possible.
Completed one step of memory consolidation in 20.0271s.
completed ocaml compression in 9.01573m.
Finished consolidation.
Induced a grammar in 541.5 seconds
Grammar after iteration 1:
-0.570045	t0	$_
0.000000	grid -> pos	getpos
0.000000	grid -> size	getsize
-0.025026	grid -> count	countPixels
-0.027156	grid -> list(grid)	ic_splitall
-0.031966	grid -> count	countColours
-0.035900	grid -> list(grid)	split8
-0.055658	grid -> grid -> list(grid)	mklist
-0.058856	grid -> list(grid)	ic_splitrows
-0.058956	grid -> list(grid)	ic_splitcolumns
-0.059233	grid -> list(grid)	ic_splitcols
-0.059321	grid -> list(grid) -> list(grid)	lcons
-0.059345	(grid -> grid) -> list(grid) -> list(grid)	map
-0.314113	colour	c5
-0.342093	colour	c2
-0.342136	colour	c3
-0.344333	colour	c1
-0.352959	grid -> colour	rarestcol
-0.360958	grid -> colour	topcol
-0.374754	colour	c7
-0.375159	colour	c4
-0.376606	colour	c6
-0.407949	colour	c8
-0.407949	colour	c9
-1.568762	grid -> grid	ic_compress2
-1.595264	grid -> grid	swapxy
-1.599707	colour -> grid -> grid	fillobj
-1.599998	grid -> grid	flipx
-1.604101	grid -> grid	mirrorX
-1.604422	grid -> grid	rot180
-1.604614	grid -> grid	repeatX
-1.604822	colour -> grid -> grid	set_bg
-1.605214	grid -> grid	left_half
-1.612463	grid -> grid	flipy
-1.612562	grid -> grid	ic_compress3
-1.617851	grid -> grid	mirrorY
-1.623839	grid -> grid	rot90
-1.626776	grid -> grid	ic_connectX
-1.635339	colour -> grid -> grid	ic_erasecol
-1.636120	grid -> grid	top_half
-1.636926	grid -> grid -> grid	ic_embed
-1.636963	count -> colour -> grid	countToY
-1.639994	grid -> grid -> grid	overlay
-1.643903	count -> colour -> grid	countToXY
-1.654165	grid -> grid	ic_toorigin
-1.654353	grid -> grid	ic_interior
-1.654828	grid -> grid	rot270
-1.658838	list(grid) -> grid	ic_composegrowing
-1.659458	list(grid) -> grid	ic_pickunique
-1.660664	colour -> grid	colourPixel
-1.662086	list(grid) -> grid	pickmax_neg_interior_count
-1.662537	grid -> grid	ic_center
-1.662692	list(grid) -> grid	pickmax_cols
-1.663084	list(grid) -> grid	pickmax_neg_size
-1.663084	list(grid) -> grid	pickmax_interior_count
-1.664992	list(grid) -> grid	pickmax_size
-1.665003	grid -> grid	ic_connectY
-1.665421	grid -> grid	ic_makeborder
-1.667102	list(grid) -> grid	pickmax_neg_count
-1.667975	colour -> grid -> grid	ic_filtercol
-1.668383	colour -> grid -> grid	get_bg
-1.668676	list(grid) -> grid	pickmax_y_neg
-1.668727	list(grid) -> grid	pickmax_x_neg
-1.668727	list(grid) -> grid	pickmax_y_pos
-1.668754	list(grid) -> grid	pickmax_x_pos
-1.669152	grid -> grid	repeatY
-1.669371	grid -> grid	bottom_half
-1.669543	grid -> grid	right_half
-1.669678	list(grid) -> grid	pickcommon
-1.669718	colour -> grid -> grid	colourHull
-1.669753	colour -> grid -> grid	setcol
-1.669753	grid -> grid	ic_fill
-1.669753	count -> colour -> grid	countToX
-1.669753	list(grid) -> grid	pickmax_count
-1.669753	grid -> grid -> grid	logical_and
-1.600200	grid -> grid	#(lambda (ic_compress2 (ic_compress3 $0)))
-1.605214	grid -> grid	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-1.605216	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))
-1.605237	grid -> grid	#(lambda (overlay (ic_connectY $0) $0))
-1.605237	grid -> grid	#(lambda (overlay $0 (ic_connectY $0)))
-1.605607	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2)))))
-1.606108	grid -> grid	#(lambda (overlay $0 (flipx $0)))
-1.609205	grid -> colour -> grid	#(lambda (lambda (ic_connectX (get_bg $0 $1))))
-1.609293	grid -> colour -> grid	#(lambda (lambda (fillobj $0 (ic_makeborder $1))))
-1.619303	grid -> grid	#(lambda (ic_composegrowing (split8 $0)))
-1.620147	grid -> grid	#(lambda (pickcommon (split8 $0)))
-1.621288	grid -> grid	#(lambda (mirrorX (mirrorY $0)))
-1.621306	grid -> grid	#(lambda (mirrorY (mirrorX $0)))
-1.621615	grid -> grid	#(lambda (flipx (mirrorY $0)))
-1.621851	grid -> grid	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-1.623405	grid -> grid	#(lambda (ic_compress2 (flipy $0)))
-1.630071	grid -> grid -> grid	#(lambda (colourHull (topcol $0)))
-1.636014	grid -> grid	#(lambda (fillobj c1 (ic_toorigin $0)))
-1.636963	grid -> grid	#(lambda (ic_filtercol (topcol $0) $0))
-1.669753	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))
Currently using this much memory: 1169588224
Exported checkpoint to ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=1_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
 [+] Cleared recognition model from:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=1_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
     and exported to:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=1_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False_graph=True.pickle
     Use this one for graphing.
Exporting primitive graph to ./experimentOutputs/arc/_primitives_0_depth.pdf
Exported primitive graph to ./experimentOutputs/arc/_primitives_0_unordered.pdf
ecIterator count 0
Currently using this much memory: 1179340800
Currently using this much memory: 1179340800
Using a waking task batch of size: 400
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 48 jobs | 0 CPUs | 400 tasks | 192.0m CPU rem | 4.0m rem | 0.0 avg lb
Enumerated    19,188 programs | 48 jobs | 47 CPUs | 400 tasks | 180.4m CPU rem | 3.8m rem | 12.0 avg lb
Enumerated   765,388 programs | 48 jobs | 47 CPUs | 371 tasks | 176.4m CPU rem | 3.7m rem | 13.8 avg lb
Enumerated   894,572 programs | 48 jobs | 47 CPUs | 369 tasks | 87.7m CPU rem | 1.8m rem | 14.0 avg lb
Enumerated 1,103,432 programs | 48 jobs | 47 CPUs | 369 tasks | 83.3m CPU rem | 1.7m rem | 14.2 avg lb
Enumerated 1,959,758 programs | 48 jobs | 47 CPUs | 368 tasks | 79.3m CPU rem | 1.7m rem | 14.8 avg lb
Enumerated 2,600,262 programs | 48 jobs | 47 CPUs | 368 tasks | 75.0m CPU rem | 1.6m rem | 15.3 avg lb
Enumerated 3,150,260 programs | 48 jobs | 47 CPUs | 368 tasks | 70.6m CPU rem | 1.5m rem | 15.8 avg lb
Enumerated 3,310,386 programs | 48 jobs | 47 CPUs | 368 tasks | 60.0m CPU rem | 1.3m rem | 15.9 avg lb
Enumerated 3,421,778 programs | 48 jobs | 47 CPUs | 368 tasks | 54.7m CPU rem | 1.1m rem | 16.0 avg lb
Enumerated 3,448,370 programs | 41 jobs | 47 CPUs | 306 tasks | 0.3m CPU rem | 0.0m rem | 16.0 avg lb
We enumerated this many programs, for each task:
	 [13526, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 13138, 13080, 13184, 11596, 2132, 12585, 12707, 11790, 13080, 12884, 13080, 13080, 12596, 13124, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 2132, 12996, 13080, 13127, 13572, 2132, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 2132, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 2132, 13138, 13080, 13184, 11596, 11887, 12585, 12707, 11790, 13080, 12884, 13080, 13080, 12596, 13124, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 2132, 12996, 13080, 13127, 2132, 12883, 13183, 12889, 2132, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 13526, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 13138, 13080, 13184, 11596, 11887, 12585, 12707, 2132, 13080, 12884, 13080, 13080, 12596, 13124, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 12652, 12996, 13080, 13127, 13572, 12883, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 2132, 12585, 2132, 12585, 12910, 13526, 12615, 12597, 12951, 13080, 2132, 13080, 2132, 13092, 13138, 2132, 13184, 11596, 11887, 12585, 12707, 11790, 13080, 12884, 2132, 13080, 12596, 13124, 12716, 12887, 12585, 13174, 2132, 12475, 2132, 12652, 12996, 2132, 2132, 2132, 12883, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 13526, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 13138, 13080, 13184, 11596, 11887, 12585, 12707, 11790, 2132, 12884, 13080, 13080, 12596, 13124, 12716, 12887, 2132, 13174, 13274, 12475, 12630, 12652, 12996, 13080, 13127, 13572, 12883, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 2132, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 2132, 13138, 9094, 13184, 11596, 11887, 12585, 12707, 11790, 13080, 12884, 13080, 13080, 12596, 2132, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 12652, 12996, 13080, 13127, 13572, 12883, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 13526, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 13138, 13080, 2132, 11596, 11887, 12585, 12707, 11790, 13080, 12884, 13080, 13080, 12596, 2132, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 12652, 12996, 13080, 13127, 13572, 12883, 13183, 12889, 12875, 13061, 12761, 13080, 13080, 13080, 12585, 13080, 12585, 12910, 13526, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 2132, 13080, 13184, 11596, 11887, 12585, 12707, 11790, 13080, 12884, 13080, 13080, 12596, 13124, 12716, 12887, 12585, 13174, 13274, 12475, 12630, 12652, 12996, 13080, 13127, 13572, 12883, 13183, 12889, 12875, 13061, 2132, 13080, 13080, 2132, 12585, 13080, 12585, 12910, 2132, 12615, 12597, 12951, 13080, 12806, 13080, 13362, 13092, 13138, 13080, 13184, 11596, 11887, 12585, 12707]
Generative model enumeration results:
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -9.909758 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.505386 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) ; log prior = -11.770648 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (ic_compress2 $0)) ; log prior = -7.468932 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.505386 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.505386 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (ic_compress2 (repeatX $0))) ; log prior = -11.738608 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.520316 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.521457 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.504592 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -9.858298 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -13.871484 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.506278 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (flipx $0))) ; log prior = -11.783082 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -10.765348 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -7.504592 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.521457 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (flipy $0)) ; log prior = -7.512633 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.521457 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (flipx $0)) ; log prior = -7.500168 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.504271 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -7.518021 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -7.522021 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -7.523575 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.500370 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -7.495434 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -7.518021 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.500370 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -7.495434 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -7.504784 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -7.536184 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0))) ; log prior = -14.198930 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.505384 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0))) ; log prior = -13.132163 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2)) ; log prior = -12.293921 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0))) ; log prior = -11.792208 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.505384 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) ; log prior = -12.264089 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -7.504271 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -9.888518 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (rarestcol $0))) ; log prior = -13.849604 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.520316 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.500370 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -7.524009 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.506278 ; log likelihood = 0.000000
Hits 45/400 tasks
Average description length of a program solving a task: 8.886649 nats
Generative model average:  11 sec.	median: 1 	max: 170 	standard deviation 31
Currently using this much memory: 1177767936
Frontiers discovered top down: 45
Total frontiers: 55
Using an ensemble size of 1. Note that we will only store and test on the best recognition model.
Currently using this much memory: 1177767936
(ID=0): Training a recognition model from 55 frontiers, 100% Helmholtz, feature extractor MikelArcNet.
(ID=0): Got 0 Helmholtz frontiers - random Helmholtz training? : True
(ID=0): Contextual? False
(ID=0): Bias optimal? False
(ID=0): Aux loss? False (n.b. we train a 'auxiliary' classifier anyway - this controls if gradients propagate back to the future extractor)
Sampling 1000 programs from the prior on 48 CPUs...
Got 498/1000 valid samples.
(ID=0): Epoch 1 Loss 14.98
(ID=0): 	vs MDL (w/o neural net) 13.98
(ID=0): 	1 cum grad steps. 0.3 steps/sec | 94-way aux classif loss 0.6900
(ID=0): Epoch 50 Loss 20.79
(ID=0): 	vs MDL (w/o neural net) 19.75
(ID=0): 	50 cum grad steps. 8.0 steps/sec | 94-way aux classif loss 0.6881
(ID=0): Epoch 100 Loss 21.93
(ID=0): 	vs MDL (w/o neural net) 21.48
(ID=0): 	100 cum grad steps. 11.6 steps/sec | 94-way aux classif loss 0.6705
(ID=0): Epoch 150 Loss 19.61
(ID=0): 	vs MDL (w/o neural net) 20.16
(ID=0): 	150 cum grad steps. 13.7 steps/sec | 94-way aux classif loss 0.5906
(ID=0): Epoch 200 Loss 21.21
(ID=0): 	vs MDL (w/o neural net) 21.94
(ID=0): 	200 cum grad steps. 15.2 steps/sec | 94-way aux classif loss 0.5563
(ID=0): Epoch 250 Loss 17.64
(ID=0): 	vs MDL (w/o neural net) 18.93
(ID=0): 	250 cum grad steps. 16.2 steps/sec | 94-way aux classif loss 0.5207
(ID=0): Epoch 300 Loss 18.32
(ID=0): 	vs MDL (w/o neural net) 19.76
(ID=0): 	300 cum grad steps. 16.8 steps/sec | 94-way aux classif loss 0.4937
(ID=0): Epoch 350 Loss 18.86
(ID=0): 	vs MDL (w/o neural net) 20.28
(ID=0): 	350 cum grad steps. 17.5 steps/sec | 94-way aux classif loss 0.4682
(ID=0): Epoch 400 Loss 20.67
(ID=0): 	vs MDL (w/o neural net) 22.08
(ID=0): 	400 cum grad steps. 17.9 steps/sec | 94-way aux classif loss 0.4461
(ID=0): Epoch 450 Loss 21.06
(ID=0): 	vs MDL (w/o neural net) 22.90
(ID=0): 	450 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.4273
Sampling 1000 programs from the prior on 48 CPUs...
Got 500/1000 valid samples.
(ID=0): Epoch 500 Loss 19.18
(ID=0): 	vs MDL (w/o neural net) 20.59
(ID=0): 	500 cum grad steps. 15.9 steps/sec | 94-way aux classif loss 0.3948
(ID=0): Epoch 550 Loss 22.13
(ID=0): 	vs MDL (w/o neural net) 23.72
(ID=0): 	550 cum grad steps. 16.3 steps/sec | 94-way aux classif loss 0.3771
(ID=0): Epoch 600 Loss 18.75
(ID=0): 	vs MDL (w/o neural net) 20.24
(ID=0): 	600 cum grad steps. 16.6 steps/sec | 94-way aux classif loss 0.3602
(ID=0): Epoch 650 Loss 23.13
(ID=0): 	vs MDL (w/o neural net) 24.44
(ID=0): 	650 cum grad steps. 16.9 steps/sec | 94-way aux classif loss 0.3469
(ID=0): Epoch 700 Loss 22.18
(ID=0): 	vs MDL (w/o neural net) 23.77
(ID=0): 	700 cum grad steps. 17.2 steps/sec | 94-way aux classif loss 0.3460
(ID=0): Epoch 750 Loss 20.81
(ID=0): 	vs MDL (w/o neural net) 22.61
(ID=0): 	750 cum grad steps. 17.4 steps/sec | 94-way aux classif loss 0.3286
(ID=0): Epoch 800 Loss 21.67
(ID=0): 	vs MDL (w/o neural net) 23.22
(ID=0): 	800 cum grad steps. 17.7 steps/sec | 94-way aux classif loss 0.3125
(ID=0): Epoch 850 Loss 19.26
(ID=0): 	vs MDL (w/o neural net) 20.92
(ID=0): 	850 cum grad steps. 17.8 steps/sec | 94-way aux classif loss 0.2999
(ID=0): Epoch 900 Loss 21.63
(ID=0): 	vs MDL (w/o neural net) 23.57
(ID=0): 	900 cum grad steps. 18.0 steps/sec | 94-way aux classif loss 0.2977
(ID=0): Epoch 950 Loss 19.15
(ID=0): 	vs MDL (w/o neural net) 20.97
(ID=0): 	950 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2777
Sampling 1000 programs from the prior on 48 CPUs...
Got 472/1000 valid samples.
(ID=0): Epoch 1000 Loss 17.97
(ID=0): 	vs MDL (w/o neural net) 19.86
(ID=0): 	1000 cum grad steps. 17.2 steps/sec | 94-way aux classif loss 0.2647
(ID=0): Epoch 1050 Loss 18.66
(ID=0): 	vs MDL (w/o neural net) 20.29
(ID=0): 	1050 cum grad steps. 17.3 steps/sec | 94-way aux classif loss 0.2746
(ID=0): Epoch 1100 Loss 19.54
(ID=0): 	vs MDL (w/o neural net) 21.42
(ID=0): 	1100 cum grad steps. 17.6 steps/sec | 94-way aux classif loss 0.2663
(ID=0): Epoch 1150 Loss 20.65
(ID=0): 	vs MDL (w/o neural net) 22.57
(ID=0): 	1150 cum grad steps. 17.7 steps/sec | 94-way aux classif loss 0.2654
(ID=0): Epoch 1200 Loss 18.81
(ID=0): 	vs MDL (w/o neural net) 20.56
(ID=0): 	1200 cum grad steps. 17.8 steps/sec | 94-way aux classif loss 0.2548
(ID=0): Epoch 1250 Loss 20.93
(ID=0): 	vs MDL (w/o neural net) 22.76
(ID=0): 	1250 cum grad steps. 18.0 steps/sec | 94-way aux classif loss 0.2593
(ID=0): Epoch 1300 Loss 19.99
(ID=0): 	vs MDL (w/o neural net) 21.86
(ID=0): 	1300 cum grad steps. 18.1 steps/sec | 94-way aux classif loss 0.2517
(ID=0): Epoch 1350 Loss 20.37
(ID=0): 	vs MDL (w/o neural net) 22.27
(ID=0): 	1350 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2500
(ID=0): Epoch 1400 Loss 19.52
(ID=0): 	vs MDL (w/o neural net) 21.60
(ID=0): 	1400 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2408
(ID=0): Epoch 1450 Loss 20.31
(ID=0): 	vs MDL (w/o neural net) 22.31
(ID=0): 	1450 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2429
Sampling 1000 programs from the prior on 48 CPUs...
Got 474/1000 valid samples.
(ID=0): Epoch 1500 Loss 19.12
(ID=0): 	vs MDL (w/o neural net) 20.85
(ID=0): 	1500 cum grad steps. 17.7 steps/sec | 94-way aux classif loss 0.2365
(ID=0): Epoch 1550 Loss 20.67
(ID=0): 	vs MDL (w/o neural net) 22.51
(ID=0): 	1550 cum grad steps. 17.8 steps/sec | 94-way aux classif loss 0.2448
(ID=0): Epoch 1600 Loss 17.07
(ID=0): 	vs MDL (w/o neural net) 19.05
(ID=0): 	1600 cum grad steps. 17.9 steps/sec | 94-way aux classif loss 0.2230
(ID=0): Epoch 1650 Loss 17.23
(ID=0): 	vs MDL (w/o neural net) 18.95
(ID=0): 	1650 cum grad steps. 18.0 steps/sec | 94-way aux classif loss 0.2240
(ID=0): Epoch 1700 Loss 20.18
(ID=0): 	vs MDL (w/o neural net) 22.18
(ID=0): 	1700 cum grad steps. 18.1 steps/sec | 94-way aux classif loss 0.2348
(ID=0): Epoch 1750 Loss 23.14
(ID=0): 	vs MDL (w/o neural net) 25.25
(ID=0): 	1750 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2463
(ID=0): Epoch 1800 Loss 18.27
(ID=0): 	vs MDL (w/o neural net) 20.28
(ID=0): 	1800 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2201
(ID=0): Epoch 1850 Loss 19.57
(ID=0): 	vs MDL (w/o neural net) 21.68
(ID=0): 	1850 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2240
(ID=0): Epoch 1900 Loss 19.56
(ID=0): 	vs MDL (w/o neural net) 21.31
(ID=0): 	1900 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2230
Sampling 1000 programs from the prior on 48 CPUs...
Got 498/1000 valid samples.
(ID=0): Epoch 1950 Loss 19.66
(ID=0): 	vs MDL (w/o neural net) 21.62
(ID=0): 	1950 cum grad steps. 17.9 steps/sec | 94-way aux classif loss 0.2213
(ID=0): Epoch 2000 Loss 18.45
(ID=0): 	vs MDL (w/o neural net) 20.47
(ID=0): 	2000 cum grad steps. 18.0 steps/sec | 94-way aux classif loss 0.2164
(ID=0): Epoch 2050 Loss 18.40
(ID=0): 	vs MDL (w/o neural net) 20.34
(ID=0): 	2050 cum grad steps. 18.1 steps/sec | 94-way aux classif loss 0.2172
(ID=0): Epoch 2100 Loss 22.02
(ID=0): 	vs MDL (w/o neural net) 24.01
(ID=0): 	2100 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2348
(ID=0): Epoch 2150 Loss 19.35
(ID=0): 	vs MDL (w/o neural net) 21.29
(ID=0): 	2150 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2308
(ID=0): Epoch 2200 Loss 21.72
(ID=0): 	vs MDL (w/o neural net) 23.78
(ID=0): 	2200 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2336
(ID=0): Epoch 2250 Loss 20.64
(ID=0): 	vs MDL (w/o neural net) 22.81
(ID=0): 	2250 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2278
(ID=0): Epoch 2300 Loss 18.26
(ID=0): 	vs MDL (w/o neural net) 20.40
(ID=0): 	2300 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2118
(ID=0): Epoch 2350 Loss 23.04
(ID=0): 	vs MDL (w/o neural net) 25.05
(ID=0): 	2350 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2347
(ID=0): Epoch 2400 Loss 18.81
(ID=0): 	vs MDL (w/o neural net) 20.53
(ID=0): 	2400 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2161
Sampling 1000 programs from the prior on 48 CPUs...
Got 502/1000 valid samples.
(ID=0): Epoch 2450 Loss 21.46
(ID=0): 	vs MDL (w/o neural net) 23.38
(ID=0): 	2450 cum grad steps. 18.1 steps/sec | 94-way aux classif loss 0.2320
(ID=0): Epoch 2500 Loss 18.35
(ID=0): 	vs MDL (w/o neural net) 20.17
(ID=0): 	2500 cum grad steps. 18.1 steps/sec | 94-way aux classif loss 0.2113
(ID=0): Epoch 2550 Loss 21.00
(ID=0): 	vs MDL (w/o neural net) 23.25
(ID=0): 	2550 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2180
(ID=0): Epoch 2600 Loss 19.73
(ID=0): 	vs MDL (w/o neural net) 21.88
(ID=0): 	2600 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2115
(ID=0): Epoch 2650 Loss 22.57
(ID=0): 	vs MDL (w/o neural net) 24.35
(ID=0): 	2650 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2314
(ID=0): Epoch 2700 Loss 23.34
(ID=0): 	vs MDL (w/o neural net) 25.27
(ID=0): 	2700 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2315
(ID=0): Epoch 2750 Loss 21.75
(ID=0): 	vs MDL (w/o neural net) 23.85
(ID=0): 	2750 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2232
(ID=0): Epoch 2800 Loss 19.04
(ID=0): 	vs MDL (w/o neural net) 21.12
(ID=0): 	2800 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2070
(ID=0): Epoch 2850 Loss 18.64
(ID=0): 	vs MDL (w/o neural net) 20.83
(ID=0): 	2850 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2100
(ID=0): Epoch 2900 Loss 20.18
(ID=0): 	vs MDL (w/o neural net) 22.33
(ID=0): 	2900 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2100
Sampling 1000 programs from the prior on 48 CPUs...
Got 485/1000 valid samples.
(ID=0): Epoch 2950 Loss 19.69
(ID=0): 	vs MDL (w/o neural net) 21.78
(ID=0): 	2950 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2079
(ID=0): Epoch 3000 Loss 19.32
(ID=0): 	vs MDL (w/o neural net) 21.33
(ID=0): 	3000 cum grad steps. 18.2 steps/sec | 94-way aux classif loss 0.2057
(ID=0): Epoch 3050 Loss 19.61
(ID=0): 	vs MDL (w/o neural net) 21.62
(ID=0): 	3050 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2116
(ID=0): Epoch 3100 Loss 20.82
(ID=0): 	vs MDL (w/o neural net) 22.88
(ID=0): 	3100 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2169
(ID=0): Epoch 3150 Loss 22.31
(ID=0): 	vs MDL (w/o neural net) 24.54
(ID=0): 	3150 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2188
(ID=0): Epoch 3200 Loss 20.89
(ID=0): 	vs MDL (w/o neural net) 23.09
(ID=0): 	3200 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2109
(ID=0): Epoch 3250 Loss 20.87
(ID=0): 	vs MDL (w/o neural net) 23.36
(ID=0): 	3250 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2164
(ID=0): Epoch 3300 Loss 20.04
(ID=0): 	vs MDL (w/o neural net) 21.69
(ID=0): 	3300 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2152
(ID=0): Epoch 3350 Loss 21.36
(ID=0): 	vs MDL (w/o neural net) 23.51
(ID=0): 	3350 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2178
(ID=0): Epoch 3400 Loss 22.30
(ID=0): 	vs MDL (w/o neural net) 24.35
(ID=0): 	3400 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2213
Sampling 1000 programs from the prior on 48 CPUs...
Got 513/1000 valid samples.
(ID=0): Epoch 3450 Loss 17.33
(ID=0): 	vs MDL (w/o neural net) 19.48
(ID=0): 	3450 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2020
(ID=0): Epoch 3500 Loss 19.78
(ID=0): 	vs MDL (w/o neural net) 22.20
(ID=0): 	3500 cum grad steps. 18.3 steps/sec | 94-way aux classif loss 0.2020
(ID=0): Epoch 3550 Loss 22.36
(ID=0): 	vs MDL (w/o neural net) 24.49
(ID=0): 	3550 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2239
(ID=0): Epoch 3600 Loss 17.02
(ID=0): 	vs MDL (w/o neural net) 18.91
(ID=0): 	3600 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.1948
(ID=0): Epoch 3650 Loss 18.68
(ID=0): 	vs MDL (w/o neural net) 20.62
(ID=0): 	3650 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2025
(ID=0): Epoch 3700 Loss 18.48
(ID=0): 	vs MDL (w/o neural net) 20.51
(ID=0): 	3700 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2011
(ID=0): Epoch 3750 Loss 20.82
(ID=0): 	vs MDL (w/o neural net) 23.02
(ID=0): 	3750 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2142
(ID=0): Epoch 3800 Loss 18.64
(ID=0): 	vs MDL (w/o neural net) 20.86
(ID=0): 	3800 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.1969
(ID=0): Epoch 3850 Loss 19.37
(ID=0): 	vs MDL (w/o neural net) 21.49
(ID=0): 	3850 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2041
(ID=0): Epoch 3900 Loss 21.55
(ID=0): 	vs MDL (w/o neural net) 23.72
(ID=0): 	3900 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2180
Sampling 1000 programs from the prior on 48 CPUs...
Got 467/1000 valid samples.
(ID=0): Epoch 3950 Loss 20.71
(ID=0): 	vs MDL (w/o neural net) 22.81
(ID=0): 	3950 cum grad steps. 18.4 steps/sec | 94-way aux classif loss 0.2155
(ID=0): Epoch 4000 Loss 18.83
(ID=0): 	vs MDL (w/o neural net) 20.59
(ID=0): 	4000 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2305
(ID=0): Epoch 4050 Loss 18.07
(ID=0): 	vs MDL (w/o neural net) 20.17
(ID=0): 	4050 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.1949
(ID=0): Epoch 4100 Loss 19.33
(ID=0): 	vs MDL (w/o neural net) 21.69
(ID=0): 	4100 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.1998
(ID=0): Epoch 4150 Loss 22.00
(ID=0): 	vs MDL (w/o neural net) 24.36
(ID=0): 	4150 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2180
(ID=0): Epoch 4200 Loss 18.51
(ID=0): 	vs MDL (w/o neural net) 20.71
(ID=0): 	4200 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2008
(ID=0): Epoch 4250 Loss 20.68
(ID=0): 	vs MDL (w/o neural net) 22.85
(ID=0): 	4250 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2109
(ID=0): Epoch 4300 Loss 21.28
(ID=0): 	vs MDL (w/o neural net) 23.66
(ID=0): 	4300 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2102
(ID=0): Epoch 4350 Loss 20.53
(ID=0): 	vs MDL (w/o neural net) 22.60
(ID=0): 	4350 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2026
(ID=0): Epoch 4400 Loss 19.25
(ID=0): 	vs MDL (w/o neural net) 21.46
(ID=0): 	4400 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1942
Sampling 1000 programs from the prior on 48 CPUs...
Got 467/1000 valid samples.
(ID=0): Epoch 4450 Loss 19.03
(ID=0): 	vs MDL (w/o neural net) 21.03
(ID=0): 	4450 cum grad steps. 18.5 steps/sec | 94-way aux classif loss 0.2007
(ID=0): Epoch 4500 Loss 16.64
(ID=0): 	vs MDL (w/o neural net) 18.71
(ID=0): 	4500 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.1832
(ID=0): Epoch 4550 Loss 20.05
(ID=0): 	vs MDL (w/o neural net) 21.92
(ID=0): 	4550 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2076
(ID=0): Epoch 4600 Loss 20.83
(ID=0): 	vs MDL (w/o neural net) 23.11
(ID=0): 	4600 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2136
(ID=0): Epoch 4650 Loss 18.05
(ID=0): 	vs MDL (w/o neural net) 20.21
(ID=0): 	4650 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2019
(ID=0): Epoch 4700 Loss 17.13
(ID=0): 	vs MDL (w/o neural net) 19.37
(ID=0): 	4700 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1863
(ID=0): Epoch 4750 Loss 18.60
(ID=0): 	vs MDL (w/o neural net) 20.63
(ID=0): 	4750 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2039
(ID=0): Epoch 4800 Loss 20.91
(ID=0): 	vs MDL (w/o neural net) 23.28
(ID=0): 	4800 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2097
(ID=0): Epoch 4850 Loss 17.29
(ID=0): 	vs MDL (w/o neural net) 19.49
(ID=0): 	4850 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1908
Sampling 1000 programs from the prior on 48 CPUs...
Got 487/1000 valid samples.
(ID=0): Epoch 4900 Loss 20.83
(ID=0): 	vs MDL (w/o neural net) 23.07
(ID=0): 	4900 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2123
(ID=0): Epoch 4950 Loss 21.09
(ID=0): 	vs MDL (w/o neural net) 23.47
(ID=0): 	4950 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2134
(ID=0): Epoch 5000 Loss 18.62
(ID=0): 	vs MDL (w/o neural net) 20.49
(ID=0): 	5000 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2019
(ID=0): Epoch 5050 Loss 20.32
(ID=0): 	vs MDL (w/o neural net) 22.29
(ID=0): 	5050 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2092
(ID=0): Epoch 5100 Loss 15.74
(ID=0): 	vs MDL (w/o neural net) 17.79
(ID=0): 	5100 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1718
(ID=0): Epoch 5150 Loss 21.63
(ID=0): 	vs MDL (w/o neural net) 23.70
(ID=0): 	5150 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2197
(ID=0): Epoch 5200 Loss 19.59
(ID=0): 	vs MDL (w/o neural net) 21.80
(ID=0): 	5200 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2024
(ID=0): Epoch 5250 Loss 16.09
(ID=0): 	vs MDL (w/o neural net) 18.15
(ID=0): 	5250 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1762
(ID=0): Epoch 5300 Loss 17.27
(ID=0): 	vs MDL (w/o neural net) 19.52
(ID=0): 	5300 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1846
(ID=0): Epoch 5350 Loss 21.54
(ID=0): 	vs MDL (w/o neural net) 24.09
(ID=0): 	5350 cum grad steps. 18.9 steps/sec | 94-way aux classif loss 0.2104
Sampling 1000 programs from the prior on 48 CPUs...
Got 496/1000 valid samples.
(ID=0): Epoch 5400 Loss 21.68
(ID=0): 	vs MDL (w/o neural net) 24.35
(ID=0): 	5400 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2141
(ID=0): Epoch 5450 Loss 20.21
(ID=0): 	vs MDL (w/o neural net) 22.48
(ID=0): 	5450 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2080
(ID=0): Epoch 5500 Loss 18.68
(ID=0): 	vs MDL (w/o neural net) 21.16
(ID=0): 	5500 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1986
(ID=0): Epoch 5550 Loss 18.96
(ID=0): 	vs MDL (w/o neural net) 21.61
(ID=0): 	5550 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1957
(ID=0): Epoch 5600 Loss 20.30
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	5600 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2033
(ID=0): Epoch 5650 Loss 19.86
(ID=0): 	vs MDL (w/o neural net) 22.05
(ID=0): 	5650 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2109
(ID=0): Epoch 5700 Loss 20.16
(ID=0): 	vs MDL (w/o neural net) 22.84
(ID=0): 	5700 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1993
(ID=0): Epoch 5750 Loss 18.91
(ID=0): 	vs MDL (w/o neural net) 21.42
(ID=0): 	5750 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1899
(ID=0): Epoch 5800 Loss 21.04
(ID=0): 	vs MDL (w/o neural net) 23.32
(ID=0): 	5800 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2075
(ID=0): Epoch 5850 Loss 18.26
(ID=0): 	vs MDL (w/o neural net) 20.69
(ID=0): 	5850 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1943
Sampling 1000 programs from the prior on 48 CPUs...
Got 501/1000 valid samples.
(ID=0): Epoch 5900 Loss 22.61
(ID=0): 	vs MDL (w/o neural net) 25.17
(ID=0): 	5900 cum grad steps. 18.6 steps/sec | 94-way aux classif loss 0.2216
(ID=0): Epoch 5950 Loss 20.24
(ID=0): 	vs MDL (w/o neural net) 22.74
(ID=0): 	5950 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2097
(ID=0): Epoch 6000 Loss 18.28
(ID=0): 	vs MDL (w/o neural net) 20.53
(ID=0): 	6000 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1896
(ID=0): Epoch 6050 Loss 20.15
(ID=0): 	vs MDL (w/o neural net) 21.85
(ID=0): 	6050 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1986
(ID=0): Epoch 6100 Loss 22.06
(ID=0): 	vs MDL (w/o neural net) 24.03
(ID=0): 	6100 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2156
(ID=0): Epoch 6150 Loss 18.61
(ID=0): 	vs MDL (w/o neural net) 20.78
(ID=0): 	6150 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1956
(ID=0): Epoch 6200 Loss 19.13
(ID=0): 	vs MDL (w/o neural net) 21.37
(ID=0): 	6200 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2036
(ID=0): Epoch 6250 Loss 20.62
(ID=0): 	vs MDL (w/o neural net) 22.73
(ID=0): 	6250 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2043
(ID=0): Epoch 6300 Loss 19.48
(ID=0): 	vs MDL (w/o neural net) 21.78
(ID=0): 	6300 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1971
(ID=0): Epoch 6350 Loss 21.31
(ID=0): 	vs MDL (w/o neural net) 23.81
(ID=0): 	6350 cum grad steps. 18.9 steps/sec | 94-way aux classif loss 0.2111
Sampling 1000 programs from the prior on 48 CPUs...
Got 449/1000 valid samples.
(ID=0): Epoch 6400 Loss 19.02
(ID=0): 	vs MDL (w/o neural net) 21.37
(ID=0): 	6400 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2091
(ID=0): Epoch 6450 Loss 16.44
(ID=0): 	vs MDL (w/o neural net) 18.72
(ID=0): 	6450 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1941
(ID=0): Epoch 6500 Loss 19.98
(ID=0): 	vs MDL (w/o neural net) 22.39
(ID=0): 	6500 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.2196
(ID=0): Epoch 6550 Loss 16.87
(ID=0): 	vs MDL (w/o neural net) 19.20
(ID=0): 	6550 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1791
(ID=0): Epoch 6600 Loss 16.34
(ID=0): 	vs MDL (w/o neural net) 18.74
(ID=0): 	6600 cum grad steps. 18.7 steps/sec | 94-way aux classif loss 0.1750
(ID=0): Epoch 6650 Loss 18.62
(ID=0): 	vs MDL (w/o neural net) 21.04
(ID=0): 	6650 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2023
(ID=0): Epoch 6700 Loss 19.69
(ID=0): 	vs MDL (w/o neural net) 21.92
(ID=0): 	6700 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.2077
(ID=0): Epoch 6750 Loss 18.65
(ID=0): 	vs MDL (w/o neural net) 20.98
(ID=0): 	6750 cum grad steps. 18.8 steps/sec | 94-way aux classif loss 0.1896
(ID=0):   Trained recognition model in 360.0028018951416 seconds
Currently using this much memory: 1186156544
Trained an ensemble of 1 recognition models, now enumerating.
Enumerating from recognizer 0 of 1
Evaluated recognition model in 3.7 seconds
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 400 jobs | 0 CPUs | 400 tasks | 1600.0m CPU rem | 33.3m rem | 0.0 avg lb
Enumerated     1,800 programs | 400 jobs | 47 CPUs | 400 tasks | 1596.4m CPU rem | 33.3m rem | 1.7 avg lb
Enumerated     4,329 programs | 400 jobs | 47 CPUs | 400 tasks | 1592.2m CPU rem | 33.2m rem | 2.2 avg lb
Enumerated    35,306 programs | 400 jobs | 47 CPUs | 400 tasks | 1588.0m CPU rem | 33.1m rem | 2.6 avg lb
Enumerated    72,406 programs | 399 jobs | 47 CPUs | 399 tasks | 1580.3m CPU rem | 32.9m rem | 3.0 avg lb
Enumerated   105,747 programs | 396 jobs | 47 CPUs | 396 tasks | 1565.2m CPU rem | 32.6m rem | 3.4 avg lb
Enumerated   135,965 programs | 396 jobs | 47 CPUs | 396 tasks | 1561.2m CPU rem | 32.5m rem | 3.9 avg lb
Enumerated   168,687 programs | 396 jobs | 47 CPUs | 396 tasks | 1557.1m CPU rem | 32.4m rem | 4.3 avg lb
Enumerated   201,001 programs | 396 jobs | 47 CPUs | 396 tasks | 1553.0m CPU rem | 32.4m rem | 4.8 avg lb
Enumerated   236,985 programs | 395 jobs | 47 CPUs | 395 tasks | 1545.2m CPU rem | 32.2m rem | 5.2 avg lb
Enumerated   269,290 programs | 394 jobs | 47 CPUs | 394 tasks | 1537.4m CPU rem | 32.0m rem | 5.7 avg lb
Enumerated   292,615 programs | 393 jobs | 47 CPUs | 393 tasks | 1529.4m CPU rem | 31.9m rem | 6.1 avg lb
Enumerated   317,267 programs | 392 jobs | 47 CPUs | 392 tasks | 1521.7m CPU rem | 31.7m rem | 6.6 avg lb
Enumerated   351,688 programs | 389 jobs | 47 CPUs | 389 tasks | 1506.4m CPU rem | 31.4m rem | 7.0 avg lb
Enumerated   394,293 programs | 389 jobs | 47 CPUs | 389 tasks | 1502.1m CPU rem | 31.3m rem | 7.5 avg lb
Enumerated   421,938 programs | 389 jobs | 47 CPUs | 389 tasks | 1498.0m CPU rem | 31.2m rem | 7.9 avg lb
Enumerated   456,892 programs | 388 jobs | 47 CPUs | 388 tasks | 1490.2m CPU rem | 31.0m rem | 8.4 avg lb
Enumerated   499,881 programs | 386 jobs | 47 CPUs | 386 tasks | 1478.7m CPU rem | 30.8m rem | 8.8 avg lb
Enumerated   535,255 programs | 385 jobs | 47 CPUs | 385 tasks | 1470.7m CPU rem | 30.6m rem | 9.3 avg lb
Enumerated   577,222 programs | 384 jobs | 47 CPUs | 384 tasks | 1463.0m CPU rem | 30.5m rem | 9.8 avg lb
Enumerated   614,619 programs | 384 jobs | 47 CPUs | 384 tasks | 1458.9m CPU rem | 30.4m rem | 10.2 avg lb
Enumerated   646,808 programs | 383 jobs | 47 CPUs | 383 tasks | 1451.1m CPU rem | 30.2m rem | 10.7 avg lb
Enumerated   676,602 programs | 383 jobs | 47 CPUs | 383 tasks | 1446.8m CPU rem | 30.1m rem | 11.2 avg lb
Enumerated   711,643 programs | 383 jobs | 47 CPUs | 383 tasks | 1442.6m CPU rem | 30.1m rem | 11.7 avg lb
Enumerated   745,330 programs | 382 jobs | 47 CPUs | 382 tasks | 1434.9m CPU rem | 29.9m rem | 12.0 avg lb
Enumerated   781,105 programs | 382 jobs | 47 CPUs | 382 tasks | 1430.8m CPU rem | 29.8m rem | 12.1 avg lb
Enumerated   813,317 programs | 381 jobs | 47 CPUs | 381 tasks | 1423.0m CPU rem | 29.6m rem | 12.2 avg lb
Enumerated   840,177 programs | 381 jobs | 47 CPUs | 381 tasks | 1418.9m CPU rem | 29.6m rem | 12.3 avg lb
Enumerated   856,028 programs | 381 jobs | 47 CPUs | 381 tasks | 1414.6m CPU rem | 29.5m rem | 12.3 avg lb
Enumerated   861,050 programs | 381 jobs | 47 CPUs | 381 tasks | 1410.3m CPU rem | 29.4m rem | 12.4 avg lb
Enumerated   878,055 programs | 381 jobs | 47 CPUs | 381 tasks | 1406.1m CPU rem | 29.3m rem | 12.4 avg lb
Enumerated   908,043 programs | 380 jobs | 47 CPUs | 380 tasks | 1398.6m CPU rem | 29.1m rem | 12.5 avg lb
Enumerated 1,027,821 programs | 379 jobs | 47 CPUs | 379 tasks | 1390.9m CPU rem | 29.0m rem | 12.5 avg lb
Enumerated 1,122,831 programs | 379 jobs | 47 CPUs | 379 tasks | 1386.8m CPU rem | 28.9m rem | 12.6 avg lb
Enumerated 1,189,298 programs | 378 jobs | 47 CPUs | 378 tasks | 1379.0m CPU rem | 28.7m rem | 12.6 avg lb
Enumerated 1,268,115 programs | 378 jobs | 47 CPUs | 378 tasks | 1374.6m CPU rem | 28.6m rem | 12.7 avg lb
Enumerated 1,351,195 programs | 377 jobs | 47 CPUs | 377 tasks | 1367.4m CPU rem | 28.5m rem | 12.7 avg lb
Enumerated 1,439,033 programs | 377 jobs | 47 CPUs | 377 tasks | 1363.1m CPU rem | 28.4m rem | 12.8 avg lb
Enumerated 1,542,955 programs | 377 jobs | 47 CPUs | 377 tasks | 1358.7m CPU rem | 28.3m rem | 12.8 avg lb
Enumerated 1,636,841 programs | 377 jobs | 47 CPUs | 377 tasks | 1354.2m CPU rem | 28.2m rem | 12.9 avg lb
Enumerated 1,699,089 programs | 377 jobs | 47 CPUs | 377 tasks | 1349.7m CPU rem | 28.1m rem | 12.9 avg lb
Enumerated 1,802,731 programs | 377 jobs | 47 CPUs | 377 tasks | 1345.2m CPU rem | 28.0m rem | 13.0 avg lb
Enumerated 1,938,647 programs | 377 jobs | 47 CPUs | 377 tasks | 1340.8m CPU rem | 27.9m rem | 13.0 avg lb
Enumerated 2,023,513 programs | 377 jobs | 47 CPUs | 377 tasks | 1336.5m CPU rem | 27.8m rem | 13.1 avg lb
Enumerated 2,146,104 programs | 377 jobs | 47 CPUs | 377 tasks | 1332.1m CPU rem | 27.8m rem | 13.1 avg lb
Enumerated 2,268,076 programs | 377 jobs | 47 CPUs | 377 tasks | 1328.0m CPU rem | 27.7m rem | 13.2 avg lb
Enumerated 2,313,687 programs | 377 jobs | 47 CPUs | 377 tasks | 1323.7m CPU rem | 27.6m rem | 13.2 avg lb
Enumerated 2,417,049 programs | 377 jobs | 47 CPUs | 377 tasks | 1319.6m CPU rem | 27.5m rem | 13.3 avg lb
Enumerated 2,480,295 programs | 377 jobs | 47 CPUs | 377 tasks | 1315.4m CPU rem | 27.4m rem | 13.3 avg lb
Enumerated 2,564,617 programs | 377 jobs | 47 CPUs | 377 tasks | 1311.3m CPU rem | 27.3m rem | 13.3 avg lb
Enumerated 2,678,531 programs | 377 jobs | 47 CPUs | 377 tasks | 1307.0m CPU rem | 27.2m rem | 13.4 avg lb
Enumerated 2,821,351 programs | 377 jobs | 47 CPUs | 377 tasks | 1302.5m CPU rem | 27.1m rem | 13.4 avg lb
Enumerated 2,908,394 programs | 377 jobs | 47 CPUs | 377 tasks | 1297.9m CPU rem | 27.0m rem | 13.5 avg lb
Enumerated 3,008,936 programs | 377 jobs | 47 CPUs | 377 tasks | 1293.4m CPU rem | 26.9m rem | 13.5 avg lb
Enumerated 3,166,657 programs | 377 jobs | 47 CPUs | 377 tasks | 1288.7m CPU rem | 26.8m rem | 13.6 avg lb
Enumerated 3,210,954 programs | 377 jobs | 47 CPUs | 377 tasks | 1284.3m CPU rem | 26.8m rem | 13.6 avg lb
Enumerated 3,290,470 programs | 376 jobs | 47 CPUs | 376 tasks | 1276.3m CPU rem | 26.6m rem | 13.7 avg lb
Enumerated 3,373,248 programs | 376 jobs | 47 CPUs | 376 tasks | 1271.8m CPU rem | 26.5m rem | 13.7 avg lb
Enumerated 3,525,896 programs | 376 jobs | 47 CPUs | 376 tasks | 1267.2m CPU rem | 26.4m rem | 13.8 avg lb
Enumerated 3,626,426 programs | 376 jobs | 47 CPUs | 376 tasks | 1263.0m CPU rem | 26.3m rem | 13.8 avg lb
Enumerated 3,723,031 programs | 376 jobs | 47 CPUs | 376 tasks | 1258.6m CPU rem | 26.2m rem | 13.8 avg lb
Enumerated 3,804,767 programs | 376 jobs | 47 CPUs | 376 tasks | 1254.3m CPU rem | 26.1m rem | 13.9 avg lb
Enumerated 3,873,204 programs | 376 jobs | 47 CPUs | 376 tasks | 1250.1m CPU rem | 26.0m rem | 13.9 avg lb
Enumerated 4,021,892 programs | 375 jobs | 47 CPUs | 375 tasks | 1243.1m CPU rem | 25.9m rem | 14.0 avg lb
Enumerated 4,142,556 programs | 375 jobs | 47 CPUs | 375 tasks | 1238.6m CPU rem | 25.8m rem | 14.0 avg lb
Enumerated 4,191,789 programs | 375 jobs | 47 CPUs | 375 tasks | 1234.5m CPU rem | 25.7m rem | 14.1 avg lb
Enumerated 4,320,431 programs | 375 jobs | 47 CPUs | 375 tasks | 1230.1m CPU rem | 25.6m rem | 14.1 avg lb
Enumerated 4,418,173 programs | 375 jobs | 47 CPUs | 375 tasks | 1225.9m CPU rem | 25.5m rem | 14.2 avg lb
Enumerated 4,516,518 programs | 375 jobs | 47 CPUs | 375 tasks | 1221.7m CPU rem | 25.5m rem | 14.2 avg lb
Enumerated 4,618,647 programs | 375 jobs | 47 CPUs | 375 tasks | 1217.3m CPU rem | 25.4m rem | 14.3 avg lb
Enumerated 4,697,646 programs | 374 jobs | 47 CPUs | 374 tasks | 1210.4m CPU rem | 25.2m rem | 14.3 avg lb
Enumerated 4,758,822 programs | 373 jobs | 47 CPUs | 373 tasks | 1202.8m CPU rem | 25.1m rem | 14.4 avg lb
Enumerated 4,843,196 programs | 373 jobs | 47 CPUs | 373 tasks | 1198.2m CPU rem | 25.0m rem | 14.4 avg lb
Enumerated 4,899,818 programs | 373 jobs | 47 CPUs | 373 tasks | 1194.0m CPU rem | 24.9m rem | 14.5 avg lb
Enumerated 4,962,018 programs | 373 jobs | 47 CPUs | 373 tasks | 1189.6m CPU rem | 24.8m rem | 14.5 avg lb
Enumerated 5,000,117 programs | 373 jobs | 47 CPUs | 373 tasks | 1184.2m CPU rem | 24.7m rem | 14.6 avg lb
Enumerated 5,112,647 programs | 373 jobs | 47 CPUs | 373 tasks | 1112.7m CPU rem | 23.2m rem | 14.6 avg lb
Enumerated 5,201,243 programs | 373 jobs | 47 CPUs | 373 tasks | 1107.2m CPU rem | 23.1m rem | 14.6 avg lb
Enumerated 5,266,974 programs | 372 jobs | 47 CPUs | 372 tasks | 1091.3m CPU rem | 22.7m rem | 14.6 avg lb
Enumerated 5,452,378 programs | 369 jobs | 47 CPUs | 369 tasks | 1086.8m CPU rem | 22.6m rem | 14.6 avg lb
Enumerated 5,753,413 programs | 366 jobs | 47 CPUs | 366 tasks | 1081.2m CPU rem | 22.5m rem | 14.6 avg lb
Enumerated 6,007,627 programs | 362 jobs | 47 CPUs | 362 tasks | 1073.3m CPU rem | 22.4m rem | 14.6 avg lb
Enumerated 6,418,402 programs | 356 jobs | 47 CPUs | 356 tasks | 1068.2m CPU rem | 22.3m rem | 14.7 avg lb
Enumerated 6,656,304 programs | 354 jobs | 47 CPUs | 354 tasks | 1064.1m CPU rem | 22.2m rem | 14.7 avg lb
Enumerated 6,940,489 programs | 349 jobs | 47 CPUs | 349 tasks | 1059.6m CPU rem | 22.1m rem | 14.7 avg lb
Enumerated 7,236,065 programs | 340 jobs | 47 CPUs | 340 tasks | 1055.8m CPU rem | 22.0m rem | 14.7 avg lb
Enumerated 7,647,840 programs | 336 jobs | 47 CPUs | 336 tasks | 1048.5m CPU rem | 21.8m rem | 14.8 avg lb
Enumerated 7,974,792 programs | 333 jobs | 47 CPUs | 333 tasks | 1040.9m CPU rem | 21.7m rem | 14.8 avg lb
Enumerated 8,398,840 programs | 330 jobs | 47 CPUs | 330 tasks | 1036.9m CPU rem | 21.6m rem | 14.9 avg lb
Enumerated 8,504,126 programs | 328 jobs | 47 CPUs | 328 tasks | 1031.8m CPU rem | 21.5m rem | 14.9 avg lb
Enumerated 8,681,181 programs | 326 jobs | 47 CPUs | 326 tasks | 1021.2m CPU rem | 21.3m rem | 14.9 avg lb
Enumerated 8,801,338 programs | 325 jobs | 47 CPUs | 325 tasks | 963.0m CPU rem | 20.1m rem | 14.9 avg lb
Enumerated 8,886,332 programs | 324 jobs | 47 CPUs | 324 tasks | 949.6m CPU rem | 19.8m rem | 15.0 avg lb
Enumerated 8,956,561 programs | 324 jobs | 47 CPUs | 324 tasks | 942.9m CPU rem | 19.6m rem | 15.0 avg lb
Enumerated 9,146,394 programs | 321 jobs | 47 CPUs | 321 tasks | 937.0m CPU rem | 19.5m rem | 15.0 avg lb
Enumerated 9,290,544 programs | 319 jobs | 47 CPUs | 319 tasks | 932.7m CPU rem | 19.4m rem | 15.0 avg lb
Enumerated 9,489,638 programs | 316 jobs | 47 CPUs | 316 tasks | 928.1m CPU rem | 19.3m rem | 15.0 avg lb
Enumerated 9,575,798 programs | 315 jobs | 47 CPUs | 315 tasks | 922.6m CPU rem | 19.2m rem | 15.0 avg lb
Enumerated 10,139,102 programs | 308 jobs | 47 CPUs | 308 tasks | 918.5m CPU rem | 19.1m rem | 15.1 avg lb
Enumerated 10,356,379 programs | 304 jobs | 47 CPUs | 304 tasks | 914.3m CPU rem | 19.0m rem | 15.1 avg lb
Enumerated 10,523,501 programs | 302 jobs | 47 CPUs | 302 tasks | 909.7m CPU rem | 19.0m rem | 15.1 avg lb
Enumerated 10,695,400 programs | 299 jobs | 47 CPUs | 299 tasks | 903.6m CPU rem | 18.8m rem | 15.2 avg lb
Enumerated 11,044,800 programs | 293 jobs | 47 CPUs | 293 tasks | 899.4m CPU rem | 18.7m rem | 15.2 avg lb
Enumerated 11,388,282 programs | 287 jobs | 47 CPUs | 287 tasks | 894.5m CPU rem | 18.6m rem | 15.2 avg lb
Enumerated 11,695,656 programs | 285 jobs | 47 CPUs | 285 tasks | 889.9m CPU rem | 18.5m rem | 15.3 avg lb
Enumerated 11,919,644 programs | 281 jobs | 47 CPUs | 281 tasks | 882.2m CPU rem | 18.4m rem | 15.3 avg lb
Enumerated 12,069,564 programs | 279 jobs | 47 CPUs | 279 tasks | 874.9m CPU rem | 18.2m rem | 15.3 avg lb
Enumerated 12,133,922 programs | 279 jobs | 47 CPUs | 279 tasks | 841.1m CPU rem | 17.5m rem | 15.3 avg lb
Enumerated 12,217,096 programs | 278 jobs | 47 CPUs | 278 tasks | 811.2m CPU rem | 16.9m rem | 15.4 avg lb
Enumerated 12,371,741 programs | 275 jobs | 47 CPUs | 275 tasks | 803.5m CPU rem | 16.7m rem | 15.4 avg lb
Enumerated 12,456,905 programs | 272 jobs | 47 CPUs | 272 tasks | 795.0m CPU rem | 16.6m rem | 15.4 avg lb
Enumerated 12,532,871 programs | 270 jobs | 47 CPUs | 270 tasks | 790.2m CPU rem | 16.5m rem | 15.4 avg lb
Enumerated 12,810,923 programs | 267 jobs | 47 CPUs | 267 tasks | 785.8m CPU rem | 16.4m rem | 15.5 avg lb
Enumerated 12,961,679 programs | 265 jobs | 47 CPUs | 265 tasks | 781.5m CPU rem | 16.3m rem | 15.5 avg lb
Enumerated 13,209,072 programs | 263 jobs | 47 CPUs | 263 tasks | 777.4m CPU rem | 16.2m rem | 15.5 avg lb
Enumerated 13,422,179 programs | 259 jobs | 47 CPUs | 259 tasks | 772.7m CPU rem | 16.1m rem | 15.6 avg lb
Enumerated 13,602,652 programs | 258 jobs | 47 CPUs | 258 tasks | 768.3m CPU rem | 16.0m rem | 15.6 avg lb
Enumerated 13,773,889 programs | 255 jobs | 47 CPUs | 255 tasks | 762.8m CPU rem | 15.9m rem | 15.6 avg lb
Enumerated 14,016,934 programs | 252 jobs | 47 CPUs | 252 tasks | 757.2m CPU rem | 15.8m rem | 15.7 avg lb
Enumerated 14,475,010 programs | 246 jobs | 47 CPUs | 246 tasks | 752.0m CPU rem | 15.7m rem | 15.8 avg lb
Enumerated 14,923,755 programs | 240 jobs | 47 CPUs | 240 tasks | 745.8m CPU rem | 15.5m rem | 15.8 avg lb
Enumerated 15,236,551 programs | 235 jobs | 47 CPUs | 235 tasks | 737.2m CPU rem | 15.4m rem | 15.9 avg lb
Enumerated 15,414,065 programs | 233 jobs | 47 CPUs | 233 tasks | 729.2m CPU rem | 15.2m rem | 15.9 avg lb
Enumerated 15,502,792 programs | 233 jobs | 47 CPUs | 233 tasks | 716.4m CPU rem | 14.9m rem | 16.0 avg lb
Enumerated 15,567,956 programs | 232 jobs | 47 CPUs | 232 tasks | 696.9m CPU rem | 14.5m rem | 16.0 avg lb
Enumerated 15,619,584 programs | 231 jobs | 47 CPUs | 231 tasks | 669.0m CPU rem | 13.9m rem | 16.0 avg lb
Enumerated 15,678,390 programs | 230 jobs | 47 CPUs | 230 tasks | 664.3m CPU rem | 13.8m rem | 16.0 avg lb
Enumerated 15,781,766 programs | 228 jobs | 47 CPUs | 228 tasks | 660.1m CPU rem | 13.8m rem | 16.1 avg lb
Enumerated 15,926,211 programs | 225 jobs | 47 CPUs | 225 tasks | 655.7m CPU rem | 13.7m rem | 16.1 avg lb
Enumerated 16,044,078 programs | 224 jobs | 47 CPUs | 224 tasks | 651.4m CPU rem | 13.6m rem | 16.2 avg lb
Enumerated 16,198,485 programs | 222 jobs | 47 CPUs | 222 tasks | 646.7m CPU rem | 13.5m rem | 16.3 avg lb
Enumerated 16,380,429 programs | 220 jobs | 47 CPUs | 220 tasks | 642.5m CPU rem | 13.4m rem | 16.4 avg lb
Enumerated 16,523,848 programs | 218 jobs | 47 CPUs | 218 tasks | 638.2m CPU rem | 13.3m rem | 16.5 avg lb
Enumerated 16,691,225 programs | 213 jobs | 47 CPUs | 213 tasks | 627.3m CPU rem | 13.1m rem | 16.6 avg lb
Enumerated 16,774,784 programs | 212 jobs | 47 CPUs | 212 tasks | 622.9m CPU rem | 13.0m rem | 16.6 avg lb
Enumerated 17,075,457 programs | 208 jobs | 47 CPUs | 208 tasks | 618.9m CPU rem | 12.9m rem | 16.8 avg lb
Enumerated 17,376,137 programs | 203 jobs | 47 CPUs | 203 tasks | 611.2m CPU rem | 12.7m rem | 16.9 avg lb
Enumerated 17,662,380 programs | 202 jobs | 47 CPUs | 202 tasks | 607.0m CPU rem | 12.6m rem | 17.0 avg lb
Enumerated 17,946,560 programs | 199 jobs | 47 CPUs | 199 tasks | 602.8m CPU rem | 12.6m rem | 17.2 avg lb
Enumerated 18,490,179 programs | 194 jobs | 47 CPUs | 194 tasks | 598.8m CPU rem | 12.5m rem | 17.4 avg lb
Enumerated 18,751,946 programs | 191 jobs | 47 CPUs | 191 tasks | 594.9m CPU rem | 12.4m rem | 17.5 avg lb
Enumerated 19,015,761 programs | 187 jobs | 47 CPUs | 187 tasks | 591.1m CPU rem | 12.3m rem | 17.7 avg lb
Enumerated 19,405,041 programs | 184 jobs | 47 CPUs | 184 tasks | 587.1m CPU rem | 12.2m rem | 17.9 avg lb
Enumerated 19,575,762 programs | 181 jobs | 47 CPUs | 181 tasks | 579.5m CPU rem | 12.1m rem | 18.1 avg lb
Enumerated 19,840,745 programs | 180 jobs | 47 CPUs | 180 tasks | 575.5m CPU rem | 12.0m rem | 18.2 avg lb
Enumerated 20,003,504 programs | 178 jobs | 47 CPUs | 178 tasks | 571.3m CPU rem | 11.9m rem | 18.4 avg lb
Enumerated 20,108,434 programs | 177 jobs | 47 CPUs | 177 tasks | 567.2m CPU rem | 11.8m rem | 18.6 avg lb
Enumerated 20,346,735 programs | 176 jobs | 47 CPUs | 176 tasks | 563.0m CPU rem | 11.7m rem | 18.8 avg lb
Enumerated 20,486,616 programs | 173 jobs | 47 CPUs | 173 tasks | 551.7m CPU rem | 11.5m rem | 18.9 avg lb
Enumerated 20,564,590 programs | 173 jobs | 47 CPUs | 173 tasks | 547.5m CPU rem | 11.4m rem | 19.0 avg lb
Enumerated 20,660,049 programs | 172 jobs | 47 CPUs | 172 tasks | 542.8m CPU rem | 11.3m rem | 19.1 avg lb
Enumerated 20,799,720 programs | 171 jobs | 47 CPUs | 171 tasks | 537.9m CPU rem | 11.2m rem | 19.2 avg lb
Enumerated 21,008,556 programs | 171 jobs | 47 CPUs | 171 tasks | 533.8m CPU rem | 11.1m rem | 19.3 avg lb
Enumerated 21,158,510 programs | 170 jobs | 47 CPUs | 170 tasks | 529.3m CPU rem | 11.0m rem | 19.4 avg lb
Enumerated 21,203,848 programs | 170 jobs | 47 CPUs | 170 tasks | 524.8m CPU rem | 10.9m rem | 19.5 avg lb
Enumerated 21,480,750 programs | 169 jobs | 47 CPUs | 169 tasks | 520.7m CPU rem | 10.8m rem | 19.6 avg lb
Enumerated 21,562,059 programs | 169 jobs | 47 CPUs | 169 tasks | 515.4m CPU rem | 10.7m rem | 19.7 avg lb
Enumerated 21,767,607 programs | 168 jobs | 47 CPUs | 168 tasks | 511.4m CPU rem | 10.7m rem | 19.8 avg lb
Enumerated 22,008,822 programs | 168 jobs | 47 CPUs | 168 tasks | 506.6m CPU rem | 10.6m rem | 19.9 avg lb
Enumerated 22,104,888 programs | 168 jobs | 47 CPUs | 168 tasks | 502.4m CPU rem | 10.5m rem | 20.0 avg lb
Enumerated 22,425,591 programs | 167 jobs | 47 CPUs | 167 tasks | 497.5m CPU rem | 10.4m rem | 20.1 avg lb
Enumerated 22,692,336 programs | 166 jobs | 47 CPUs | 166 tasks | 493.3m CPU rem | 10.3m rem | 20.2 avg lb
Enumerated 22,951,839 programs | 166 jobs | 47 CPUs | 166 tasks | 489.1m CPU rem | 10.2m rem | 20.3 avg lb
Enumerated 23,000,909 programs | 166 jobs | 47 CPUs | 166 tasks | 484.3m CPU rem | 10.1m rem | 20.3 avg lb
Enumerated 23,185,895 programs | 166 jobs | 47 CPUs | 166 tasks | 480.1m CPU rem | 10.0m rem | 20.4 avg lb
Enumerated 23,335,861 programs | 165 jobs | 47 CPUs | 165 tasks | 476.0m CPU rem | 9.9m rem | 20.5 avg lb
Enumerated 23,486,183 programs | 165 jobs | 47 CPUs | 165 tasks | 471.2m CPU rem | 9.8m rem | 20.5 avg lb
Enumerated 23,619,707 programs | 165 jobs | 47 CPUs | 165 tasks | 467.1m CPU rem | 9.7m rem | 20.6 avg lb
Enumerated 23,846,980 programs | 164 jobs | 47 CPUs | 164 tasks | 459.6m CPU rem | 9.6m rem | 20.7 avg lb
Enumerated 23,941,072 programs | 164 jobs | 47 CPUs | 164 tasks | 454.6m CPU rem | 9.5m rem | 20.7 avg lb
Enumerated 24,248,855 programs | 163 jobs | 47 CPUs | 163 tasks | 450.1m CPU rem | 9.4m rem | 20.8 avg lb
Enumerated 24,649,916 programs | 162 jobs | 47 CPUs | 162 tasks | 443.1m CPU rem | 9.2m rem | 20.9 avg lb
Enumerated 25,001,274 programs | 161 jobs | 47 CPUs | 161 tasks | 438.9m CPU rem | 9.1m rem | 21.0 avg lb
Enumerated 25,178,562 programs | 160 jobs | 47 CPUs | 160 tasks | 434.7m CPU rem | 9.1m rem | 21.1 avg lb
Enumerated 25,441,069 programs | 159 jobs | 47 CPUs | 159 tasks | 430.5m CPU rem | 9.0m rem | 21.2 avg lb
Enumerated 25,649,079 programs | 157 jobs | 47 CPUs | 157 tasks | 424.7m CPU rem | 8.8m rem | 21.2 avg lb
Enumerated 25,806,602 programs | 155 jobs | 47 CPUs | 155 tasks | 419.9m CPU rem | 8.7m rem | 21.3 avg lb
Enumerated 25,990,302 programs | 154 jobs | 47 CPUs | 154 tasks | 415.0m CPU rem | 8.6m rem | 21.4 avg lb
Enumerated 26,217,730 programs | 154 jobs | 47 CPUs | 154 tasks | 405.5m CPU rem | 8.4m rem | 21.4 avg lb
Enumerated 26,461,794 programs | 153 jobs | 47 CPUs | 153 tasks | 401.1m CPU rem | 8.4m rem | 21.5 avg lb
Enumerated 26,694,933 programs | 152 jobs | 47 CPUs | 152 tasks | 397.0m CPU rem | 8.3m rem | 21.6 avg lb
Enumerated 26,769,974 programs | 152 jobs | 47 CPUs | 152 tasks | 392.1m CPU rem | 8.2m rem | 21.7 avg lb
Enumerated 27,039,500 programs | 151 jobs | 47 CPUs | 151 tasks | 384.0m CPU rem | 8.0m rem | 21.7 avg lb
Enumerated 27,536,347 programs | 148 jobs | 47 CPUs | 148 tasks | 378.5m CPU rem | 7.9m rem | 21.8 avg lb
Enumerated 27,894,815 programs | 148 jobs | 47 CPUs | 148 tasks | 374.3m CPU rem | 7.8m rem | 21.9 avg lb
Enumerated 28,054,749 programs | 147 jobs | 47 CPUs | 147 tasks | 369.5m CPU rem | 7.7m rem | 22.0 avg lb
Enumerated 28,310,513 programs | 146 jobs | 47 CPUs | 146 tasks | 364.4m CPU rem | 7.6m rem | 22.0 avg lb
Enumerated 28,427,184 programs | 145 jobs | 47 CPUs | 145 tasks | 360.0m CPU rem | 7.5m rem | 22.1 avg lb
Enumerated 28,939,909 programs | 142 jobs | 47 CPUs | 142 tasks | 355.8m CPU rem | 7.4m rem | 22.2 avg lb
Enumerated 28,968,637 programs | 142 jobs | 47 CPUs | 142 tasks | 349.7m CPU rem | 7.3m rem | 22.2 avg lb
Enumerated 29,189,351 programs | 142 jobs | 47 CPUs | 142 tasks | 345.6m CPU rem | 7.2m rem | 22.3 avg lb
Enumerated 29,533,190 programs | 140 jobs | 47 CPUs | 140 tasks | 341.2m CPU rem | 7.1m rem | 22.3 avg lb
Enumerated 29,791,192 programs | 137 jobs | 47 CPUs | 137 tasks | 337.0m CPU rem | 7.0m rem | 22.4 avg lb
Enumerated 29,935,002 programs | 135 jobs | 47 CPUs | 135 tasks | 329.1m CPU rem | 6.9m rem | 22.5 avg lb
Enumerated 30,405,938 programs | 133 jobs | 47 CPUs | 133 tasks | 325.0m CPU rem | 6.8m rem | 22.6 avg lb
Enumerated 30,487,809 programs | 132 jobs | 47 CPUs | 132 tasks | 315.2m CPU rem | 6.6m rem | 22.6 avg lb
Enumerated 31,120,801 programs | 129 jobs | 47 CPUs | 129 tasks | 308.3m CPU rem | 6.4m rem | 22.8 avg lb
Enumerated 31,184,635 programs | 129 jobs | 47 CPUs | 129 tasks | 302.8m CPU rem | 6.3m rem | 22.9 avg lb
Enumerated 31,549,277 programs | 127 jobs | 47 CPUs | 127 tasks | 297.1m CPU rem | 6.2m rem | 23.0 avg lb
Enumerated 31,655,102 programs | 127 jobs | 47 CPUs | 127 tasks | 291.2m CPU rem | 6.1m rem | 23.1 avg lb
Enumerated 31,841,965 programs | 126 jobs | 47 CPUs | 126 tasks | 285.8m CPU rem | 6.0m rem | 23.1 avg lb
Enumerated 32,096,585 programs | 126 jobs | 47 CPUs | 126 tasks | 281.2m CPU rem | 5.9m rem | 23.2 avg lb
Enumerated 32,465,343 programs | 124 jobs | 47 CPUs | 124 tasks | 275.2m CPU rem | 5.7m rem | 23.3 avg lb
Enumerated 32,733,268 programs | 121 jobs | 47 CPUs | 121 tasks | 270.4m CPU rem | 5.6m rem | 23.4 avg lb
Enumerated 32,924,748 programs | 120 jobs | 47 CPUs | 120 tasks | 265.8m CPU rem | 5.5m rem | 23.5 avg lb
Enumerated 33,204,479 programs | 117 jobs | 47 CPUs | 117 tasks | 255.4m CPU rem | 5.3m rem | 23.6 avg lb
Enumerated 33,432,965 programs | 115 jobs | 47 CPUs | 115 tasks | 250.7m CPU rem | 5.2m rem | 23.6 avg lb
Enumerated 33,742,553 programs | 113 jobs | 47 CPUs | 113 tasks | 244.7m CPU rem | 5.1m rem | 23.7 avg lb
Enumerated 33,894,281 programs | 111 jobs | 47 CPUs | 111 tasks | 239.5m CPU rem | 5.0m rem | 23.8 avg lb
Enumerated 34,364,236 programs | 108 jobs | 47 CPUs | 108 tasks | 234.6m CPU rem | 4.9m rem | 23.9 avg lb
Enumerated 34,461,546 programs | 107 jobs | 47 CPUs | 107 tasks | 230.1m CPU rem | 4.8m rem | 23.9 avg lb
Enumerated 34,732,600 programs | 105 jobs | 47 CPUs | 105 tasks | 225.4m CPU rem | 4.7m rem | 24.1 avg lb
Enumerated 35,106,861 programs | 102 jobs | 47 CPUs | 102 tasks | 220.8m CPU rem | 4.6m rem | 24.2 avg lb
Enumerated 35,269,483 programs | 101 jobs | 47 CPUs | 101 tasks | 215.1m CPU rem | 4.5m rem | 24.3 avg lb
Enumerated 35,375,849 programs | 99 jobs | 47 CPUs | 99 tasks | 207.8m CPU rem | 4.3m rem | 24.3 avg lb
Enumerated 35,720,451 programs | 97 jobs | 47 CPUs | 97 tasks | 202.9m CPU rem | 4.2m rem | 24.5 avg lb
Enumerated 35,933,615 programs | 95 jobs | 47 CPUs | 95 tasks | 198.1m CPU rem | 4.1m rem | 24.5 avg lb
Enumerated 36,091,635 programs | 94 jobs | 47 CPUs | 94 tasks | 192.9m CPU rem | 4.0m rem | 24.6 avg lb
Enumerated 36,705,587 programs | 89 jobs | 47 CPUs | 89 tasks | 188.2m CPU rem | 3.9m rem | 24.8 avg lb
Enumerated 36,748,929 programs | 88 jobs | 47 CPUs | 88 tasks | 183.9m CPU rem | 3.8m rem | 24.9 avg lb
Enumerated 36,985,707 programs | 86 jobs | 47 CPUs | 86 tasks | 179.4m CPU rem | 3.7m rem | 25.0 avg lb
Enumerated 37,189,688 programs | 83 jobs | 47 CPUs | 83 tasks | 174.6m CPU rem | 3.6m rem | 25.1 avg lb
Enumerated 37,576,259 programs | 79 jobs | 47 CPUs | 79 tasks | 169.4m CPU rem | 3.5m rem | 25.3 avg lb
Enumerated 37,782,755 programs | 77 jobs | 47 CPUs | 77 tasks | 165.0m CPU rem | 3.4m rem | 25.5 avg lb
Enumerated 38,111,396 programs | 74 jobs | 47 CPUs | 74 tasks | 160.3m CPU rem | 3.3m rem | 25.7 avg lb
Enumerated 38,320,622 programs | 73 jobs | 47 CPUs | 73 tasks | 155.8m CPU rem | 3.2m rem | 25.9 avg lb
Enumerated 38,551,416 programs | 73 jobs | 47 CPUs | 73 tasks | 150.7m CPU rem | 3.1m rem | 26.0 avg lb
Enumerated 38,903,307 programs | 72 jobs | 47 CPUs | 72 tasks | 144.0m CPU rem | 3.0m rem | 26.3 avg lb
Enumerated 39,035,467 programs | 70 jobs | 47 CPUs | 70 tasks | 139.9m CPU rem | 2.9m rem | 26.4 avg lb
Enumerated 39,246,428 programs | 69 jobs | 47 CPUs | 69 tasks | 135.7m CPU rem | 2.8m rem | 26.6 avg lb
Enumerated 39,333,626 programs | 68 jobs | 47 CPUs | 68 tasks | 130.6m CPU rem | 2.7m rem | 26.6 avg lb
Enumerated 39,662,876 programs | 66 jobs | 47 CPUs | 66 tasks | 126.4m CPU rem | 2.6m rem | 26.8 avg lb
Enumerated 39,835,642 programs | 64 jobs | 47 CPUs | 64 tasks | 122.0m CPU rem | 2.5m rem | 26.9 avg lb
Enumerated 39,975,080 programs | 64 jobs | 47 CPUs | 64 tasks | 115.9m CPU rem | 2.4m rem | 27.0 avg lb
Enumerated 40,092,563 programs | 64 jobs | 47 CPUs | 64 tasks | 111.8m CPU rem | 2.3m rem | 27.1 avg lb
Enumerated 40,488,001 programs | 62 jobs | 47 CPUs | 62 tasks | 107.3m CPU rem | 2.2m rem | 27.3 avg lb
Enumerated 40,705,031 programs | 60 jobs | 47 CPUs | 60 tasks | 101.6m CPU rem | 2.1m rem | 27.5 avg lb
Enumerated 40,903,877 programs | 57 jobs | 47 CPUs | 57 tasks | 97.5m CPU rem | 2.0m rem | 27.8 avg lb
Enumerated 41,269,095 programs | 54 jobs | 47 CPUs | 54 tasks | 90.5m CPU rem | 1.9m rem | 28.1 avg lb
Enumerated 41,450,150 programs | 54 jobs | 47 CPUs | 54 tasks | 85.4m CPU rem | 1.8m rem | 28.4 avg lb
Enumerated 41,608,865 programs | 52 jobs | 47 CPUs | 52 tasks | 80.3m CPU rem | 1.7m rem | 28.6 avg lb
Enumerated 41,996,698 programs | 49 jobs | 47 CPUs | 49 tasks | 74.9m CPU rem | 1.6m rem | 29.1 avg lb
Enumerated 42,078,444 programs | 48 jobs | 47 CPUs | 48 tasks | 70.9m CPU rem | 1.5m rem | 29.8 avg lb
Enumerated 42,241,971 programs | 48 jobs | 47 CPUs | 48 tasks | 66.1m CPU rem | 1.4m rem | 30.0 avg lb
Enumerated 42,792,701 programs | 44 jobs | 47 CPUs | 44 tasks | 62.2m CPU rem | 1.4m rem | 30.6 avg lb
Enumerated 43,006,561 programs | 43 jobs | 47 CPUs | 43 tasks | 58.5m CPU rem | 1.3m rem | 31.0 avg lb
Enumerated 43,391,513 programs | 40 jobs | 45 CPUs | 40 tasks | 54.6m CPU rem | 1.3m rem | 31.4 avg lb
Enumerated 43,723,093 programs | 38 jobs | 47 CPUs | 38 tasks | 51.4m CPU rem | 1.3m rem | 31.9 avg lb
Enumerated 43,964,168 programs | 37 jobs | 47 CPUs | 37 tasks | 46.5m CPU rem | 1.2m rem | 32.3 avg lb
Enumerated 44,152,271 programs | 36 jobs | 47 CPUs | 36 tasks | 43.5m CPU rem | 1.2m rem | 32.6 avg lb
Enumerated 44,390,773 programs | 32 jobs | 44 CPUs | 32 tasks | 39.7m CPU rem | 1.2m rem | 32.9 avg lb
Enumerated 44,738,877 programs | 31 jobs | 46 CPUs | 31 tasks | 35.2m CPU rem | 1.1m rem | 33.4 avg lb
Enumerated 45,046,378 programs | 29 jobs | 47 CPUs | 29 tasks | 31.7m CPU rem | 1.1m rem | 33.9 avg lb
Enumerated 45,319,912 programs | 26 jobs | 47 CPUs | 26 tasks | 29.4m CPU rem | 1.1m rem | 34.7 avg lb
Enumerated 45,424,725 programs | 26 jobs | 47 CPUs | 26 tasks | 26.4m CPU rem | 1.0m rem | 34.8 avg lb
Enumerated 45,810,578 programs | 25 jobs | 44 CPUs | 25 tasks | 24.1m CPU rem | 0.9m rem | 35.4 avg lb
Enumerated 46,179,364 programs | 21 jobs | 47 CPUs | 21 tasks | 21.6m CPU rem | 1.0m rem | 36.5 avg lb
Enumerated 46,351,344 programs | 19 jobs | 44 CPUs | 19 tasks | 18.7m CPU rem | 0.9m rem | 37.2 avg lb
Enumerated 46,631,025 programs | 19 jobs | 44 CPUs | 19 tasks | 16.2m CPU rem | 0.8m rem | 37.5 avg lb
Enumerated 46,904,917 programs | 18 jobs | 47 CPUs | 18 tasks | 10.1m CPU rem | 0.5m rem | 38.0 avg lb
Enumerated 47,194,805 programs | 16 jobs | 47 CPUs | 16 tasks | 8.6m CPU rem | 0.5m rem | 38.8 avg lb
Enumerated 47,579,820 programs | 14 jobs | 44 CPUs | 14 tasks | 6.8m CPU rem | 0.5m rem | 39.9 avg lb
Enumerated 47,810,255 programs | 13 jobs | 42 CPUs | 13 tasks | 5.1m CPU rem | 0.4m rem | 40.6 avg lb
Enumerated 48,181,409 programs | 10 jobs | 36 CPUs | 10 tasks | 3.1m CPU rem | 0.3m rem | 42.8 avg lb
Enumerated 48,521,621 programs | 7 jobs | 35 CPUs | 7 tasks | 2.0m CPU rem | 0.3m rem | 45.7 avg lb
Enumerated 48,678,463 programs | 5 jobs | 13 CPUs | 5 tasks | 1.2m CPU rem | 0.2m rem | 48.8 avg lb
Enumerated 48,735,636 programs | 5 jobs | 9 CPUs | 5 tasks | 0.6m CPU rem | 0.1m rem | 48.8 avg lb
Enumerated 49,263,427 programs | 3 jobs | 41 CPUs | 3 tasks | 0.3m CPU rem | 0.1m rem | 52.7 avg lb
Enumerated 49,285,906 programs | 2 jobs | 39 CPUs | 2 tasks | 0.1m CPU rem | 0.0m rem | 57.0 avg lb
We enumerated this many programs, for each task:
	 [255283, 22575, 265364, 88642, 160638, 187792, 191801, 92241, 104605, 174310, 166740, 167791, 121445, 3587, 175632, 174074, 139507, 78884, 144820, 166854, 27108, 201846, 114581, 128671, 99766, 198727, 168351, 190546, 79389, 97005, 3698, 83184, 160514, 175721, 171268, 4322, 164930, 206618, 141186, 162145, 43171, 171510, 171014, 154057, 40813, 94181, 187838, 93837, 3113, 122354, 112989, 172922, 178391, 129506, 76600, 477548, 1945, 134119, 156817, 185471, 142275, 184222, 131997, 100095, 71734, 105021, 72901, 185340, 174340, 141849, 157753, 211395, 177537, 113906, 164514, 96881, 94608, 159437, 1442, 84170, 169477, 128274, 2209, 104819, 100408, 88263, 947, 81964, 159001, 96578, 68778, 108826, 154975, 158709, 9375, 104993, 84495, 95743, 189081, 119123, 80696, 168260, 501577, 182374, 112915, 113961, 91478, 181269, 61650, 122458, 201074, 94721, 3827, 135360, 69009, 112543, 103108, 88806, 162853, 103773, 189470, 89156, 190068, 104210, 164692, 89563, 82607, 163426, 10125, 155892, 103030, 112424, 107141, 83775, 156542, 175685, 114612, 74617, 177894, 701, 106971, 4118, 165853, 188980, 73843, 217489, 82317, 111780, 168080, 3607, 90409, 5621, 212080, 153048, 3609, 178793, 177729, 91878, 83571, 166805, 82532, 145062, 161245, 768, 159628, 86873, 259631, 171740, 168515, 81445, 125063, 1249, 97061, 2770, 146184, 86242, 3689, 3615, 749, 170288, 169057, 165944, 71643, 71687, 71018, 216264, 95283, 85157, 182747, 173354, 147097, 90935, 95605, 195412, 89984, 135695, 107217, 87558, 110331, 200623, 88493, 89843, 86704, 112777, 69758, 104468, 150126, 139933, 99030, 1745, 270215, 181231, 68129, 180196, 76075, 74646, 179549, 3321, 176616, 105107, 97807, 175151, 193046, 100089, 192965, 177700, 213657, 170575, 185717, 109447, 92189, 91983, 61019, 93428, 209505, 231208, 86901, 73063, 106145, 166487, 3647, 142649, 68153, 65342, 102707, 109390, 61288, 93644, 3893, 181149, 3599, 97134, 176354, 165000, 159886, 116237, 202985, 113113, 83941, 179359, 87347, 197243, 3609, 56294, 156156, 246840, 27012, 89192, 110430, 162921, 192379, 83413, 175305, 88189, 108920, 102032, 149095, 106642, 94891, 92281, 94442, 192114, 172075, 121900, 93034, 84690, 155374, 96717, 107977, 67291, 31360, 91679, 88599, 173272, 152765, 327063, 97382, 88568, 195082, 3335, 69727, 165832, 91925, 222859, 161841, 89923, 114888, 84771, 81127, 75542, 1157, 166126, 81851, 168972, 204264, 188541, 6490, 257840, 70636, 91356, 168591, 188183, 177833, 96268, 59188, 60605, 236832, 115781, 89597, 193727, 190430, 106023, 168371, 280312, 112450, 176432, 91640, 84415, 24847, 73777, 162980, 181226, 175665, 82089, 179457, 4809, 194106, 126946, 106131, 126187, 144293, 70240, 103778, 179541, 104282, 181284, 118113, 107483, 80561, 180238, 168875, 168144, 177583, 70590, 63594, 71370, 85564, 182813, 175455, 93648, 130159, 184091, 180002, 186399, 106979, 104913, 3721, 88223, 101882, 1164, 175754, 124832, 82726, 81809, 3255, 246853, 108226, 133724, 120599, 166480, 77315, 174756, 214871, 75247, 237600, 86979, 191682, 143320, 79237, 158197]
Recognizer 0 solved 53/400 tasks; total tasks solved is now 53.
Best recognizer: 0.
Currently using this much memory: 1199886336
Recognition model enumeration results for the best recognizer.
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -7.714419 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.917212 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) ; log prior = -9.613249 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (ic_compress2 $0)) ; log prior = -5.379570 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.398309 ; log likelihood = 0.000000
HIT 2013d3e2 w/ (lambda (left_half (top_half (ic_compress2 $0)))) ; log prior = -14.727959 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -16.737808 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -20.334880 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.611433 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (ic_compress2 (repeatX $0))) ; log prior = -13.861124 ; log likelihood = 0.000000
HIT 2dee498d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (rot90 $0)))) ; log prior = -15.235813 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -6.999289 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -8.710733 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.760544 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -8.156924 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -10.734234 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -5.381326 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (flipx $0))) ; log prior = -14.861800 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -8.648817 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -5.438155 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -9.720447 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -5.387941 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -9.577703 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -5.352285 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.919803 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -6.171253 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -6.353397 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -5.264512 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.639493 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -7.320694 ; log likelihood = 0.000000
HIT 7b6016b9 w/ (lambda (set_bg c3 (fillobj c2 $0))) ; log prior = -13.674055 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -6.155191 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.551550 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -18.880747 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -4.991019 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -5.444984 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -5.361300 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0))) ; log prior = -13.332817 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -5.564796 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0))) ; log prior = -9.688562 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2)) ; log prior = -9.688980 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0))) ; log prior = -10.549114 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -5.722594 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) ; log prior = -9.976758 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -6.694911 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -6.804997 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (ic_embed (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (mirrorX (mirrorY $0))) $0)) $0)) ; log prior = -20.821053 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_connectX $0) c3)) ; log prior = -11.464676 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (topcol $0))) ; log prior = -9.575171 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -5.173146 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.278816 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -7.611234 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.175531 ; log likelihood = 0.000000
Hits 53/400 tasks
Average description length of a program solving a task: 8.888927 nats
Recognition model average:  12 sec.	median: 0 	max: 198 	standard deviation 34
Cumulative results for the full ensemble of 1 recognizers: 
Frontiers discovered bottom up: 53
Total frontiers: 56
Average search time:  12 sec.	median: 0 	max: 198 	standard deviation 34
53 / 400 total hit tasks
              bottom miss  bottom hit  
top miss          347           8      
top hit            0           45      
Currently using this much memory: 1199886336
Showing the top 5 programs in each frontier being sent to the compressor:
00d62c1b
-0.06	(lambda (fillobj c4 $0))
-4.36	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (fillobj c4 $0)))
-4.36	(lambda (fillobj c4 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.38	(lambda (fillobj c4 (ic_toorigin $0)))
-4.38	(lambda (ic_toorigin (fillobj c4 $0)))

0b148d64
-0.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-4.35	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (ic_compress2 $0)))
-4.35	(lambda (ic_compress2 (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-4.38	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.39	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

1190e5a7
-1.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.13	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (ic_compress3 $0)))
-1.15	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-5.35	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_compress2 $0))))
-5.35	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (ic_compress2 (#(lambda (ic_compress2 (ic_compress3 $0))) $0))))

1cf80156
-1.95	(lambda (ic_compress2 $0))
-1.99	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-1.99	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-2.00	(lambda (#(lambda (ic_composegrowing (split8 $0))) $0))
-2.00	(lambda (#(lambda (pickcommon (split8 $0))) $0))

1f85a75f
-0.74	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-2.84	(lambda (ic_pickunique (ic_splitall $0)))
-2.85	(lambda (pickmax_neg_interior_count (ic_splitall $0)))
-2.85	(lambda (pickmax_cols (ic_splitall $0)))
-2.85	(lambda (pickmax_interior_count (ic_splitall $0)))

2013d3e2
-1.36	(lambda (left_half (top_half (ic_compress2 $0))))
-1.36	(lambda (top_half (left_half (ic_compress2 $0))))
-1.41	(lambda (left_half (top_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.41	(lambda (top_half (left_half (#(lambda (ic_composegrowing (split8 $0))) $0))))

22168020
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-8.26	(lambda (overlay $0 (ic_connectX $0)))
-8.26	(lambda (overlay (ic_connectX $0) $0))
-9.21	(lambda (swapxy (#(lambda (overlay $0 (ic_connectY $0))) (swapxy $0))))

22eb0ac0
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-8.26	(lambda (overlay $0 (ic_connectX $0)))
-8.26	(lambda (overlay (ic_connectX $0) $0))
-9.21	(lambda (swapxy (#(lambda (overlay $0 (ic_connectY $0))) (swapxy $0))))

23b5c85d
-0.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-4.35	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (ic_compress2 $0)))
-4.35	(lambda (ic_compress2 (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-4.38	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (flipx $0)))
-4.38	(lambda (flipx (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

28bf18c6
-2.27	(lambda (ic_compress2 (repeatX $0)))
-2.27	(lambda (repeatX (ic_compress2 $0)))
-2.30	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (repeatX $0)))
-2.30	(lambda (repeatX (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-2.31	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (repeatX $0)))

2dee498d
-2.14	(lambda (ic_compress2 (ic_embed $0 (swapxy $0))))
-2.17	(lambda (ic_compress2 (ic_embed $0 (rot90 $0))))
-2.17	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (swapxy $0))))
-2.19	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (swapxy $0))))
-2.20	(lambda (ic_compress2 (ic_embed $0 (rot270 $0))))

39a8645d
-0.21	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-2.32	(lambda (pickcommon (split8 $0)))
-4.44	(lambda (#(lambda (pickcommon (split8 $0))) (ic_compress2 $0)))
-4.44	(lambda (ic_compress2 (#(lambda (pickcommon (split8 $0))) $0)))
-4.48	(lambda (#(lambda (pickcommon (split8 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

3af2c5a8
-0.75	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.75	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-5.01	(lambda (flipx (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.01	(lambda (flipx (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.01	(lambda (mirrorX (mirrorY $0)))

3c9b0459
-0.12	(lambda (rot180 $0))
-4.35	(lambda (ic_compress2 (rot180 $0)))
-4.35	(lambda (rot180 (ic_compress2 $0)))
-4.38	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (rot180 $0)))
-4.38	(lambda (rot180 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

40853293
-0.71	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.71	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-5.03	(lambda (ic_toorigin (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.03	(lambda (ic_toorigin (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-10.41	(lambda (ic_composegrowing (mklist $0 (ic_connectY $0))))

4258a5f9
-0.14	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5))
-3.42	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (rarestcol $0)))
-3.42	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (topcol $0)))
-4.44	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)))
-4.44	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0) c5))

445eab21
-1.02	(lambda (countToXY (countColours $0) (topcol $0)))
-1.39	(lambda (#(lambda (mirrorX (mirrorY $0))) (colourPixel (topcol $0))))
-1.39	(lambda (#(lambda (mirrorY (mirrorX $0))) (colourPixel (topcol $0))))
-2.24	(lambda (#(lambda (colourHull (topcol $0))) $0 (ic_center $0)))
-4.68	(lambda (colourHull (topcol $0) (ic_center $0)))

496994bd
-0.12	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-4.38	(lambda (#(lambda (overlay $0 (flipx $0))) (flipx $0)))
-4.38	(lambda (flipx (#(lambda (overlay $0 (flipx $0))) $0)))
-4.39	(lambda (#(lambda (overlay $0 (flipx $0))) (rot180 $0)))
-4.39	(lambda (rot180 (#(lambda (overlay $0 (flipx $0))) $0)))

4c4377d9
-1.40	(lambda (mirrorY (flipx $0)))
-1.41	(lambda (#(lambda (flipx (mirrorY $0))) (flipx $0)))
-1.41	(lambda (mirrorY (#(lambda (overlay $0 (flipx $0))) $0)))
-1.41	(lambda (#(lambda (flipx (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-5.67	(lambda (mirrorY (#(lambda (overlay (ic_connectY $0) $0)) (flipx $0))))

5582e5ca
-0.18	(lambda (#(lambda (colourHull (topcol $0))) $0 $0))
-2.62	(lambda (colourHull (topcol $0) $0))
-4.42	(lambda (#(lambda (colourHull (topcol $0))) $0 (ic_compress2 $0)))
-4.42	(lambda (#(lambda (colourHull (topcol $0))) (ic_compress2 $0) $0))
-4.44	(lambda (#(lambda (colourHull (topcol $0))) $0 (swapxy $0)))

6150a2bd
-0.12	(lambda (rot180 $0))
-4.39	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-4.39	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (rot180 $0)))
-4.39	(lambda (rot180 (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.39	(lambda (rot180 (#(lambda (overlay (ic_connectY $0) $0)) $0)))

62c24649
-0.75	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.75	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-4.98	(lambda (#(lambda (mirrorX (mirrorY $0))) (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (#(lambda (mirrorX (mirrorY $0))) $0)))
-4.98	(lambda (#(lambda (mirrorY (mirrorX $0))) (ic_compress2 $0)))

67a3c6ac
-0.74	(lambda (flipy $0))
-0.75	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-4.98	(lambda (flipy (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (flipy $0)))
-4.99	(lambda (#(lambda (ic_compress2 (flipy $0))) (ic_compress2 $0)))

67e8384a
-0.75	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.75	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-4.98	(lambda (#(lambda (mirrorX (mirrorY $0))) (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (#(lambda (mirrorX (mirrorY $0))) $0)))
-4.98	(lambda (#(lambda (mirrorY (mirrorX $0))) (ic_compress2 $0)))

68b16354
-0.75	(lambda (flipx $0))
-0.75	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-4.98	(lambda (flipx (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (flipx $0)))
-4.99	(lambda (#(lambda (overlay $0 (flipx $0))) (ic_compress2 $0)))

6d0aefbc
-0.12	(lambda (mirrorX $0))
-4.35	(lambda (ic_compress2 (mirrorX $0)))
-4.35	(lambda (mirrorX (ic_compress2 $0)))
-4.39	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (mirrorX $0)))
-4.39	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorX $0)))

6fa7a44f
-0.75	(lambda (mirrorY $0))
-0.75	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-4.98	(lambda (ic_compress2 (mirrorY $0)))
-4.98	(lambda (mirrorY (ic_compress2 $0)))
-4.98	(lambda (#(lambda (flipx (mirrorY $0))) (ic_compress2 $0)))

72ca375d
-0.12	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-4.35	(lambda (ic_compress2 (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-4.39	(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-4.39	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-4.39	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))

7468f01a
-0.12	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-4.34	(lambda (flipy (ic_compress2 $0)))
-4.34	(lambda (ic_compress2 (flipy $0)))
-4.35	(lambda (#(lambda (ic_compress2 (flipy $0))) (ic_compress2 $0)))
-4.35	(lambda (ic_compress2 (#(lambda (ic_compress2 (flipy $0))) $0)))

746b3537
-0.74	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-0.75	(lambda (ic_compress3 $0))
-4.98	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.99	(lambda (ic_compress2 (ic_compress3 $0)))

74dd1130
-0.12	(lambda (swapxy $0))
-4.35	(lambda (ic_compress2 (swapxy $0)))
-4.35	(lambda (swapxy (ic_compress2 $0)))
-4.38	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (swapxy $0)))
-4.38	(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

7b6016b9
-0.24	(lambda (set_bg c3 (fillobj c2 $0)))
-2.62	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (fillobj c2 $0) c3 c3))
-2.65	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (fillobj c2 $0) c6 c3))
-2.68	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (fillobj c2 $0) c9 c3))

8be77c9e
-0.75	(lambda (mirrorY $0))
-0.75	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.01	(lambda (flipx (mirrorY $0)))
-5.01	(lambda (flipx (#(lambda (flipx (mirrorY $0))) $0)))
-5.02	(lambda (mirrorY (#(lambda (overlay $0 (ic_connectY $0))) $0)))

90c28cc7
-0.12	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-4.35	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_compress2 $0)))
-4.35	(lambda (ic_compress2 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.37	(lambda (ic_compress2 (ic_compress3 $0)))
-4.37	(lambda (ic_compress3 (ic_compress2 $0)))

9565186b
-0.38	(lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-2.73	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5 c5))
-2.79	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c7 c5))
-2.79	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c6 c5))
-2.82	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c8 c5))

9dfd6313
-0.12	(lambda (swapxy $0))
-4.35	(lambda (ic_compress2 (swapxy $0)))
-4.35	(lambda (swapxy (ic_compress2 $0)))
-4.38	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (swapxy $0)))
-4.38	(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

a416b8f3
-0.12	(lambda (repeatX $0))
-4.39	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (repeatX $0)))
-4.39	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (repeatX $0)))
-4.39	(lambda (repeatX (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.39	(lambda (repeatX (#(lambda (overlay (ic_connectY $0) $0)) $0)))

a5313dff
-0.15	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0))
-2.49	(lambda (fillobj c1 $0))
-4.45	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.45	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.46	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_toorigin $0)))

a740d043
-0.15	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0)))
-2.24	(lambda (ic_composegrowing (ic_splitall (ic_erasecol c1 $0))))
-3.40	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol (topcol $0) $0)))

a87f7484
-0.72	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.78	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-4.95	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (ic_compress2 $0)))
-4.95	(lambda (ic_compress2 (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-4.98	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

aabf363d
-0.11	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0)))
-4.37	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (swapxy $0))))
-4.38	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (rot180 $0))))
-4.38	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))))
-4.40	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (rot90 $0))))

b1948b0a
-0.14	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2))
-3.35	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 (rarestcol $0) c2))
-4.38	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (ic_compress2 $0) c6 c2))
-4.38	(lambda (ic_compress2 (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2)))
-4.41	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (overlay $0 (ic_connectY $0))) $0) c6 c2))

b9b7f026
-0.85	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0)))
-0.89	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectY $0)))
-3.30	(lambda (colourPixel (rarestcol (ic_connectX $0))))
-3.31	(lambda (colourPixel (topcol (ic_connectX $0))))
-3.34	(lambda (colourPixel (rarestcol (ic_connectY $0))))

be94b721
-0.72	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.78	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-4.95	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (ic_compress2 $0)))
-4.95	(lambda (ic_compress2 (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-4.98	(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

c8f0f002
-0.12	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
-4.35	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (ic_compress2 $0) c7 c5))
-4.38	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)))
-4.38	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0) c7 c5))
-4.39	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (overlay $0 (ic_connectY $0))) $0) c7 c5))

c9e6f938
-0.11	(lambda (mirrorX $0))
-4.39	(lambda (flipy (mirrorX $0)))
-4.42	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (mirrorX $0)))
-4.42	(lambda (mirrorX (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.42	(lambda (#(lambda (ic_filtercol (topcol $0) $0)) (mirrorX $0)))

ce22a75a
-0.41	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1))
-2.36	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (ic_makeborder $0)))
-2.36	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (ic_makeborder $0)))
-2.39	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_makeborder $0)))
-4.68	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) (#(lambda (overlay (ic_connectY $0) $0)) $0) c1))

d037b0a7
-1.15	(lambda (top_half (#(lambda (overlay $0 (ic_connectY $0))) (mirrorY $0))))
-1.15	(lambda (top_half (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))))
-1.15	(lambda (top_half (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (flipx (mirrorY $0))) $0))))
-4.38	(lambda (ic_embed (#(lambda (overlay $0 (ic_connectY $0))) (mirrorY $0)) $0))
-4.38	(lambda (ic_embed (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0)) $0))

d5d6de2d
-0.99	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_connectX $0) c3))
-1.01	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_interior $0) c3))
-3.36	(lambda (ic_erasecol c2 (fillobj c3 $0)))
-3.38	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (get_bg c5 $0) c3))
-3.39	(lambda (ic_filtercol c3 (fillobj c3 $0)))

d631b094
-0.74	(lambda (countToY (countPixels $0) (rarestcol $0)))
-0.75	(lambda (countToY (countPixels $0) (topcol $0)))
-4.99	(lambda (countToY (countPixels $0) (topcol (ic_compress2 $0))))
-5.02	(lambda (countToY (countPixels $0) (topcol (flipx $0))))
-5.02	(lambda (countToY (countPixels (flipx $0)) (topcol $0)))

d9fac9be
-0.80	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-0.80	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-2.91	(lambda (pickcommon (split8 $0)))
-5.03	(lambda (#(lambda (pickcommon (split8 $0))) (ic_compress2 $0)))
-5.03	(lambda (ic_compress2 (#(lambda (pickcommon (split8 $0))) $0)))

ded97339
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-10.40	(lambda (ic_composegrowing (mklist $0 (ic_connectY $0))))
-10.40	(lambda (ic_composegrowing (mklist (ic_connectY $0) $0)))
-12.46	(lambda (ic_composegrowing (lcons $0 (split8 (ic_connectY $0)))))

e3497940
-0.81	(lambda (left_half (overlay $0 (flipy $0))))
-0.81	(lambda (left_half (overlay (flipy $0) $0)))
-2.91	(lambda (left_half (ic_composegrowing (mklist $0 (flipy $0)))))
-2.91	(lambda (left_half (ic_composegrowing (mklist (flipy $0) $0))))

eb5a1d5d
-0.74	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-0.76	(lambda (ic_compress3 $0))
-4.98	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_compress2 $0)))
-4.98	(lambda (ic_compress2 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.99	(lambda (ic_compress2 (ic_compress3 $0)))

ed36ccf7
-0.12	(lambda (rot90 $0))
-4.35	(lambda (flipx (swapxy $0)))
-4.37	(lambda (swapxy (flipy $0)))
-4.42	(lambda (rot180 (rot270 $0)))
-4.42	(lambda (rot270 (rot180 $0)))

f25ffba3
-0.12	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-4.35	(lambda (ic_compress2 (#(lambda (overlay $0 (flipx $0))) $0)))
-4.38	(lambda (#(lambda (overlay $0 (flipx $0))) (flipx $0)))
-4.38	(lambda (flipx (#(lambda (overlay $0 (flipx $0))) $0)))
-4.39	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

Compression message saved to: compressionMessages/2023-04-15T02:42:10.991765
Compression backend will run for most 99 iterations
Total number of candidates: 5493
Constructed version spaces and coalesced candidates in 3.71162s.
Trimmed down the beam, have only 277 best candidates
Rewrote topK in 8.16604s.
Initial score: -540.038062
Scored candidates in 12.1269s.
Improved score to -534.542090 (dScore=5.495972) w/ new primitive
	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) : grid -> grid
rewrote all of the frontiers in 6.69307s.
Completed one step of memory consolidation in 31.7053s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
  (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0))
Total number of candidates: 6406
Constructed version spaces and coalesced candidates in 3.78316s.
Trimmed down the beam, have only 280 best candidates
Rewrote topK in 7.8677s.
Initial score: -535.215493
Scored candidates in 12.506s.
Improved score to -532.879189 (dScore=2.336304) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) : grid -> grid
rewrote all of the frontiers in 6.1553s.
Completed one step of memory consolidation in 31.338s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
Total number of candidates: 5709
Constructed version spaces and coalesced candidates in 3.78506s.
Trimmed down the beam, have only 279 best candidates
Rewrote topK in 7.66602s.
Initial score: -533.745053
Scored candidates in 12.7897s.
Improved score to -531.419632 (dScore=2.325421) w/ new primitive
	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) : grid -> grid
rewrote all of the frontiers in 6.18934s.
Completed one step of memory consolidation in 31.421s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))
Total number of candidates: 5536
Constructed version spaces and coalesced candidates in 3.82839s.
Trimmed down the beam, have only 279 best candidates
Rewrote topK in 7.62966s.
Initial score: -532.339404
Scored candidates in 12.7794s.
Improved score to -530.633766 (dScore=1.705639) w/ new primitive
	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) : grid -> colour -> grid
rewrote all of the frontiers in 6.297s.
Completed one step of memory consolidation in 31.5872s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (fillobj c2 $0) c3))
  (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2))
Total number of candidates: 5413
Constructed version spaces and coalesced candidates in 3.4755s.
Trimmed down the beam, have only 278 best candidates
Rewrote topK in 7.22199s.
Initial score: -531.412978
Scored candidates in 13.0791s.
Improved score to -530.601458 (dScore=0.811520) w/ new primitive
	#(lambda (colourPixel (topcol $0))) : grid -> grid
rewrote all of the frontiers in 5.86455s.
Completed one step of memory consolidation in 30.6108s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (colourPixel (topcol $0))) $0)))
Total number of candidates: 5399
Constructed version spaces and coalesced candidates in 3.37729s.
Trimmed down the beam, have only 276 best candidates
Rewrote topK in 7.1681s.
Initial score: -531.352211
Scored candidates in 13.2556s.
Improved score to -531.036028 (dScore=0.316183) w/ new primitive
	#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.53134s.
Completed one step of memory consolidation in 30.2785s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5364
Constructed version spaces and coalesced candidates in 3.27687s.
Trimmed down the beam, have only 275 best candidates
Rewrote topK in 7.0851s.
Initial score: -531.789399
Scored candidates in 13.4006s.
Improved score to -531.596858 (dScore=0.192541) w/ new primitive
	#(lambda (lambda (mklist $0 ($1 ic_connectY)))) : ((grid -> grid) -> grid) -> grid -> list(grid)
rewrote all of the frontiers in 5.42149s.
Completed one step of memory consolidation in 30.0936s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5364
Constructed version spaces and coalesced candidates in 3.46435s.
Trimmed down the beam, have only 274 best candidates
Rewrote topK in 7.1533s.
Initial score: -532.365873
Scored candidates in 13.3774s.
Improved score to -532.176854 (dScore=0.189018) w/ new primitive
	#(lambda (lambda (mklist ($0 $1) $1))) : grid -> (grid -> grid) -> list(grid)
rewrote all of the frontiers in 5.54576s.
Completed one step of memory consolidation in 30.5013s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5308
Constructed version spaces and coalesced candidates in 3.37283s.
Trimmed down the beam, have only 274 best candidates
Rewrote topK in 7.11108s.
Initial score: -532.950176
Scored candidates in 13.6621s.
Improved score to -532.742936 (dScore=0.207239) w/ new primitive
	#(lambda (lambda (mklist $1 ($0 $1)))) : grid -> (grid -> grid) -> list(grid)
rewrote all of the frontiers in 5.46576s.
Completed one step of memory consolidation in 30.566s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5143
Constructed version spaces and coalesced candidates in 3.39121s.
Trimmed down the beam, have only 275 best candidates
Rewrote topK in 6.93922s.
Initial score: -533.520364
Scored candidates in 13.6381s.
Improved score to -533.279235 (dScore=0.241129) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 $1)))) $1 ($0 ic_connectY)))) : grid -> ((grid -> grid) -> grid -> grid) -> list(grid)
rewrote all of the frontiers in 5.4564s.
Completed one step of memory consolidation in 30.348s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5109
Constructed version spaces and coalesced candidates in 3.31505s.
Trimmed down the beam, have only 274 best candidates
Rewrote topK in 7.00702s.
Initial score: -534.058932
Scored candidates in 13.7794s.
Improved score to -533.902739 (dScore=0.156192) w/ new primitive
	#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) : grid -> ((grid -> grid) -> grid) -> list(grid)
rewrote all of the frontiers in 5.47322s.
Completed one step of memory consolidation in 30.536s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5056
Constructed version spaces and coalesced candidates in 3.25666s.
Trimmed down the beam, have only 274 best candidates
Rewrote topK in 6.86665s.
Initial score: -534.691883
Scored candidates in 13.7634s.
Improved score to -534.429599 (dScore=0.262284) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1)))) : grid -> (grid -> (grid -> grid) -> grid) -> list(grid)
rewrote all of the frontiers in 5.41039s.
Completed one step of memory consolidation in 30.1943s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5020
Constructed version spaces and coalesced candidates in 3.39399s.
Trimmed down the beam, have only 275 best candidates
Rewrote topK in 7.0545s.
Initial score: -535.220434
Scored candidates in 13.9509s.
Improved score to -534.951595 (dScore=0.268839) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $1 ($0 ic_connectY)))) : grid -> ((grid -> grid) -> grid -> grid) -> list(grid)
rewrote all of the frontiers in 5.40424s.
Completed one step of memory consolidation in 30.7517s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5020
Constructed version spaces and coalesced candidates in 3.25545s.
Trimmed down the beam, have only 274 best candidates
Rewrote topK in 6.97257s.
Initial score: -535.745347
Scored candidates in 14.0683s.
Improved score to -535.569985 (dScore=0.175362) w/ new primitive
	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $0 ($1 (lambda (ic_connectY $0)))))) : ((grid -> grid) -> grid -> grid) -> grid -> list(grid)
rewrote all of the frontiers in 5.45191s.
Completed one step of memory consolidation in 30.6758s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5020
Constructed version spaces and coalesced candidates in 3.47906s.
Trimmed down the beam, have only 273 best candidates
Rewrote topK in 6.99835s.
Initial score: -536.367295
Scored candidates in 14.0492s.
Improved score to -536.221165 (dScore=0.146130) w/ new primitive
	#(lambda (rarestcol (rot180 $0))) : grid -> colour
rewrote all of the frontiers in 5.36627s.
Completed one step of memory consolidation in 30.827s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5006
Constructed version spaces and coalesced candidates in 3.36585s.
Trimmed down the beam, have only 272 best candidates
Rewrote topK in 6.86271s.
Initial score: -537.013165
Scored candidates in 14.2112s.
Improved score to -536.976766 (dScore=0.036399) w/ new primitive
	#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) : grid -> grid
rewrote all of the frontiers in 5.4315s.
Completed one step of memory consolidation in 30.7871s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5241
Constructed version spaces and coalesced candidates in 3.28979s.
Trimmed down the beam, have only 271 best candidates
Rewrote topK in 6.91991s.
Initial score: -537.771430
Scored candidates in 14.4239s.
Improved score to -535.255932 (dScore=2.515499) w/ new primitive
	#(lambda (overlay (flipy $0))) : grid -> grid -> grid
rewrote all of the frontiers in 5.39512s.
Completed one step of memory consolidation in 30.976s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0)))
Total number of candidates: 5237
Constructed version spaces and coalesced candidates in 3.26884s.
Trimmed down the beam, have only 271 best candidates
Rewrote topK in 6.90514s.
Initial score: -536.051333
Scored candidates in 14.8521s.
Improved score to -535.979844 (dScore=0.071489) w/ new primitive
	#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) : grid -> colour -> colour -> grid
rewrote all of the frontiers in 5.39687s.
Completed one step of memory consolidation in 31.3932s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2))
Total number of candidates: 5092
Constructed version spaces and coalesced candidates in 2.96021s.
Trimmed down the beam, have only 270 best candidates
Rewrote topK in 6.72948s.
Initial score: -536.724734
Scored candidates in 15.1763s.
Improved score to -536.656376 (dScore=0.068358) w/ new primitive
	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.041s.
Completed one step of memory consolidation in 30.8488s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4884
Constructed version spaces and coalesced candidates in 3.16929s.
Trimmed down the beam, have only 269 best candidates
Rewrote topK in 6.65934s.
Initial score: -537.460543
Scored candidates in 15.1685s.
No improvement possible.
Completed one step of memory consolidation in 25.809s.
completed ocaml compression in 10.2062m.
Finished consolidation.
Induced a grammar in 613.1 seconds
Grammar after iteration 2:
-0.581136	t0	$_
0.000000	grid -> pos	getpos
0.000000	grid -> size	getsize
-0.001915	grid -> count	countPixels
-0.006469	grid -> list(grid)	ic_splitall
-0.010683	grid -> list(grid)	split8
-0.017069	grid -> list(grid)	ic_splitcolumns
-0.017069	grid -> list(grid)	ic_splitrows
-0.017111	grid -> list(grid) -> list(grid)	lcons
-0.017112	grid -> grid -> list(grid)	mklist
-0.017112	(grid -> grid) -> list(grid) -> list(grid)	map
-0.017112	grid -> list(grid)	ic_splitcols
-0.032726	grid -> count	countColours
-0.226833	colour	c2
-0.248106	colour	c3
-0.256883	colour	c1
-0.278552	colour	c5
-0.279114	grid -> colour	rarestcol
-0.281581	colour	c4
-0.290520	grid -> colour	topcol
-0.311760	colour	c6
-0.313002	colour	c9
-0.313930	colour	c8
-0.314107	colour	c7
-1.627775	grid -> grid	mirrorX
-1.628194	grid -> grid	repeatX
-1.628340	grid -> grid	left_half
-1.629104	grid -> grid	top_half
-1.630209	colour -> grid -> grid	fillobj
-1.640198	grid -> grid	ic_compress2
-1.645729	grid -> grid	swapxy
-1.647807	grid -> grid	mirrorY
-1.650698	grid -> grid	rot90
-1.654887	grid -> grid	flipx
-1.656178	grid -> grid	rot180
-1.659326	grid -> grid -> grid	ic_embed
-1.660433	colour -> grid -> grid	ic_erasecol
-1.660461	count -> colour -> grid	countToY
-1.664050	grid -> grid	ic_compress3
-1.673338	grid -> grid	flipy
-1.673441	grid -> grid	ic_connectX
-1.673533	colour -> grid -> grid	set_bg
-1.677059	grid -> grid	ic_connectY
-1.681799	grid -> grid	rot270
-1.683433	grid -> grid	ic_makeborder
-1.686437	grid -> grid	ic_toorigin
-1.689802	grid -> grid	ic_interior
-1.690458	list(grid) -> grid	pickmax_neg_interior_count
-1.690458	list(grid) -> grid	ic_pickunique
-1.690613	list(grid) -> grid	pickcommon
-1.690735	list(grid) -> grid	pickmax_interior_count
-1.690882	colour -> grid -> grid	colourHull
-1.691080	list(grid) -> grid	ic_composegrowing
-1.691268	colour -> grid -> grid	get_bg
-1.691273	count -> colour -> grid	countToXY
-1.691445	list(grid) -> grid	pickmax_cols
-1.691941	colour -> grid	colourPixel
-1.691991	list(grid) -> grid	pickmax_size
-1.691991	list(grid) -> grid	pickmax_neg_size
-1.692560	grid -> grid -> grid	overlay
-1.692684	grid -> grid	ic_center
-1.692866	colour -> grid -> grid	ic_filtercol
-1.693251	colour -> grid -> grid	setcol
-1.693251	grid -> grid	ic_fill
-1.693251	count -> colour -> grid	countToX
-1.693251	grid -> grid	right_half
-1.693251	grid -> grid	bottom_half
-1.693251	list(grid) -> grid	pickmax_count
-1.693251	list(grid) -> grid	pickmax_neg_count
-1.693251	list(grid) -> grid	pickmax_x_pos
-1.693251	list(grid) -> grid	pickmax_x_neg
-1.693251	list(grid) -> grid	pickmax_y_pos
-1.693251	list(grid) -> grid	pickmax_y_neg
-1.693251	grid -> grid	repeatY
-1.693251	grid -> grid -> grid	logical_and
-0.017099	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist ($0 $1) $1)))
-0.017099	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 $1))))
-0.017111	grid -> (grid -> (grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1))))
-0.017112	((grid -> grid) -> grid -> grid) -> grid -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $0 ($1 (lambda (ic_connectY $0))))))
-0.017112	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $1 ($0 ic_connectY))))
-0.017112	grid -> ((grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0))))))
-0.017112	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 $1)))) $1 ($0 ic_connectY))))
-0.017112	((grid -> grid) -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist $0 ($1 ic_connectY))))
-0.298776	grid -> colour	#(lambda (rarestcol (rot180 $0)))
-1.595957	grid -> grid	#(lambda (ic_compress2 (ic_compress3 $0)))
-1.609863	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))
-1.617234	grid -> grid	#(lambda (overlay $0 (ic_connectY $0)))
-1.617425	grid -> grid	#(lambda (overlay (ic_connectY $0) $0))
-1.625996	grid -> grid	#(lambda (ic_composegrowing (split8 $0)))
-1.626363	grid -> grid	#(lambda (overlay $0 (flipx $0)))
-1.629889	grid -> grid	#(lambda (mirrorX (mirrorY $0)))
-1.629933	grid -> grid	#(lambda (mirrorY (mirrorX $0)))
-1.633501	grid -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
-1.638005	grid -> colour -> grid	#(lambda (lambda (fillobj $0 (ic_makeborder $1))))
-1.638378	grid -> grid	#(lambda (pickcommon (split8 $0)))
-1.640908	grid -> grid	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-1.643300	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6))
-1.644868	grid -> grid	#(lambda (ic_compress2 (flipy $0)))
-1.646297	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.647346	grid -> grid	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-1.647921	grid -> grid	#(lambda (colourPixel (topcol $0)))
-1.649604	grid -> grid	#(lambda (flipx (mirrorY $0)))
-1.650848	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0)))
-1.651782	grid -> grid	#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.652879	grid -> colour -> grid	#(lambda (lambda (ic_connectX (get_bg $0 $1))))
-1.655511	grid -> grid	#(lambda (fillobj c1 (ic_toorigin $0)))
-1.657388	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))
-1.657549	grid -> grid	#(lambda (ic_filtercol (topcol $0) $0))
-1.660847	grid -> grid -> grid	#(lambda (overlay (flipy $0)))
-1.661977	grid -> grid	#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-1.662209	grid -> grid -> grid	#(lambda (colourHull (topcol $0)))
-1.662477	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.664076	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2)))))
-1.692622	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2)))))
Currently using this much memory: 1199886336
Exported checkpoint to ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=2_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
 [+] Cleared recognition model from:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=2_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
     and exported to:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=2_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False_graph=True.pickle
     Use this one for graphing.
Exporting primitive graph to ./experimentOutputs/arc/_primitives_1_depth.pdf
Exported primitive graph to ./experimentOutputs/arc/_primitives_1_unordered.pdf
ecIterator count 1
Currently using this much memory: 1207922688
Currently using this much memory: 1207922688
Using a waking task batch of size: 400
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 48 jobs | 0 CPUs | 400 tasks | 192.0m CPU rem | 4.0m rem | 0.0 avg lb
Enumerated     6,228 programs | 48 jobs | 47 CPUs | 400 tasks | 174.8m CPU rem | 3.6m rem | 12.0 avg lb
Enumerated   204,832 programs | 48 jobs | 47 CPUs | 399 tasks | 170.8m CPU rem | 3.6m rem | 13.4 avg lb
Enumerated   305,231 programs | 48 jobs | 47 CPUs | 398 tasks | 46.5m CPU rem | 1.0m rem | 14.0 avg lb
Enumerated   662,198 programs | 48 jobs | 47 CPUs | 386 tasks | 42.5m CPU rem | 0.9m rem | 14.5 avg lb
Enumerated 1,281,362 programs | 48 jobs | 47 CPUs | 370 tasks | 38.4m CPU rem | 0.8m rem | 15.5 avg lb
Enumerated 1,550,390 programs | 45 jobs | 47 CPUs | 342 tasks | 0.4m CPU rem | 0.0m rem | 16.0 avg lb
We enumerated this many programs, for each task:
	 [6569, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 6449, 6631, 6506, 6192, 3851, 6185, 6188, 6232, 6106, 6481, 6478, 3851, 6161, 6313, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 692, 6505, 6187, 6168, 6410, 692, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 3851, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 3851, 6449, 6631, 6506, 6192, 6034, 6185, 6188, 6232, 6106, 6481, 6478, 6223, 6161, 6313, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 3851, 6505, 6187, 6168, 3851, 6139, 6181, 6052, 3851, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 6569, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 6449, 6631, 6506, 6192, 6034, 6185, 6188, 3851, 6106, 6481, 6478, 6223, 6161, 6313, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 6232, 6505, 6187, 6168, 6410, 6139, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 3851, 5898, 3851, 5934, 6061, 6569, 6223, 6641, 6180, 6407, 3851, 6668, 3851, 6494, 6449, 3851, 6506, 6192, 6034, 6185, 6188, 6232, 6106, 6481, 3851, 6223, 6161, 6313, 6070, 6277, 6088, 6183, 3851, 6169, 3851, 6232, 6505, 3851, 3851, 3851, 6139, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 6569, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 6449, 6631, 6506, 6192, 6034, 6185, 6188, 6232, 3851, 6481, 6478, 6223, 6161, 6313, 6070, 6277, 3851, 6183, 6185, 6169, 5934, 6232, 6505, 6187, 6168, 6410, 6139, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 3851, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 3851, 6449, 3851, 6506, 6192, 6034, 6185, 6188, 6232, 6106, 6481, 6478, 6223, 6161, 3851, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 6232, 6505, 6187, 6168, 6410, 6139, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 6569, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 6449, 6631, 3851, 6192, 6034, 6185, 6188, 6232, 6106, 6481, 6478, 3851, 6161, 3851, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 6232, 6505, 6187, 6168, 6410, 6139, 6181, 6052, 6061, 6177, 5851, 6034, 6025, 6171, 5898, 6025, 5934, 6061, 6569, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 3851, 6631, 6506, 6192, 6034, 6185, 6188, 6232, 6106, 6481, 6478, 6223, 6161, 6313, 6070, 6277, 6088, 6183, 6185, 6169, 5934, 6232, 6505, 6187, 6168, 6410, 6139, 6181, 6052, 6061, 6177, 3851, 6034, 6025, 3851, 5898, 6025, 5934, 6061, 3851, 6223, 6641, 6180, 6407, 6232, 6668, 6515, 6494, 6449, 6631, 6506, 6192, 6034, 6185, 6188]
Generative model enumeration results:
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -10.226112 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.723331 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -7.759765 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.723331 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.723331 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (#(lambda (overlay (flipy $0))) (ic_connectX $0) $0)) ; log prior = -15.561225 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.723331 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (repeatX (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) ; log prior = -12.103786 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.751846 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.743357 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.769646 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -10.230880 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (colourPixel (topcol $0))) $0))) ; log prior = -12.157445 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.739831 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (#(lambda (overlay $0 (flipx $0))) $0))) ; log prior = -12.153804 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -11.122979 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -7.769646 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.743357 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -7.758337 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -7.743357 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.739831 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.741243 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -7.761275 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -7.754376 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -7.758337 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.709425 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -7.759197 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -7.761275 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.709425 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -12.170685 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -7.759197 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -7.741662 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -7.768979 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.760814 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0))) ; log prior = -13.593618 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -10.184455 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0))) ; log prior = -12.149033 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.760814 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -7.746969 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -7.741243 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -10.209211 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))) ; log prior = -12.159586 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2)) ; log prior = -12.654192 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.751846 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.709425 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -7.764166 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.739831 ; log likelihood = 0.000000
Hits 47/400 tasks
Average description length of a program solving a task: 8.984868 nats
Generative model average:  19 sec.	median: 3 	max: 218 	standard deviation 41
Currently using this much memory: 1207922688
Frontiers discovered top down: 47
Total frontiers: 56
Using an ensemble size of 1. Note that we will only store and test on the best recognition model.
Currently using this much memory: 1207922688
(ID=0): Training a recognition model from 56 frontiers, 100% Helmholtz, feature extractor MikelArcNet.
(ID=0): Got 0 Helmholtz frontiers - random Helmholtz training? : True
(ID=0): Contextual? False
(ID=0): Bias optimal? False
(ID=0): Aux loss? False (n.b. we train a 'auxiliary' classifier anyway - this controls if gradients propagate back to the future extractor)
Sampling 1000 programs from the prior on 48 CPUs...
Got 471/1000 valid samples.
(ID=0): Epoch 1 Loss 6.97
(ID=0): 	vs MDL (w/o neural net) 6.92
(ID=0): 	1 cum grad steps. 0.2 steps/sec | 113-way aux classif loss 0.6897
(ID=0): Epoch 50 Loss 23.14
(ID=0): 	vs MDL (w/o neural net) 22.05
(ID=0): 	50 cum grad steps. 7.1 steps/sec | 113-way aux classif loss 0.6866
(ID=0): Epoch 100 Loss 30.70
(ID=0): 	vs MDL (w/o neural net) 29.66
(ID=0): 	100 cum grad steps. 10.4 steps/sec | 113-way aux classif loss 0.6735
(ID=0): Epoch 150 Loss 26.51
(ID=0): 	vs MDL (w/o neural net) 26.62
(ID=0): 	150 cum grad steps. 12.3 steps/sec | 113-way aux classif loss 0.6170
(ID=0): Epoch 200 Loss 27.50
(ID=0): 	vs MDL (w/o neural net) 28.28
(ID=0): 	200 cum grad steps. 13.7 steps/sec | 113-way aux classif loss 0.5543
(ID=0): Epoch 250 Loss 22.13
(ID=0): 	vs MDL (w/o neural net) 23.52
(ID=0): 	250 cum grad steps. 14.6 steps/sec | 113-way aux classif loss 0.5177
(ID=0): Epoch 300 Loss 25.53
(ID=0): 	vs MDL (w/o neural net) 27.48
(ID=0): 	300 cum grad steps. 15.4 steps/sec | 113-way aux classif loss 0.4868
(ID=0): Epoch 350 Loss 25.36
(ID=0): 	vs MDL (w/o neural net) 27.33
(ID=0): 	350 cum grad steps. 16.1 steps/sec | 113-way aux classif loss 0.4610
(ID=0): Epoch 400 Loss 26.37
(ID=0): 	vs MDL (w/o neural net) 28.75
(ID=0): 	400 cum grad steps. 16.6 steps/sec | 113-way aux classif loss 0.4314
(ID=0): Epoch 450 Loss 23.47
(ID=0): 	vs MDL (w/o neural net) 25.79
(ID=0): 	450 cum grad steps. 16.9 steps/sec | 113-way aux classif loss 0.4103
Sampling 1000 programs from the prior on 48 CPUs...
Got 476/1000 valid samples.
(ID=0): Epoch 500 Loss 22.11
(ID=0): 	vs MDL (w/o neural net) 23.80
(ID=0): 	500 cum grad steps. 14.9 steps/sec | 113-way aux classif loss 0.3804
(ID=0): Epoch 550 Loss 22.65
(ID=0): 	vs MDL (w/o neural net) 24.62
(ID=0): 	550 cum grad steps. 15.2 steps/sec | 113-way aux classif loss 0.3636
(ID=0): Epoch 600 Loss 25.47
(ID=0): 	vs MDL (w/o neural net) 27.26
(ID=0): 	600 cum grad steps. 15.6 steps/sec | 113-way aux classif loss 0.3606
(ID=0): Epoch 650 Loss 26.19
(ID=0): 	vs MDL (w/o neural net) 28.36
(ID=0): 	650 cum grad steps. 15.9 steps/sec | 113-way aux classif loss 0.3336
(ID=0): Epoch 700 Loss 25.58
(ID=0): 	vs MDL (w/o neural net) 27.79
(ID=0): 	700 cum grad steps. 16.2 steps/sec | 113-way aux classif loss 0.3207
(ID=0): Epoch 750 Loss 27.32
(ID=0): 	vs MDL (w/o neural net) 29.89
(ID=0): 	750 cum grad steps. 16.5 steps/sec | 113-way aux classif loss 0.3138
(ID=0): Epoch 800 Loss 22.19
(ID=0): 	vs MDL (w/o neural net) 24.35
(ID=0): 	800 cum grad steps. 16.7 steps/sec | 113-way aux classif loss 0.2959
(ID=0): Epoch 850 Loss 23.21
(ID=0): 	vs MDL (w/o neural net) 25.54
(ID=0): 	850 cum grad steps. 16.9 steps/sec | 113-way aux classif loss 0.2793
(ID=0): Epoch 900 Loss 24.13
(ID=0): 	vs MDL (w/o neural net) 26.54
(ID=0): 	900 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2714
Sampling 1000 programs from the prior on 48 CPUs...
Got 454/1000 valid samples.
(ID=0): Epoch 950 Loss 25.46
(ID=0): 	vs MDL (w/o neural net) 27.73
(ID=0): 	950 cum grad steps. 15.9 steps/sec | 113-way aux classif loss 0.2753
(ID=0): Epoch 1000 Loss 26.86
(ID=0): 	vs MDL (w/o neural net) 29.36
(ID=0): 	1000 cum grad steps. 16.1 steps/sec | 113-way aux classif loss 0.2767
(ID=0): Epoch 1050 Loss 23.18
(ID=0): 	vs MDL (w/o neural net) 25.29
(ID=0): 	1050 cum grad steps. 16.3 steps/sec | 113-way aux classif loss 0.2619
(ID=0): Epoch 1100 Loss 23.28
(ID=0): 	vs MDL (w/o neural net) 25.35
(ID=0): 	1100 cum grad steps. 16.5 steps/sec | 113-way aux classif loss 0.2566
(ID=0): Epoch 1150 Loss 22.56
(ID=0): 	vs MDL (w/o neural net) 24.59
(ID=0): 	1150 cum grad steps. 16.7 steps/sec | 113-way aux classif loss 0.2495
(ID=0): Epoch 1200 Loss 23.76
(ID=0): 	vs MDL (w/o neural net) 25.90
(ID=0): 	1200 cum grad steps. 16.8 steps/sec | 113-way aux classif loss 0.2345
(ID=0): Epoch 1250 Loss 25.98
(ID=0): 	vs MDL (w/o neural net) 28.71
(ID=0): 	1250 cum grad steps. 17.0 steps/sec | 113-way aux classif loss 0.2390
(ID=0): Epoch 1300 Loss 24.56
(ID=0): 	vs MDL (w/o neural net) 26.71
(ID=0): 	1300 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2464
(ID=0): Epoch 1350 Loss 27.35
(ID=0): 	vs MDL (w/o neural net) 29.96
(ID=0): 	1350 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2465
(ID=0): Epoch 1400 Loss 22.40
(ID=0): 	vs MDL (w/o neural net) 24.56
(ID=0): 	1400 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2248
Sampling 1000 programs from the prior on 48 CPUs...
Got 459/1000 valid samples.
(ID=0): Epoch 1450 Loss 22.27
(ID=0): 	vs MDL (w/o neural net) 24.51
(ID=0): 	1450 cum grad steps. 16.5 steps/sec | 113-way aux classif loss 0.2159
(ID=0): Epoch 1500 Loss 24.77
(ID=0): 	vs MDL (w/o neural net) 26.88
(ID=0): 	1500 cum grad steps. 16.7 steps/sec | 113-way aux classif loss 0.2291
(ID=0): Epoch 1550 Loss 25.55
(ID=0): 	vs MDL (w/o neural net) 27.99
(ID=0): 	1550 cum grad steps. 16.8 steps/sec | 113-way aux classif loss 0.2209
(ID=0): Epoch 1600 Loss 23.22
(ID=0): 	vs MDL (w/o neural net) 25.62
(ID=0): 	1600 cum grad steps. 16.9 steps/sec | 113-way aux classif loss 0.2128
(ID=0): Epoch 1650 Loss 23.78
(ID=0): 	vs MDL (w/o neural net) 26.24
(ID=0): 	1650 cum grad steps. 17.0 steps/sec | 113-way aux classif loss 0.2127
(ID=0): Epoch 1700 Loss 27.40
(ID=0): 	vs MDL (w/o neural net) 30.07
(ID=0): 	1700 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2274
(ID=0): Epoch 1750 Loss 23.81
(ID=0): 	vs MDL (w/o neural net) 26.37
(ID=0): 	1750 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2087
(ID=0): Epoch 1800 Loss 21.97
(ID=0): 	vs MDL (w/o neural net) 24.39
(ID=0): 	1800 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2080
(ID=0): Epoch 1850 Loss 24.14
(ID=0): 	vs MDL (w/o neural net) 26.64
(ID=0): 	1850 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2047
Sampling 1000 programs from the prior on 48 CPUs...
Got 461/1000 valid samples.
(ID=0): Epoch 1900 Loss 27.11
(ID=0): 	vs MDL (w/o neural net) 29.78
(ID=0): 	1900 cum grad steps. 16.6 steps/sec | 113-way aux classif loss 0.2213
(ID=0): Epoch 1950 Loss 25.12
(ID=0): 	vs MDL (w/o neural net) 27.44
(ID=0): 	1950 cum grad steps. 16.7 steps/sec | 113-way aux classif loss 0.2186
(ID=0): Epoch 2000 Loss 23.04
(ID=0): 	vs MDL (w/o neural net) 25.57
(ID=0): 	2000 cum grad steps. 16.8 steps/sec | 113-way aux classif loss 0.1985
(ID=0): Epoch 2050 Loss 24.36
(ID=0): 	vs MDL (w/o neural net) 26.45
(ID=0): 	2050 cum grad steps. 16.9 steps/sec | 113-way aux classif loss 0.2059
(ID=0): Epoch 2100 Loss 26.51
(ID=0): 	vs MDL (w/o neural net) 28.89
(ID=0): 	2100 cum grad steps. 17.0 steps/sec | 113-way aux classif loss 0.2202
(ID=0): Epoch 2150 Loss 22.70
(ID=0): 	vs MDL (w/o neural net) 25.15
(ID=0): 	2150 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2016
(ID=0): Epoch 2200 Loss 24.71
(ID=0): 	vs MDL (w/o neural net) 27.42
(ID=0): 	2200 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2040
(ID=0): Epoch 2250 Loss 23.89
(ID=0): 	vs MDL (w/o neural net) 26.26
(ID=0): 	2250 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2041
(ID=0): Epoch 2300 Loss 24.18
(ID=0): 	vs MDL (w/o neural net) 26.57
(ID=0): 	2300 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2028
Sampling 1000 programs from the prior on 48 CPUs...
Got 480/1000 valid samples.
(ID=0): Epoch 2350 Loss 24.72
(ID=0): 	vs MDL (w/o neural net) 26.97
(ID=0): 	2350 cum grad steps. 16.8 steps/sec | 113-way aux classif loss 0.2089
(ID=0): Epoch 2400 Loss 27.16
(ID=0): 	vs MDL (w/o neural net) 29.89
(ID=0): 	2400 cum grad steps. 16.8 steps/sec | 113-way aux classif loss 0.2247
(ID=0): Epoch 2450 Loss 24.90
(ID=0): 	vs MDL (w/o neural net) 27.19
(ID=0): 	2450 cum grad steps. 16.9 steps/sec | 113-way aux classif loss 0.2148
(ID=0): Epoch 2500 Loss 24.81
(ID=0): 	vs MDL (w/o neural net) 27.09
(ID=0): 	2500 cum grad steps. 17.0 steps/sec | 113-way aux classif loss 0.2270
(ID=0): Epoch 2550 Loss 26.91
(ID=0): 	vs MDL (w/o neural net) 29.56
(ID=0): 	2550 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2182
(ID=0): Epoch 2600 Loss 24.35
(ID=0): 	vs MDL (w/o neural net) 26.86
(ID=0): 	2600 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2024
(ID=0): Epoch 2650 Loss 24.17
(ID=0): 	vs MDL (w/o neural net) 26.87
(ID=0): 	2650 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2035
(ID=0): Epoch 2700 Loss 23.02
(ID=0): 	vs MDL (w/o neural net) 25.40
(ID=0): 	2700 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2065
(ID=0): Epoch 2750 Loss 29.21
(ID=0): 	vs MDL (w/o neural net) 32.14
(ID=0): 	2750 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2252
(ID=0): Epoch 2800 Loss 25.48
(ID=0): 	vs MDL (w/o neural net) 28.00
(ID=0): 	2800 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2090
Sampling 1000 programs from the prior on 48 CPUs...
Got 468/1000 valid samples.
(ID=0): Epoch 2850 Loss 26.17
(ID=0): 	vs MDL (w/o neural net) 28.64
(ID=0): 	2850 cum grad steps. 17.0 steps/sec | 113-way aux classif loss 0.2079
(ID=0): Epoch 2900 Loss 23.78
(ID=0): 	vs MDL (w/o neural net) 26.02
(ID=0): 	2900 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2001
(ID=0): Epoch 2950 Loss 21.68
(ID=0): 	vs MDL (w/o neural net) 24.20
(ID=0): 	2950 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.1837
(ID=0): Epoch 3000 Loss 21.18
(ID=0): 	vs MDL (w/o neural net) 23.81
(ID=0): 	3000 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1846
(ID=0): Epoch 3050 Loss 21.85
(ID=0): 	vs MDL (w/o neural net) 24.53
(ID=0): 	3050 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1919
(ID=0): Epoch 3100 Loss 25.23
(ID=0): 	vs MDL (w/o neural net) 27.85
(ID=0): 	3100 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2037
(ID=0): Epoch 3150 Loss 26.11
(ID=0): 	vs MDL (w/o neural net) 28.55
(ID=0): 	3150 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2051
(ID=0): Epoch 3200 Loss 23.32
(ID=0): 	vs MDL (w/o neural net) 25.71
(ID=0): 	3200 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2000
(ID=0): Epoch 3250 Loss 21.32
(ID=0): 	vs MDL (w/o neural net) 23.80
(ID=0): 	3250 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1832
Sampling 1000 programs from the prior on 48 CPUs...
Got 453/1000 valid samples.
(ID=0): Epoch 3300 Loss 24.49
(ID=0): 	vs MDL (w/o neural net) 27.15
(ID=0): 	3300 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2008
(ID=0): Epoch 3350 Loss 20.73
(ID=0): 	vs MDL (w/o neural net) 22.97
(ID=0): 	3350 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.1779
(ID=0): Epoch 3400 Loss 24.81
(ID=0): 	vs MDL (w/o neural net) 27.38
(ID=0): 	3400 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1996
(ID=0): Epoch 3450 Loss 29.43
(ID=0): 	vs MDL (w/o neural net) 31.49
(ID=0): 	3450 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2185
(ID=0): Epoch 3500 Loss 23.16
(ID=0): 	vs MDL (w/o neural net) 25.66
(ID=0): 	3500 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1861
(ID=0): Epoch 3550 Loss 24.04
(ID=0): 	vs MDL (w/o neural net) 26.33
(ID=0): 	3550 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2021
(ID=0): Epoch 3600 Loss 26.46
(ID=0): 	vs MDL (w/o neural net) 29.32
(ID=0): 	3600 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2053
(ID=0): Epoch 3650 Loss 24.93
(ID=0): 	vs MDL (w/o neural net) 27.41
(ID=0): 	3650 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2045
(ID=0): Epoch 3700 Loss 24.97
(ID=0): 	vs MDL (w/o neural net) 27.74
(ID=0): 	3700 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2043
Sampling 1000 programs from the prior on 48 CPUs...
Got 481/1000 valid samples.
(ID=0): Epoch 3750 Loss 23.49
(ID=0): 	vs MDL (w/o neural net) 25.70
(ID=0): 	3750 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.1992
(ID=0): Epoch 3800 Loss 26.52
(ID=0): 	vs MDL (w/o neural net) 29.26
(ID=0): 	3800 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.2049
(ID=0): Epoch 3850 Loss 24.45
(ID=0): 	vs MDL (w/o neural net) 27.30
(ID=0): 	3850 cum grad steps. 17.1 steps/sec | 113-way aux classif loss 0.1940
(ID=0): Epoch 3900 Loss 20.20
(ID=0): 	vs MDL (w/o neural net) 22.71
(ID=0): 	3900 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1790
(ID=0): Epoch 3950 Loss 21.07
(ID=0): 	vs MDL (w/o neural net) 23.76
(ID=0): 	3950 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1772
(ID=0): Epoch 4000 Loss 25.24
(ID=0): 	vs MDL (w/o neural net) 28.02
(ID=0): 	4000 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2005
(ID=0): Epoch 4050 Loss 24.53
(ID=0): 	vs MDL (w/o neural net) 27.33
(ID=0): 	4050 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2021
(ID=0): Epoch 4100 Loss 27.31
(ID=0): 	vs MDL (w/o neural net) 29.99
(ID=0): 	4100 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2112
(ID=0): Epoch 4150 Loss 25.92
(ID=0): 	vs MDL (w/o neural net) 28.99
(ID=0): 	4150 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2012
(ID=0): Epoch 4200 Loss 25.47
(ID=0): 	vs MDL (w/o neural net) 27.91
(ID=0): 	4200 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.2038
Sampling 1000 programs from the prior on 48 CPUs...
Got 473/1000 valid samples.
(ID=0): Epoch 4250 Loss 24.26
(ID=0): 	vs MDL (w/o neural net) 26.67
(ID=0): 	4250 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.2045
(ID=0): Epoch 4300 Loss 24.38
(ID=0): 	vs MDL (w/o neural net) 26.71
(ID=0): 	4300 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1927
(ID=0): Epoch 4350 Loss 26.49
(ID=0): 	vs MDL (w/o neural net) 29.35
(ID=0): 	4350 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2060
(ID=0): Epoch 4400 Loss 25.86
(ID=0): 	vs MDL (w/o neural net) 28.43
(ID=0): 	4400 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2080
(ID=0): Epoch 4450 Loss 21.31
(ID=0): 	vs MDL (w/o neural net) 23.89
(ID=0): 	4450 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1798
(ID=0): Epoch 4500 Loss 23.16
(ID=0): 	vs MDL (w/o neural net) 25.95
(ID=0): 	4500 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1934
(ID=0): Epoch 4550 Loss 25.66
(ID=0): 	vs MDL (w/o neural net) 28.60
(ID=0): 	4550 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2027
(ID=0): Epoch 4600 Loss 24.67
(ID=0): 	vs MDL (w/o neural net) 27.59
(ID=0): 	4600 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1979
(ID=0): Epoch 4650 Loss 24.16
(ID=0): 	vs MDL (w/o neural net) 26.79
(ID=0): 	4650 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.2016
Sampling 1000 programs from the prior on 48 CPUs...
Got 482/1000 valid samples.
(ID=0): Epoch 4700 Loss 22.79
(ID=0): 	vs MDL (w/o neural net) 25.17
(ID=0): 	4700 cum grad steps. 17.2 steps/sec | 113-way aux classif loss 0.1879
(ID=0): Epoch 4750 Loss 25.95
(ID=0): 	vs MDL (w/o neural net) 28.75
(ID=0): 	4750 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2045
(ID=0): Epoch 4800 Loss 24.14
(ID=0): 	vs MDL (w/o neural net) 26.80
(ID=0): 	4800 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.2002
(ID=0): Epoch 4850 Loss 24.88
(ID=0): 	vs MDL (w/o neural net) 27.25
(ID=0): 	4850 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.1949
(ID=0): Epoch 4900 Loss 21.81
(ID=0): 	vs MDL (w/o neural net) 24.16
(ID=0): 	4900 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1799
(ID=0): Epoch 4950 Loss 26.16
(ID=0): 	vs MDL (w/o neural net) 29.24
(ID=0): 	4950 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1977
(ID=0): Epoch 5000 Loss 26.21
(ID=0): 	vs MDL (w/o neural net) 28.96
(ID=0): 	5000 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2000
(ID=0): Epoch 5050 Loss 23.30
(ID=0): 	vs MDL (w/o neural net) 25.91
(ID=0): 	5050 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1903
(ID=0): Epoch 5100 Loss 21.65
(ID=0): 	vs MDL (w/o neural net) 23.90
(ID=0): 	5100 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1760
(ID=0): Epoch 5150 Loss 24.08
(ID=0): 	vs MDL (w/o neural net) 26.69
(ID=0): 	5150 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1855
Sampling 1000 programs from the prior on 48 CPUs...
Got 474/1000 valid samples.
(ID=0): Epoch 5200 Loss 22.97
(ID=0): 	vs MDL (w/o neural net) 25.27
(ID=0): 	5200 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.1848
(ID=0): Epoch 5250 Loss 25.17
(ID=0): 	vs MDL (w/o neural net) 27.97
(ID=0): 	5250 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.1947
(ID=0): Epoch 5300 Loss 23.86
(ID=0): 	vs MDL (w/o neural net) 26.25
(ID=0): 	5300 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.1852
(ID=0): Epoch 5350 Loss 20.15
(ID=0): 	vs MDL (w/o neural net) 22.69
(ID=0): 	5350 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1689
(ID=0): Epoch 5400 Loss 28.29
(ID=0): 	vs MDL (w/o neural net) 30.95
(ID=0): 	5400 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.2082
(ID=0): Epoch 5450 Loss 22.15
(ID=0): 	vs MDL (w/o neural net) 24.30
(ID=0): 	5450 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1809
(ID=0): Epoch 5500 Loss 25.46
(ID=0): 	vs MDL (w/o neural net) 28.12
(ID=0): 	5500 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1980
(ID=0): Epoch 5550 Loss 22.64
(ID=0): 	vs MDL (w/o neural net) 25.31
(ID=0): 	5550 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1852
(ID=0): Epoch 5600 Loss 23.16
(ID=0): 	vs MDL (w/o neural net) 25.51
(ID=0): 	5600 cum grad steps. 17.6 steps/sec | 113-way aux classif loss 0.1899
Sampling 1000 programs from the prior on 48 CPUs...
Got 469/1000 valid samples.
(ID=0): Epoch 5650 Loss 23.35
(ID=0): 	vs MDL (w/o neural net) 25.82
(ID=0): 	5650 cum grad steps. 17.3 steps/sec | 113-way aux classif loss 0.1888
(ID=0): Epoch 5700 Loss 25.45
(ID=0): 	vs MDL (w/o neural net) 27.96
(ID=0): 	5700 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1953
(ID=0): Epoch 5750 Loss 22.32
(ID=0): 	vs MDL (w/o neural net) 24.76
(ID=0): 	5750 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1819
(ID=0): Epoch 5800 Loss 24.03
(ID=0): 	vs MDL (w/o neural net) 26.70
(ID=0): 	5800 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1897
(ID=0): Epoch 5850 Loss 23.90
(ID=0): 	vs MDL (w/o neural net) 26.45
(ID=0): 	5850 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1881
(ID=0): Epoch 5900 Loss 26.27
(ID=0): 	vs MDL (w/o neural net) 29.42
(ID=0): 	5900 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.2001
(ID=0): Epoch 5950 Loss 23.95
(ID=0): 	vs MDL (w/o neural net) 26.41
(ID=0): 	5950 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1882
(ID=0): Epoch 6000 Loss 24.47
(ID=0): 	vs MDL (w/o neural net) 26.78
(ID=0): 	6000 cum grad steps. 17.6 steps/sec | 113-way aux classif loss 0.1943
(ID=0): Epoch 6050 Loss 24.34
(ID=0): 	vs MDL (w/o neural net) 26.87
(ID=0): 	6050 cum grad steps. 17.6 steps/sec | 113-way aux classif loss 0.1909
(ID=0): Epoch 6100 Loss 24.18
(ID=0): 	vs MDL (w/o neural net) 26.90
(ID=0): 	6100 cum grad steps. 17.6 steps/sec | 113-way aux classif loss 0.1905
Sampling 1000 programs from the prior on 48 CPUs...
Got 490/1000 valid samples.
(ID=0): Epoch 6150 Loss 24.84
(ID=0): 	vs MDL (w/o neural net) 27.65
(ID=0): 	6150 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1895
(ID=0): Epoch 6200 Loss 22.79
(ID=0): 	vs MDL (w/o neural net) 25.45
(ID=0): 	6200 cum grad steps. 17.4 steps/sec | 113-way aux classif loss 0.1822
(ID=0): Epoch 6250 Loss 25.44
(ID=0): 	vs MDL (w/o neural net) 28.02
(ID=0): 	6250 cum grad steps. 17.5 steps/sec | 113-way aux classif loss 0.1958
(ID=0):   Trained recognition model in 360.0045413970947 seconds
Currently using this much memory: 1215553536
Trained an ensemble of 1 recognition models, now enumerating.
Enumerating from recognizer 0 of 1
Evaluated recognition model in 3.8 seconds
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 400 jobs | 0 CPUs | 400 tasks | 1600.0m CPU rem | 33.3m rem | 0.0 avg lb
Enumerated     2,511 programs | 400 jobs | 47 CPUs | 400 tasks | 1596.5m CPU rem | 33.3m rem | 1.6 avg lb
Enumerated     7,523 programs | 400 jobs | 47 CPUs | 400 tasks | 1592.2m CPU rem | 33.2m rem | 2.0 avg lb
Enumerated    13,155 programs | 400 jobs | 47 CPUs | 400 tasks | 1587.9m CPU rem | 33.1m rem | 2.4 avg lb
Enumerated    45,183 programs | 395 jobs | 47 CPUs | 395 tasks | 1565.0m CPU rem | 32.6m rem | 2.6 avg lb
Enumerated    81,649 programs | 395 jobs | 47 CPUs | 395 tasks | 1560.6m CPU rem | 32.5m rem | 3.0 avg lb
Enumerated    95,873 programs | 395 jobs | 47 CPUs | 395 tasks | 1556.3m CPU rem | 32.4m rem | 3.3 avg lb
Enumerated   114,656 programs | 395 jobs | 47 CPUs | 395 tasks | 1552.2m CPU rem | 32.3m rem | 3.7 avg lb
Enumerated   139,546 programs | 395 jobs | 47 CPUs | 395 tasks | 1547.9m CPU rem | 32.2m rem | 4.0 avg lb
Enumerated   163,574 programs | 395 jobs | 47 CPUs | 395 tasks | 1543.7m CPU rem | 32.2m rem | 4.4 avg lb
Enumerated   184,025 programs | 395 jobs | 47 CPUs | 395 tasks | 1539.6m CPU rem | 32.1m rem | 4.7 avg lb
Enumerated   205,501 programs | 394 jobs | 47 CPUs | 394 tasks | 1531.9m CPU rem | 31.9m rem | 5.1 avg lb
Enumerated   232,922 programs | 394 jobs | 47 CPUs | 394 tasks | 1527.5m CPU rem | 31.8m rem | 5.4 avg lb
Enumerated   249,854 programs | 392 jobs | 47 CPUs | 392 tasks | 1515.9m CPU rem | 31.6m rem | 5.8 avg lb
Enumerated   269,784 programs | 391 jobs | 47 CPUs | 391 tasks | 1507.9m CPU rem | 31.4m rem | 6.1 avg lb
Enumerated   291,364 programs | 389 jobs | 47 CPUs | 389 tasks | 1496.6m CPU rem | 31.2m rem | 6.4 avg lb
Enumerated   308,849 programs | 387 jobs | 47 CPUs | 387 tasks | 1485.1m CPU rem | 30.9m rem | 6.8 avg lb
Enumerated   336,894 programs | 386 jobs | 47 CPUs | 386 tasks | 1477.4m CPU rem | 30.8m rem | 7.1 avg lb
Enumerated   359,997 programs | 385 jobs | 47 CPUs | 385 tasks | 1469.6m CPU rem | 30.6m rem | 7.4 avg lb
Enumerated   384,199 programs | 385 jobs | 47 CPUs | 385 tasks | 1465.3m CPU rem | 30.5m rem | 7.8 avg lb
Enumerated   404,437 programs | 384 jobs | 47 CPUs | 384 tasks | 1457.4m CPU rem | 30.4m rem | 8.2 avg lb
Enumerated   433,774 programs | 384 jobs | 47 CPUs | 384 tasks | 1453.0m CPU rem | 30.3m rem | 8.5 avg lb
Enumerated   458,664 programs | 383 jobs | 47 CPUs | 383 tasks | 1445.0m CPU rem | 30.1m rem | 8.9 avg lb
Enumerated   482,824 programs | 380 jobs | 47 CPUs | 380 tasks | 1429.8m CPU rem | 29.8m rem | 9.3 avg lb
Enumerated   508,021 programs | 380 jobs | 47 CPUs | 380 tasks | 1425.5m CPU rem | 29.7m rem | 9.6 avg lb
Enumerated   537,546 programs | 380 jobs | 47 CPUs | 380 tasks | 1421.3m CPU rem | 29.6m rem | 10.0 avg lb
Enumerated   569,087 programs | 379 jobs | 47 CPUs | 379 tasks | 1413.4m CPU rem | 29.4m rem | 10.4 avg lb
Enumerated   590,255 programs | 378 jobs | 47 CPUs | 378 tasks | 1405.5m CPU rem | 29.3m rem | 10.8 avg lb
Enumerated   614,014 programs | 377 jobs | 47 CPUs | 377 tasks | 1397.7m CPU rem | 29.1m rem | 11.1 avg lb
Enumerated   635,593 programs | 377 jobs | 47 CPUs | 377 tasks | 1393.5m CPU rem | 29.0m rem | 11.5 avg lb
Enumerated   661,874 programs | 376 jobs | 47 CPUs | 376 tasks | 1385.8m CPU rem | 28.9m rem | 11.9 avg lb
Enumerated   688,267 programs | 376 jobs | 47 CPUs | 376 tasks | 1381.6m CPU rem | 28.8m rem | 12.0 avg lb
Enumerated   709,753 programs | 376 jobs | 47 CPUs | 376 tasks | 1377.5m CPU rem | 28.7m rem | 12.1 avg lb
Enumerated   733,734 programs | 374 jobs | 47 CPUs | 374 tasks | 1366.0m CPU rem | 28.5m rem | 12.2 avg lb
Enumerated   757,794 programs | 374 jobs | 47 CPUs | 374 tasks | 1361.7m CPU rem | 28.4m rem | 12.2 avg lb
Enumerated   778,161 programs | 374 jobs | 47 CPUs | 374 tasks | 1357.6m CPU rem | 28.3m rem | 12.3 avg lb
Enumerated   786,905 programs | 374 jobs | 47 CPUs | 374 tasks | 1353.3m CPU rem | 28.2m rem | 12.3 avg lb
Enumerated   791,353 programs | 374 jobs | 47 CPUs | 374 tasks | 1349.1m CPU rem | 28.1m rem | 12.4 avg lb
Enumerated   797,169 programs | 374 jobs | 47 CPUs | 374 tasks | 1344.4m CPU rem | 28.0m rem | 12.4 avg lb
Enumerated   802,829 programs | 374 jobs | 47 CPUs | 374 tasks | 1339.9m CPU rem | 27.9m rem | 12.5 avg lb
Enumerated   810,692 programs | 374 jobs | 47 CPUs | 374 tasks | 1335.6m CPU rem | 27.8m rem | 12.5 avg lb
Enumerated   846,550 programs | 372 jobs | 47 CPUs | 372 tasks | 1325.0m CPU rem | 27.6m rem | 12.5 avg lb
Enumerated   897,232 programs | 371 jobs | 47 CPUs | 371 tasks | 1316.7m CPU rem | 27.4m rem | 12.6 avg lb
Enumerated   960,174 programs | 371 jobs | 47 CPUs | 371 tasks | 1312.3m CPU rem | 27.3m rem | 12.6 avg lb
Enumerated 1,021,519 programs | 371 jobs | 47 CPUs | 371 tasks | 1307.5m CPU rem | 27.2m rem | 12.6 avg lb
Enumerated 1,082,282 programs | 371 jobs | 47 CPUs | 371 tasks | 1303.2m CPU rem | 27.2m rem | 12.7 avg lb
Enumerated 1,102,138 programs | 371 jobs | 47 CPUs | 371 tasks | 1299.0m CPU rem | 27.1m rem | 12.7 avg lb
Enumerated 1,202,223 programs | 370 jobs | 47 CPUs | 370 tasks | 1290.8m CPU rem | 26.9m rem | 12.8 avg lb
Enumerated 1,221,241 programs | 370 jobs | 47 CPUs | 370 tasks | 1286.2m CPU rem | 26.8m rem | 12.8 avg lb
Enumerated 1,271,742 programs | 370 jobs | 47 CPUs | 370 tasks | 1281.8m CPU rem | 26.7m rem | 12.8 avg lb
Enumerated 1,319,902 programs | 370 jobs | 47 CPUs | 370 tasks | 1277.2m CPU rem | 26.6m rem | 12.9 avg lb
Enumerated 1,368,516 programs | 370 jobs | 47 CPUs | 370 tasks | 1273.0m CPU rem | 26.5m rem | 12.9 avg lb
Enumerated 1,413,947 programs | 370 jobs | 47 CPUs | 370 tasks | 1268.4m CPU rem | 26.4m rem | 13.0 avg lb
Enumerated 1,474,329 programs | 370 jobs | 47 CPUs | 370 tasks | 1263.7m CPU rem | 26.3m rem | 13.0 avg lb
Enumerated 1,547,896 programs | 370 jobs | 47 CPUs | 370 tasks | 1259.1m CPU rem | 26.2m rem | 13.0 avg lb
Enumerated 1,601,151 programs | 370 jobs | 47 CPUs | 370 tasks | 1254.7m CPU rem | 26.1m rem | 13.1 avg lb
Enumerated 1,669,045 programs | 370 jobs | 47 CPUs | 370 tasks | 1250.0m CPU rem | 26.0m rem | 13.1 avg lb
Enumerated 1,714,809 programs | 370 jobs | 47 CPUs | 370 tasks | 1245.8m CPU rem | 26.0m rem | 13.1 avg lb
Enumerated 1,746,124 programs | 370 jobs | 47 CPUs | 370 tasks | 1241.3m CPU rem | 25.9m rem | 13.2 avg lb
Enumerated 1,820,107 programs | 370 jobs | 47 CPUs | 370 tasks | 1236.8m CPU rem | 25.8m rem | 13.2 avg lb
Enumerated 1,894,290 programs | 370 jobs | 47 CPUs | 370 tasks | 1232.3m CPU rem | 25.7m rem | 13.2 avg lb
Enumerated 1,957,501 programs | 370 jobs | 47 CPUs | 370 tasks | 1227.4m CPU rem | 25.6m rem | 13.3 avg lb
Enumerated 2,004,845 programs | 370 jobs | 47 CPUs | 370 tasks | 1222.6m CPU rem | 25.5m rem | 13.3 avg lb
Enumerated 2,051,016 programs | 370 jobs | 47 CPUs | 370 tasks | 1217.8m CPU rem | 25.4m rem | 13.3 avg lb
Enumerated 2,084,236 programs | 370 jobs | 47 CPUs | 370 tasks | 1213.3m CPU rem | 25.3m rem | 13.4 avg lb
Enumerated 2,160,372 programs | 370 jobs | 47 CPUs | 370 tasks | 1209.1m CPU rem | 25.2m rem | 13.4 avg lb
Enumerated 2,224,799 programs | 370 jobs | 47 CPUs | 370 tasks | 1204.6m CPU rem | 25.1m rem | 13.4 avg lb
Enumerated 2,298,683 programs | 370 jobs | 47 CPUs | 370 tasks | 1200.3m CPU rem | 25.0m rem | 13.5 avg lb
Enumerated 2,331,632 programs | 370 jobs | 47 CPUs | 370 tasks | 1195.5m CPU rem | 24.9m rem | 13.5 avg lb
Enumerated 2,379,466 programs | 370 jobs | 47 CPUs | 370 tasks | 1191.3m CPU rem | 24.8m rem | 13.5 avg lb
Enumerated 2,423,498 programs | 370 jobs | 47 CPUs | 370 tasks | 1185.9m CPU rem | 24.7m rem | 13.5 avg lb
Enumerated 2,487,582 programs | 369 jobs | 47 CPUs | 369 tasks | 1177.4m CPU rem | 24.5m rem | 13.6 avg lb
Enumerated 2,529,607 programs | 369 jobs | 47 CPUs | 369 tasks | 1173.0m CPU rem | 24.4m rem | 13.6 avg lb
Enumerated 2,580,559 programs | 369 jobs | 47 CPUs | 369 tasks | 1168.8m CPU rem | 24.3m rem | 13.6 avg lb
Enumerated 2,644,090 programs | 369 jobs | 47 CPUs | 369 tasks | 1164.2m CPU rem | 24.3m rem | 13.7 avg lb
Enumerated 2,705,409 programs | 369 jobs | 47 CPUs | 369 tasks | 1159.8m CPU rem | 24.2m rem | 13.7 avg lb
Enumerated 2,760,460 programs | 369 jobs | 47 CPUs | 369 tasks | 1155.2m CPU rem | 24.1m rem | 13.8 avg lb
Enumerated 2,807,917 programs | 368 jobs | 47 CPUs | 368 tasks | 1148.4m CPU rem | 23.9m rem | 13.8 avg lb
Enumerated 2,867,998 programs | 368 jobs | 47 CPUs | 368 tasks | 1144.3m CPU rem | 23.8m rem | 13.8 avg lb
Enumerated 2,914,043 programs | 368 jobs | 47 CPUs | 368 tasks | 1139.5m CPU rem | 23.7m rem | 13.9 avg lb
Enumerated 2,990,356 programs | 368 jobs | 47 CPUs | 368 tasks | 1135.1m CPU rem | 23.6m rem | 13.9 avg lb
Enumerated 3,037,077 programs | 368 jobs | 47 CPUs | 368 tasks | 1130.6m CPU rem | 23.6m rem | 13.9 avg lb
Enumerated 3,096,984 programs | 368 jobs | 47 CPUs | 368 tasks | 1126.2m CPU rem | 23.5m rem | 14.0 avg lb
Enumerated 3,127,557 programs | 368 jobs | 47 CPUs | 368 tasks | 1122.0m CPU rem | 23.4m rem | 14.0 avg lb
Enumerated 3,186,392 programs | 368 jobs | 47 CPUs | 368 tasks | 1117.4m CPU rem | 23.3m rem | 14.0 avg lb
Enumerated 3,221,823 programs | 368 jobs | 47 CPUs | 368 tasks | 1112.8m CPU rem | 23.2m rem | 14.1 avg lb
Enumerated 3,266,054 programs | 368 jobs | 47 CPUs | 368 tasks | 1108.5m CPU rem | 23.1m rem | 14.1 avg lb
Enumerated 3,315,246 programs | 368 jobs | 47 CPUs | 368 tasks | 1104.0m CPU rem | 23.0m rem | 14.1 avg lb
Enumerated 3,388,929 programs | 368 jobs | 47 CPUs | 368 tasks | 1099.5m CPU rem | 22.9m rem | 14.2 avg lb
Enumerated 3,461,799 programs | 368 jobs | 47 CPUs | 368 tasks | 1095.1m CPU rem | 22.8m rem | 14.2 avg lb
Enumerated 3,504,136 programs | 368 jobs | 47 CPUs | 368 tasks | 1091.0m CPU rem | 22.7m rem | 14.2 avg lb
Enumerated 3,558,327 programs | 368 jobs | 47 CPUs | 368 tasks | 1086.6m CPU rem | 22.6m rem | 14.3 avg lb
Enumerated 3,624,189 programs | 368 jobs | 47 CPUs | 368 tasks | 1082.5m CPU rem | 22.6m rem | 14.3 avg lb
Enumerated 3,685,919 programs | 368 jobs | 47 CPUs | 368 tasks | 1078.2m CPU rem | 22.5m rem | 14.4 avg lb
Enumerated 3,752,760 programs | 368 jobs | 47 CPUs | 368 tasks | 1073.9m CPU rem | 22.4m rem | 14.4 avg lb
Enumerated 3,801,992 programs | 368 jobs | 47 CPUs | 368 tasks | 1069.3m CPU rem | 22.3m rem | 14.4 avg lb
Enumerated 3,896,807 programs | 368 jobs | 47 CPUs | 368 tasks | 1064.6m CPU rem | 22.2m rem | 14.5 avg lb
Enumerated 3,931,588 programs | 368 jobs | 47 CPUs | 368 tasks | 1060.2m CPU rem | 22.1m rem | 14.5 avg lb
Enumerated 3,984,437 programs | 368 jobs | 47 CPUs | 368 tasks | 1055.9m CPU rem | 22.0m rem | 14.5 avg lb
Enumerated 4,019,097 programs | 368 jobs | 47 CPUs | 368 tasks | 1051.6m CPU rem | 21.9m rem | 14.6 avg lb
Enumerated 4,054,359 programs | 368 jobs | 47 CPUs | 368 tasks | 1043.0m CPU rem | 21.7m rem | 14.6 avg lb
Enumerated 4,062,987 programs | 368 jobs | 47 CPUs | 368 tasks | 1036.2m CPU rem | 21.6m rem | 14.6 avg lb
Enumerated 4,118,701 programs | 367 jobs | 47 CPUs | 367 tasks | 991.2m CPU rem | 20.7m rem | 14.6 avg lb
Enumerated 4,327,609 programs | 364 jobs | 47 CPUs | 364 tasks | 984.6m CPU rem | 20.5m rem | 14.6 avg lb
Enumerated 4,727,302 programs | 358 jobs | 47 CPUs | 358 tasks | 979.8m CPU rem | 20.4m rem | 14.6 avg lb
Enumerated 4,847,673 programs | 355 jobs | 47 CPUs | 355 tasks | 971.7m CPU rem | 20.2m rem | 14.6 avg lb
Enumerated 4,985,556 programs | 353 jobs | 47 CPUs | 353 tasks | 963.9m CPU rem | 20.1m rem | 14.7 avg lb
Enumerated 5,297,515 programs | 348 jobs | 47 CPUs | 348 tasks | 959.5m CPU rem | 20.0m rem | 14.7 avg lb
Enumerated 5,505,175 programs | 345 jobs | 47 CPUs | 345 tasks | 954.8m CPU rem | 19.9m rem | 14.7 avg lb
Enumerated 5,869,668 programs | 337 jobs | 47 CPUs | 337 tasks | 950.3m CPU rem | 19.8m rem | 14.7 avg lb
Enumerated 6,097,351 programs | 333 jobs | 47 CPUs | 333 tasks | 942.8m CPU rem | 19.6m rem | 14.7 avg lb
Enumerated 6,269,577 programs | 329 jobs | 47 CPUs | 329 tasks | 938.9m CPU rem | 19.6m rem | 14.8 avg lb
Enumerated 6,392,326 programs | 325 jobs | 47 CPUs | 325 tasks | 934.6m CPU rem | 19.5m rem | 14.8 avg lb
Enumerated 6,652,376 programs | 322 jobs | 47 CPUs | 322 tasks | 930.3m CPU rem | 19.4m rem | 14.8 avg lb
Enumerated 6,842,250 programs | 321 jobs | 47 CPUs | 321 tasks | 925.9m CPU rem | 19.3m rem | 14.9 avg lb
Enumerated 6,918,208 programs | 321 jobs | 47 CPUs | 321 tasks | 920.0m CPU rem | 19.2m rem | 14.9 avg lb
Enumerated 7,033,635 programs | 319 jobs | 47 CPUs | 319 tasks | 911.5m CPU rem | 19.0m rem | 14.9 avg lb
Enumerated 7,132,902 programs | 318 jobs | 47 CPUs | 318 tasks | 905.8m CPU rem | 18.9m rem | 14.9 avg lb
Enumerated 7,158,979 programs | 318 jobs | 47 CPUs | 318 tasks | 889.7m CPU rem | 18.5m rem | 14.9 avg lb
Enumerated 7,163,969 programs | 318 jobs | 47 CPUs | 318 tasks | 882.4m CPU rem | 18.4m rem | 14.9 avg lb
Enumerated 7,218,701 programs | 317 jobs | 47 CPUs | 317 tasks | 872.0m CPU rem | 18.2m rem | 14.9 avg lb
Enumerated 7,379,136 programs | 315 jobs | 47 CPUs | 315 tasks | 867.3m CPU rem | 18.1m rem | 15.0 avg lb
Enumerated 7,498,868 programs | 313 jobs | 47 CPUs | 313 tasks | 862.6m CPU rem | 18.0m rem | 15.0 avg lb
Enumerated 7,613,541 programs | 310 jobs | 47 CPUs | 310 tasks | 858.3m CPU rem | 17.9m rem | 15.0 avg lb
Enumerated 7,846,312 programs | 307 jobs | 47 CPUs | 307 tasks | 849.8m CPU rem | 17.7m rem | 15.0 avg lb
Enumerated 8,020,419 programs | 304 jobs | 47 CPUs | 304 tasks | 845.0m CPU rem | 17.6m rem | 15.1 avg lb
Enumerated 8,190,962 programs | 301 jobs | 47 CPUs | 301 tasks | 838.9m CPU rem | 17.5m rem | 15.1 avg lb
Enumerated 8,340,382 programs | 299 jobs | 47 CPUs | 299 tasks | 833.7m CPU rem | 17.4m rem | 15.1 avg lb
Enumerated 8,572,085 programs | 295 jobs | 47 CPUs | 295 tasks | 828.9m CPU rem | 17.3m rem | 15.1 avg lb
Enumerated 8,679,767 programs | 293 jobs | 47 CPUs | 293 tasks | 824.0m CPU rem | 17.2m rem | 15.1 avg lb
Enumerated 8,783,553 programs | 291 jobs | 47 CPUs | 291 tasks | 818.8m CPU rem | 17.1m rem | 15.1 avg lb
Enumerated 9,077,370 programs | 285 jobs | 47 CPUs | 285 tasks | 814.5m CPU rem | 17.0m rem | 15.2 avg lb
Enumerated 9,344,323 programs | 278 jobs | 47 CPUs | 278 tasks | 810.5m CPU rem | 16.9m rem | 15.2 avg lb
Enumerated 9,716,989 programs | 276 jobs | 47 CPUs | 276 tasks | 806.2m CPU rem | 16.8m rem | 15.3 avg lb
Enumerated 9,812,249 programs | 275 jobs | 47 CPUs | 275 tasks | 800.5m CPU rem | 16.7m rem | 15.3 avg lb
Enumerated 9,826,885 programs | 275 jobs | 47 CPUs | 275 tasks | 793.6m CPU rem | 16.5m rem | 15.3 avg lb
Enumerated 9,934,805 programs | 273 jobs | 47 CPUs | 273 tasks | 789.1m CPU rem | 16.4m rem | 15.3 avg lb
Enumerated 10,004,099 programs | 271 jobs | 47 CPUs | 271 tasks | 784.8m CPU rem | 16.4m rem | 15.3 avg lb
Enumerated 10,080,868 programs | 271 jobs | 47 CPUs | 271 tasks | 779.5m CPU rem | 16.2m rem | 15.3 avg lb
Enumerated 10,137,342 programs | 270 jobs | 47 CPUs | 270 tasks | 769.9m CPU rem | 16.0m rem | 15.3 avg lb
Enumerated 10,210,276 programs | 269 jobs | 47 CPUs | 269 tasks | 753.4m CPU rem | 15.7m rem | 15.4 avg lb
Enumerated 10,309,783 programs | 267 jobs | 47 CPUs | 267 tasks | 745.8m CPU rem | 15.5m rem | 15.4 avg lb
Enumerated 10,590,329 programs | 262 jobs | 47 CPUs | 262 tasks | 741.7m CPU rem | 15.5m rem | 15.4 avg lb
Enumerated 10,753,461 programs | 259 jobs | 47 CPUs | 259 tasks | 736.0m CPU rem | 15.3m rem | 15.4 avg lb
Enumerated 10,920,109 programs | 256 jobs | 47 CPUs | 256 tasks | 731.8m CPU rem | 15.2m rem | 15.5 avg lb
Enumerated 10,964,836 programs | 255 jobs | 47 CPUs | 255 tasks | 727.6m CPU rem | 15.2m rem | 15.5 avg lb
Enumerated 11,114,634 programs | 253 jobs | 47 CPUs | 253 tasks | 722.9m CPU rem | 15.1m rem | 15.5 avg lb
Enumerated 11,265,402 programs | 249 jobs | 47 CPUs | 249 tasks | 715.4m CPU rem | 14.9m rem | 15.5 avg lb
Enumerated 11,417,840 programs | 247 jobs | 47 CPUs | 247 tasks | 710.8m CPU rem | 14.8m rem | 15.6 avg lb
Enumerated 11,536,099 programs | 245 jobs | 47 CPUs | 245 tasks | 705.1m CPU rem | 14.7m rem | 15.6 avg lb
Enumerated 11,727,149 programs | 242 jobs | 47 CPUs | 242 tasks | 700.9m CPU rem | 14.6m rem | 15.6 avg lb
Enumerated 11,992,757 programs | 236 jobs | 47 CPUs | 236 tasks | 696.7m CPU rem | 14.5m rem | 15.7 avg lb
Enumerated 12,230,984 programs | 234 jobs | 47 CPUs | 234 tasks | 692.5m CPU rem | 14.4m rem | 15.7 avg lb
Enumerated 12,388,967 programs | 232 jobs | 47 CPUs | 232 tasks | 688.4m CPU rem | 14.3m rem | 15.8 avg lb
Enumerated 12,471,963 programs | 231 jobs | 47 CPUs | 231 tasks | 682.3m CPU rem | 14.2m rem | 15.8 avg lb
Enumerated 12,528,259 programs | 230 jobs | 47 CPUs | 230 tasks | 677.4m CPU rem | 14.1m rem | 15.9 avg lb
Enumerated 12,684,964 programs | 228 jobs | 47 CPUs | 228 tasks | 672.6m CPU rem | 14.0m rem | 15.9 avg lb
Enumerated 12,811,465 programs | 226 jobs | 47 CPUs | 226 tasks | 668.0m CPU rem | 13.9m rem | 15.9 avg lb
Enumerated 12,863,761 programs | 226 jobs | 47 CPUs | 226 tasks | 663.4m CPU rem | 13.8m rem | 16.0 avg lb
Enumerated 13,029,700 programs | 223 jobs | 47 CPUs | 223 tasks | 658.9m CPU rem | 13.7m rem | 16.0 avg lb
Enumerated 13,098,128 programs | 222 jobs | 47 CPUs | 222 tasks | 642.6m CPU rem | 13.4m rem | 16.0 avg lb
Enumerated 13,192,654 programs | 220 jobs | 47 CPUs | 220 tasks | 636.3m CPU rem | 13.3m rem | 16.0 avg lb
Enumerated 13,276,332 programs | 218 jobs | 47 CPUs | 218 tasks | 629.8m CPU rem | 13.1m rem | 16.1 avg lb
Enumerated 13,287,343 programs | 218 jobs | 47 CPUs | 218 tasks | 624.0m CPU rem | 13.0m rem | 16.1 avg lb
Enumerated 13,417,271 programs | 216 jobs | 47 CPUs | 216 tasks | 618.5m CPU rem | 12.9m rem | 16.1 avg lb
Enumerated 13,646,288 programs | 213 jobs | 47 CPUs | 213 tasks | 612.5m CPU rem | 12.8m rem | 16.2 avg lb
Enumerated 13,833,078 programs | 210 jobs | 47 CPUs | 210 tasks | 608.1m CPU rem | 12.7m rem | 16.2 avg lb
Enumerated 13,885,353 programs | 209 jobs | 47 CPUs | 209 tasks | 604.0m CPU rem | 12.6m rem | 16.3 avg lb
Enumerated 14,089,987 programs | 207 jobs | 47 CPUs | 207 tasks | 599.6m CPU rem | 12.5m rem | 16.3 avg lb
Enumerated 14,178,772 programs | 206 jobs | 47 CPUs | 206 tasks | 593.7m CPU rem | 12.4m rem | 16.4 avg lb
Enumerated 14,501,449 programs | 201 jobs | 47 CPUs | 201 tasks | 589.4m CPU rem | 12.3m rem | 16.5 avg lb
Enumerated 14,712,071 programs | 196 jobs | 47 CPUs | 196 tasks | 581.8m CPU rem | 12.1m rem | 16.6 avg lb
Enumerated 15,006,063 programs | 192 jobs | 47 CPUs | 192 tasks | 577.5m CPU rem | 12.0m rem | 16.8 avg lb
Enumerated 15,266,811 programs | 187 jobs | 47 CPUs | 187 tasks | 573.3m CPU rem | 11.9m rem | 16.9 avg lb
Enumerated 15,482,271 programs | 184 jobs | 47 CPUs | 184 tasks | 565.3m CPU rem | 11.8m rem | 17.0 avg lb
Enumerated 15,780,413 programs | 179 jobs | 47 CPUs | 179 tasks | 561.1m CPU rem | 11.7m rem | 17.2 avg lb
Enumerated 15,878,074 programs | 178 jobs | 47 CPUs | 178 tasks | 554.5m CPU rem | 11.6m rem | 17.3 avg lb
Enumerated 16,063,421 programs | 176 jobs | 47 CPUs | 176 tasks | 550.3m CPU rem | 11.5m rem | 17.5 avg lb
Enumerated 16,175,214 programs | 176 jobs | 47 CPUs | 176 tasks | 546.0m CPU rem | 11.4m rem | 17.6 avg lb
Enumerated 16,280,688 programs | 176 jobs | 47 CPUs | 176 tasks | 536.8m CPU rem | 11.2m rem | 17.7 avg lb
Enumerated 16,404,257 programs | 175 jobs | 47 CPUs | 175 tasks | 531.8m CPU rem | 11.1m rem | 17.8 avg lb
Enumerated 16,483,697 programs | 174 jobs | 47 CPUs | 174 tasks | 525.1m CPU rem | 10.9m rem | 17.8 avg lb
Enumerated 16,632,558 programs | 173 jobs | 47 CPUs | 173 tasks | 518.6m CPU rem | 10.8m rem | 17.9 avg lb
Enumerated 16,823,754 programs | 171 jobs | 47 CPUs | 171 tasks | 510.1m CPU rem | 10.6m rem | 18.0 avg lb
Enumerated 16,885,596 programs | 171 jobs | 47 CPUs | 171 tasks | 505.1m CPU rem | 10.5m rem | 18.1 avg lb
Enumerated 16,952,005 programs | 171 jobs | 47 CPUs | 171 tasks | 499.8m CPU rem | 10.4m rem | 18.1 avg lb
Enumerated 17,004,240 programs | 171 jobs | 47 CPUs | 171 tasks | 495.1m CPU rem | 10.3m rem | 18.1 avg lb
Enumerated 17,189,438 programs | 171 jobs | 47 CPUs | 171 tasks | 489.5m CPU rem | 10.2m rem | 18.2 avg lb
Enumerated 17,317,944 programs | 171 jobs | 47 CPUs | 171 tasks | 482.4m CPU rem | 10.0m rem | 18.3 avg lb
Enumerated 17,564,519 programs | 171 jobs | 47 CPUs | 171 tasks | 475.4m CPU rem | 9.9m rem | 18.3 avg lb
Enumerated 17,812,379 programs | 171 jobs | 47 CPUs | 171 tasks | 468.6m CPU rem | 9.8m rem | 18.4 avg lb
Enumerated 18,039,461 programs | 170 jobs | 47 CPUs | 170 tasks | 464.5m CPU rem | 9.7m rem | 18.4 avg lb
Enumerated 18,342,707 programs | 169 jobs | 47 CPUs | 169 tasks | 459.6m CPU rem | 9.6m rem | 18.5 avg lb
Enumerated 18,630,267 programs | 166 jobs | 47 CPUs | 166 tasks | 451.0m CPU rem | 9.4m rem | 18.5 avg lb
Enumerated 18,714,727 programs | 166 jobs | 47 CPUs | 166 tasks | 446.0m CPU rem | 9.3m rem | 18.6 avg lb
Enumerated 18,812,491 programs | 166 jobs | 47 CPUs | 166 tasks | 441.7m CPU rem | 9.2m rem | 18.6 avg lb
Enumerated 19,046,407 programs | 165 jobs | 47 CPUs | 165 tasks | 437.6m CPU rem | 9.1m rem | 18.7 avg lb
Enumerated 19,135,443 programs | 163 jobs | 47 CPUs | 163 tasks | 433.1m CPU rem | 9.0m rem | 18.7 avg lb
Enumerated 19,519,789 programs | 162 jobs | 47 CPUs | 162 tasks | 427.8m CPU rem | 8.9m rem | 18.8 avg lb
Enumerated 20,010,485 programs | 159 jobs | 47 CPUs | 159 tasks | 423.2m CPU rem | 8.8m rem | 18.9 avg lb
Enumerated 20,332,896 programs | 159 jobs | 47 CPUs | 159 tasks | 419.1m CPU rem | 8.7m rem | 19.0 avg lb
Enumerated 20,397,757 programs | 159 jobs | 47 CPUs | 159 tasks | 414.9m CPU rem | 8.6m rem | 19.1 avg lb
Enumerated 20,498,731 programs | 158 jobs | 47 CPUs | 158 tasks | 410.4m CPU rem | 8.6m rem | 19.1 avg lb
Enumerated 20,620,842 programs | 158 jobs | 47 CPUs | 158 tasks | 405.8m CPU rem | 8.5m rem | 19.1 avg lb
Enumerated 20,822,169 programs | 154 jobs | 47 CPUs | 154 tasks | 400.3m CPU rem | 8.3m rem | 19.2 avg lb
Enumerated 20,943,708 programs | 153 jobs | 47 CPUs | 153 tasks | 393.3m CPU rem | 8.2m rem | 19.2 avg lb
Enumerated 21,134,937 programs | 152 jobs | 47 CPUs | 152 tasks | 387.3m CPU rem | 8.1m rem | 19.3 avg lb
Enumerated 21,312,377 programs | 152 jobs | 47 CPUs | 152 tasks | 380.2m CPU rem | 7.9m rem | 19.4 avg lb
Enumerated 21,520,756 programs | 149 jobs | 47 CPUs | 149 tasks | 374.8m CPU rem | 7.8m rem | 19.4 avg lb
Enumerated 21,687,238 programs | 149 jobs | 47 CPUs | 149 tasks | 369.9m CPU rem | 7.7m rem | 19.4 avg lb
Enumerated 21,992,522 programs | 146 jobs | 47 CPUs | 146 tasks | 364.5m CPU rem | 7.6m rem | 19.5 avg lb
Enumerated 22,180,380 programs | 146 jobs | 47 CPUs | 146 tasks | 359.6m CPU rem | 7.5m rem | 19.6 avg lb
Enumerated 22,221,722 programs | 146 jobs | 47 CPUs | 146 tasks | 353.9m CPU rem | 7.4m rem | 19.7 avg lb
Enumerated 22,557,180 programs | 145 jobs | 47 CPUs | 145 tasks | 348.0m CPU rem | 7.3m rem | 19.8 avg lb
Enumerated 22,674,467 programs | 145 jobs | 47 CPUs | 145 tasks | 343.0m CPU rem | 7.1m rem | 19.8 avg lb
Enumerated 22,779,176 programs | 144 jobs | 47 CPUs | 144 tasks | 338.8m CPU rem | 7.1m rem | 19.8 avg lb
Enumerated 22,950,380 programs | 144 jobs | 47 CPUs | 144 tasks | 334.6m CPU rem | 7.0m rem | 19.8 avg lb
Enumerated 23,186,905 programs | 143 jobs | 47 CPUs | 143 tasks | 330.1m CPU rem | 6.9m rem | 19.9 avg lb
Enumerated 23,457,038 programs | 141 jobs | 47 CPUs | 141 tasks | 325.7m CPU rem | 6.8m rem | 20.0 avg lb
Enumerated 23,883,692 programs | 137 jobs | 47 CPUs | 137 tasks | 321.0m CPU rem | 6.7m rem | 20.2 avg lb
Enumerated 24,062,955 programs | 135 jobs | 47 CPUs | 135 tasks | 316.4m CPU rem | 6.6m rem | 20.2 avg lb
Enumerated 24,257,982 programs | 133 jobs | 47 CPUs | 133 tasks | 310.5m CPU rem | 6.5m rem | 20.3 avg lb
Enumerated 24,446,319 programs | 131 jobs | 47 CPUs | 131 tasks | 305.2m CPU rem | 6.4m rem | 20.4 avg lb
Enumerated 24,640,977 programs | 130 jobs | 47 CPUs | 130 tasks | 301.1m CPU rem | 6.3m rem | 20.4 avg lb
Enumerated 24,839,016 programs | 130 jobs | 47 CPUs | 130 tasks | 293.5m CPU rem | 6.1m rem | 20.5 avg lb
Enumerated 24,953,435 programs | 130 jobs | 47 CPUs | 130 tasks | 289.3m CPU rem | 6.0m rem | 20.5 avg lb
Enumerated 25,097,231 programs | 130 jobs | 47 CPUs | 130 tasks | 284.0m CPU rem | 5.9m rem | 20.6 avg lb
Enumerated 25,212,198 programs | 128 jobs | 47 CPUs | 128 tasks | 276.3m CPU rem | 5.8m rem | 20.7 avg lb
Enumerated 25,372,232 programs | 128 jobs | 47 CPUs | 128 tasks | 272.2m CPU rem | 5.7m rem | 20.7 avg lb
Enumerated 25,640,516 programs | 126 jobs | 47 CPUs | 126 tasks | 268.0m CPU rem | 5.6m rem | 20.8 avg lb
Enumerated 25,857,354 programs | 125 jobs | 47 CPUs | 125 tasks | 263.1m CPU rem | 5.5m rem | 20.9 avg lb
Enumerated 25,921,458 programs | 125 jobs | 47 CPUs | 125 tasks | 258.2m CPU rem | 5.4m rem | 21.0 avg lb
Enumerated 25,987,504 programs | 125 jobs | 47 CPUs | 125 tasks | 253.3m CPU rem | 5.3m rem | 21.0 avg lb
Enumerated 26,081,026 programs | 124 jobs | 47 CPUs | 124 tasks | 248.8m CPU rem | 5.2m rem | 21.0 avg lb
Enumerated 26,498,842 programs | 120 jobs | 47 CPUs | 120 tasks | 244.7m CPU rem | 5.1m rem | 21.1 avg lb
Enumerated 26,613,894 programs | 119 jobs | 47 CPUs | 119 tasks | 239.8m CPU rem | 5.0m rem | 21.2 avg lb
Enumerated 27,218,977 programs | 111 jobs | 47 CPUs | 111 tasks | 235.7m CPU rem | 4.9m rem | 21.3 avg lb
Enumerated 27,508,762 programs | 107 jobs | 47 CPUs | 107 tasks | 231.5m CPU rem | 4.8m rem | 21.4 avg lb
Enumerated 27,610,961 programs | 107 jobs | 47 CPUs | 107 tasks | 226.6m CPU rem | 4.7m rem | 21.5 avg lb
Enumerated 27,757,476 programs | 106 jobs | 47 CPUs | 106 tasks | 221.9m CPU rem | 4.6m rem | 21.5 avg lb
Enumerated 27,817,148 programs | 106 jobs | 47 CPUs | 106 tasks | 217.8m CPU rem | 4.5m rem | 21.6 avg lb
Enumerated 27,968,277 programs | 104 jobs | 47 CPUs | 104 tasks | 212.3m CPU rem | 4.4m rem | 21.6 avg lb
Enumerated 28,141,687 programs | 102 jobs | 47 CPUs | 102 tasks | 207.1m CPU rem | 4.3m rem | 21.7 avg lb
Enumerated 28,320,974 programs | 101 jobs | 47 CPUs | 101 tasks | 202.7m CPU rem | 4.2m rem | 21.8 avg lb
Enumerated 28,480,554 programs | 98 jobs | 47 CPUs | 98 tasks | 197.0m CPU rem | 4.1m rem | 21.8 avg lb
Enumerated 28,682,537 programs | 96 jobs | 47 CPUs | 96 tasks | 192.5m CPU rem | 4.0m rem | 22.0 avg lb
Enumerated 28,798,308 programs | 95 jobs | 47 CPUs | 95 tasks | 187.0m CPU rem | 3.9m rem | 22.0 avg lb
Enumerated 29,083,279 programs | 92 jobs | 47 CPUs | 92 tasks | 181.2m CPU rem | 3.8m rem | 22.1 avg lb
Enumerated 29,320,591 programs | 88 jobs | 47 CPUs | 88 tasks | 175.4m CPU rem | 3.7m rem | 22.2 avg lb
Enumerated 29,507,224 programs | 86 jobs | 47 CPUs | 86 tasks | 170.8m CPU rem | 3.6m rem | 22.3 avg lb
Enumerated 29,646,390 programs | 84 jobs | 47 CPUs | 84 tasks | 164.7m CPU rem | 3.4m rem | 22.4 avg lb
Enumerated 30,037,606 programs | 79 jobs | 47 CPUs | 79 tasks | 160.5m CPU rem | 3.3m rem | 22.6 avg lb
Enumerated 30,243,185 programs | 78 jobs | 47 CPUs | 78 tasks | 156.2m CPU rem | 3.3m rem | 22.7 avg lb
Enumerated 30,420,152 programs | 75 jobs | 47 CPUs | 75 tasks | 150.4m CPU rem | 3.1m rem | 22.9 avg lb
Enumerated 30,596,132 programs | 74 jobs | 47 CPUs | 74 tasks | 143.5m CPU rem | 3.0m rem | 23.0 avg lb
Enumerated 31,016,012 programs | 68 jobs | 47 CPUs | 68 tasks | 138.5m CPU rem | 2.9m rem | 23.2 avg lb
Enumerated 31,283,769 programs | 65 jobs | 47 CPUs | 65 tasks | 133.0m CPU rem | 2.8m rem | 23.5 avg lb
Enumerated 31,513,893 programs | 62 jobs | 47 CPUs | 62 tasks | 128.8m CPU rem | 2.7m rem | 23.8 avg lb
Enumerated 31,832,951 programs | 58 jobs | 47 CPUs | 58 tasks | 124.3m CPU rem | 2.6m rem | 24.1 avg lb
Enumerated 32,137,580 programs | 55 jobs | 47 CPUs | 55 tasks | 119.9m CPU rem | 2.5m rem | 24.5 avg lb
Enumerated 32,165,025 programs | 55 jobs | 47 CPUs | 55 tasks | 115.5m CPU rem | 2.4m rem | 24.8 avg lb
Enumerated 32,245,678 programs | 54 jobs | 47 CPUs | 54 tasks | 110.9m CPU rem | 2.3m rem | 25.0 avg lb
Enumerated 32,432,541 programs | 52 jobs | 47 CPUs | 52 tasks | 106.5m CPU rem | 2.2m rem | 25.2 avg lb
Enumerated 32,652,385 programs | 50 jobs | 47 CPUs | 50 tasks | 102.4m CPU rem | 2.1m rem | 25.8 avg lb
Enumerated 32,814,296 programs | 50 jobs | 47 CPUs | 50 tasks | 98.0m CPU rem | 2.0m rem | 26.0 avg lb
Enumerated 32,845,755 programs | 50 jobs | 47 CPUs | 50 tasks | 92.8m CPU rem | 1.9m rem | 26.3 avg lb
Enumerated 32,946,831 programs | 49 jobs | 47 CPUs | 49 tasks | 86.7m CPU rem | 1.8m rem | 26.5 avg lb
Enumerated 33,176,207 programs | 49 jobs | 47 CPUs | 49 tasks | 80.4m CPU rem | 1.7m rem | 26.8 avg lb
Enumerated 33,420,313 programs | 47 jobs | 47 CPUs | 47 tasks | 74.9m CPU rem | 1.6m rem | 27.1 avg lb
Enumerated 33,731,501 programs | 46 jobs | 47 CPUs | 46 tasks | 68.9m CPU rem | 1.5m rem | 27.4 avg lb
Enumerated 33,867,845 programs | 45 jobs | 46 CPUs | 45 tasks | 64.3m CPU rem | 1.4m rem | 27.6 avg lb
Enumerated 34,303,974 programs | 40 jobs | 45 CPUs | 40 tasks | 59.7m CPU rem | 1.5m rem | 28.1 avg lb
Enumerated 34,593,411 programs | 39 jobs | 47 CPUs | 39 tasks | 55.3m CPU rem | 1.4m rem | 28.5 avg lb
Enumerated 34,791,887 programs | 37 jobs | 47 CPUs | 37 tasks | 52.0m CPU rem | 1.4m rem | 28.8 avg lb
Enumerated 34,958,815 programs | 36 jobs | 47 CPUs | 36 tasks | 46.0m CPU rem | 1.2m rem | 29.0 avg lb
Enumerated 35,200,756 programs | 36 jobs | 47 CPUs | 36 tasks | 41.4m CPU rem | 1.1m rem | 29.2 avg lb
Enumerated 35,363,015 programs | 35 jobs | 46 CPUs | 35 tasks | 36.3m CPU rem | 1.0m rem | 29.4 avg lb
Enumerated 35,788,482 programs | 32 jobs | 45 CPUs | 32 tasks | 32.7m CPU rem | 1.0m rem | 30.1 avg lb
Enumerated 36,022,188 programs | 32 jobs | 47 CPUs | 32 tasks | 29.0m CPU rem | 0.9m rem | 30.2 avg lb
Enumerated 36,270,451 programs | 30 jobs | 47 CPUs | 30 tasks | 26.4m CPU rem | 0.9m rem | 30.7 avg lb
Enumerated 36,515,292 programs | 28 jobs | 46 CPUs | 28 tasks | 22.7m CPU rem | 0.8m rem | 31.1 avg lb
Enumerated 36,634,007 programs | 26 jobs | 44 CPUs | 26 tasks | 20.3m CPU rem | 0.8m rem | 31.4 avg lb
Enumerated 36,902,220 programs | 22 jobs | 39 CPUs | 22 tasks | 17.7m CPU rem | 0.8m rem | 32.2 avg lb
Enumerated 37,096,532 programs | 20 jobs | 43 CPUs | 20 tasks | 15.5m CPU rem | 0.7m rem | 32.8 avg lb
Enumerated 37,513,974 programs | 19 jobs | 45 CPUs | 19 tasks | 13.5m CPU rem | 0.7m rem | 33.4 avg lb
Enumerated 37,581,186 programs | 18 jobs | 44 CPUs | 18 tasks | 10.9m CPU rem | 0.6m rem | 33.7 avg lb
Enumerated 37,809,670 programs | 17 jobs | 45 CPUs | 17 tasks | 9.0m CPU rem | 0.5m rem | 34.2 avg lb
Enumerated 38,332,897 programs | 14 jobs | 47 CPUs | 14 tasks | 6.8m CPU rem | 0.5m rem | 35.9 avg lb
Enumerated 38,550,661 programs | 13 jobs | 47 CPUs | 13 tasks | 5.1m CPU rem | 0.4m rem | 36.5 avg lb
Enumerated 38,953,625 programs | 11 jobs | 45 CPUs | 11 tasks | 4.1m CPU rem | 0.3m rem | 37.6 avg lb
Enumerated 39,165,260 programs | 8 jobs | 43 CPUs | 8 tasks | 3.1m CPU rem | 0.3m rem | 40.0 avg lb
Enumerated 39,299,572 programs | 6 jobs | 26 CPUs | 6 tasks | 1.4m CPU rem | 0.2m rem | 41.0 avg lb
Enumerated 39,564,267 programs | 4 jobs | 45 CPUs | 4 tasks | 0.8m CPU rem | 0.2m rem | 44.5 avg lb
Enumerated 39,669,487 programs | 2 jobs | 13 CPUs | 2 tasks | 0.4m CPU rem | 0.1m rem | 45.0 avg lb
/usr/local/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:3441: RuntimeWarning: Mean of empty slice.
  out=out, **kwargs)
/usr/local/conda/lib/python3.7/site-packages/numpy/core/_methods.py:189: RuntimeWarning: invalid value encountered in double_scalars
  ret = ret.dtype.type(ret / rcount)
Enumerated 39,865,697 programs | 0 jobs | 0 CPUs | 0 tasks | 0.0m CPU rem | 0.0m rem | nan avg lb
We enumerated this many programs, for each task:
	 [146484, 17819, 148064, 88267, 139997, 147265, 154038, 86480, 82478, 141774, 131403, 134527, 84303, 3219, 156380, 141160, 118697, 86507, 73079, 149241, 3175, 151963, 84977, 84465, 81756, 165202, 152744, 136328, 84366, 85623, 3175, 84802, 140455, 142524, 150984, 3259, 151597, 206136, 145896, 144740, 84647, 144456, 145325, 141513, 76479, 85747, 134041, 78836, 3186, 84179, 82678, 144528, 162604, 98936, 86910, 411465, 10174, 75011, 138395, 128468, 113692, 135621, 77127, 79000, 91524, 78144, 80037, 137760, 129767, 125829, 129424, 165619, 142696, 94906, 131481, 78424, 79368, 134767, 7041, 71957, 138367, 75018, 3440, 77406, 74599, 73323, 2726, 93403, 131012, 76770, 74019, 68215, 141115, 129960, 3875, 77932, 75210, 80614, 148050, 70447, 74367, 135750, 405879, 101852, 75132, 50711, 66584, 141286, 78342, 98988, 146001, 74739, 3136, 63115, 72191, 54568, 75653, 75419, 148099, 72541, 131616, 75966, 157489, 72292, 127071, 77533, 81067, 146396, 3493, 139702, 73374, 74316, 74090, 106695, 157616, 156261, 70569, 74307, 130116, 2516, 74011, 1898, 146179, 159602, 72199, 198318, 79560, 73364, 183766, 3175, 78405, 1294, 157537, 146049, 3152, 138127, 133281, 72578, 78322, 135998, 73175, 126413, 131181, 2893, 135584, 78815, 166939, 136324, 147638, 91822, 83010, 647, 71978, 3114, 119390, 78248, 3177, 3175, 2682, 160625, 150199, 120929, 69396, 94312, 98730, 188407, 60344, 89664, 146378, 149713, 123906, 72705, 75851, 130469, 83942, 70194, 73192, 63020, 75269, 152379, 81919, 70765, 71266, 71272, 63286, 73262, 164380, 129857, 74325, 1116, 153822, 140430, 85317, 146329, 71299, 80432, 156815, 3204, 150745, 71891, 38901, 136664, 105843, 73955, 154165, 150818, 169823, 153329, 146805, 76311, 75361, 74559, 73672, 74294, 193637, 168427, 76915, 74865, 61181, 142326, 3157, 146089, 66252, 94391, 73741, 72049, 64046, 74334, 3071, 140572, 3138, 77458, 144188, 137930, 106550, 68198, 184372, 73756, 94000, 151548, 75650, 174983, 3204, 70687, 133764, 155876, 90910, 73483, 42694, 144463, 180147, 76173, 151838, 106564, 63017, 17958, 140632, 72761, 68564, 69649, 71172, 142694, 145011, 74164, 66195, 66076, 127791, 75241, 41131, 83599, 5069, 74535, 70344, 145291, 87153, 209938, 70860, 75943, 145053, 3264, 71962, 152714, 69093, 119468, 141245, 69809, 63638, 83229, 3169, 70052, 2602, 137075, 68169, 151817, 136263, 172239, 20266, 180154, 87324, 77332, 167019, 146829, 132053, 73842, 86345, 61368, 124278, 73782, 78940, 154939, 138607, 79292, 155279, 204811, 74377, 137982, 70724, 75424, 53153, 73673, 151937, 152523, 152078, 79691, 139280, 4886, 210597, 79431, 74068, 74127, 130876, 74544, 76563, 150106, 86318, 153243, 71620, 70678, 66161, 143492, 151329, 145565, 147642, 72680, 88486, 69199, 71931, 138479, 148901, 70340, 74000, 150324, 142950, 145098, 73675, 61579, 3205, 72603, 70790, 2698, 151228, 70094, 67612, 66314, 1009, 202531, 68966, 59855, 67555, 144446, 73412, 151620, 229573, 66500, 241712, 70106, 151404, 77975, 108445, 113252]
Recognizer 0 solved 53/400 tasks; total tasks solved is now 53.
Best recognizer: 0.
Currently using this much memory: 1226813440
Recognition model enumeration results for the best recognizer.
HIT 00d62c1b w/ (lambda (fillobj c4 $0)) ; log prior = -7.859037 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -6.378541 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -6.411617 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (ic_compress2 $0)) ; log prior = -5.589423 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -6.397614 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -15.660345 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (#(lambda (overlay (flipy $0))) (ic_connectX $0) $0)) ; log prior = -14.839686 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -6.058683 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (ic_compress2 (repeatX $0))) ; log prior = -16.607756 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -12.290112 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -6.189208 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -8.632334 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -8.249453 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -11.569969 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -5.547251 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (#(lambda (flipx (mirrorY $0))) (flipx $0))) ; log prior = -10.916219 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -7.788850 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -6.480971 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -5.621522 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -5.453685 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -5.819245 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (flipx $0)) ; log prior = -5.172120 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -8.430261 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (#(lambda (flipx (mirrorY $0))) $0)) ; log prior = -5.950319 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -6.530991 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -5.464037 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (ic_compress3 $0)) ; log prior = -5.775541 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -8.994463 ; log likelihood = 0.000000
HIT 7b6016b9 w/ (lambda (set_bg c3 (fillobj c2 $0))) ; log prior = -13.924727 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (#(lambda (flipx (mirrorY $0))) $0)) ; log prior = -5.630885 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.599664 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -16.823736 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -5.702469 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -5.806536 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -5.344876 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0))) ; log prior = -13.344912 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -5.606532 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) ; log prior = -11.018117 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -7.763462 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_connectY $0))) ; log prior = -9.724666 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -5.707532 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -5.528685 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -7.185279 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -8.722349 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))) ; log prior = -15.777363 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2)) ; log prior = -10.265331 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (rarestcol $0))) ; log prior = -11.174812 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -5.268034 ; log likelihood = 0.000000
HIT de1cd16c w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_compress3 (ic_erasecol c5 $0)))) ; log prior = -15.669509 ; log likelihood = 0.000000
HIT e3497940 w/ (lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0))) ; log prior = -14.161703 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (ic_compress3 $0)) ; log prior = -5.625628 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -8.851891 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -5.871724 ; log likelihood = 0.000000
Hits 53/400 tasks
Average description length of a program solving a task: 8.543013 nats
Recognition model average:  8 sec.	median: 0 	max: 115 	standard deviation 20
Cumulative results for the full ensemble of 1 recognizers: 
Frontiers discovered bottom up: 53
Total frontiers: 57
Average search time:  8 sec.	median: 0 	max: 115 	standard deviation 20
53 / 400 total hit tasks
              bottom miss  bottom hit  
top miss          347           6      
top hit            0           47      
Currently using this much memory: 1226813440
Showing the top 5 programs in each frontier being sent to the compressor:
00d62c1b
-0.46	(lambda (fillobj c4 $0))
-2.92	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c2))
-2.95	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1))
-2.97	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c5))
-3.01	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c6))

0b148d64
-0.72	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-0.76	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-5.09	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.10	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-5.12	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

1190e5a7
-0.11	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-4.43	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.47	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.48	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.48	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))

1cf80156
-1.94	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-1.96	(lambda (#(lambda (ic_composegrowing (split8 $0))) $0))
-1.97	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-1.97	(lambda (ic_compress2 $0))
-1.98	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))

1f85a75f
-0.89	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-0.92	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-3.73	(lambda (ic_pickunique (ic_splitall $0)))
-3.73	(lambda (pickmax_neg_interior_count (ic_splitall $0)))
-3.73	(lambda (pickmax_interior_count (ic_splitall $0)))

2013d3e2
-1.38	(lambda (left_half (top_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.38	(lambda (top_half (left_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.39	(lambda (left_half (top_half (ic_compress2 $0))))
-1.39	(lambda (top_half (left_half (ic_compress2 $0))))

22168020
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-8.56	(lambda (overlay $0 (ic_connectX $0)))
-8.56	(lambda (overlay (ic_connectX $0) $0))
-9.52	(lambda (swapxy (#(lambda (overlay $0 (ic_connectY $0))) (swapxy $0))))

22eb0ac0
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-8.52	(lambda (#(lambda (overlay (flipy $0))) (ic_connectX $0) $0))
-8.56	(lambda (overlay $0 (ic_connectX $0)))
-8.56	(lambda (overlay (ic_connectX $0) $0))

23b5c85d
-0.11	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-4.48	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-4.49	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-4.49	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

28bf18c6
-2.27	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (repeatX $0)))
-2.27	(lambda (repeatX (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-2.29	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (repeatX $0)))
-2.29	(lambda (repeatX (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-2.30	(lambda (repeatX (#(lambda (ic_composegrowing (split8 $0))) $0)))

2dee498d
-2.16	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (swapxy $0))))
-2.16	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (rot90 $0))))
-2.19	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (swapxy $0))))
-2.19	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (rot90 $0))))
-2.20	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (rot270 $0))))

39a8645d
-0.15	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-2.97	(lambda (pickcommon (split8 $0)))
-4.51	(lambda (#(lambda (pickcommon (split8 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.52	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-4.54	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (pickcommon (split8 $0))) $0)))

3af2c5a8
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-5.13	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.13	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.15	(lambda (mirrorX (mirrorY $0)))

3c9b0459
-0.74	(lambda (rot180 $0))
-0.75	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-5.10	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (rot180 $0)))
-5.10	(lambda (rot180 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.11	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

40853293
-0.70	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.70	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-5.16	(lambda (ic_toorigin (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.16	(lambda (ic_toorigin (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-12.04	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))

4258a5f9
-0.16	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5))
-3.50	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (rarestcol $0)))
-3.51	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (topcol $0)))
-3.52	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-4.58	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)))

445eab21
-0.80	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-0.80	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-3.00	(lambda (countToXY (countColours $0) (topcol $0)))
-3.34	(lambda (#(lambda (mirrorY (mirrorX $0))) (colourPixel (topcol $0))))
-4.23	(lambda (#(lambda (colourHull (topcol $0))) $0 (ic_center $0)))

496994bd
-0.72	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-0.76	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.11	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.11	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.12	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (overlay $0 (flipx $0))) $0)))

4c4377d9
-1.78	(lambda (mirrorY (#(lambda (overlay $0 (flipx $0))) $0)))
-1.79	(lambda (#(lambda (flipx (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.79	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.81	(lambda (mirrorY (flipx $0)))
-1.81	(lambda (#(lambda (flipx (mirrorY $0))) (flipx $0)))

5582e5ca
-0.17	(lambda (#(lambda (colourHull (topcol $0))) $0 $0))
-2.69	(lambda (colourHull (topcol $0) $0))
-4.53	(lambda (#(lambda (colourHull (topcol $0))) $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.53	(lambda (#(lambda (colourHull (topcol $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0) $0))
-4.55	(lambda (#(lambda (colourHull (topcol $0))) $0 (#(lambda (overlay (ic_connectY $0) $0)) $0)))

6150a2bd
-0.74	(lambda (rot180 $0))
-0.74	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-5.12	(lambda (rot180 (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.12	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-5.12	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (rot180 $0)))

62c24649
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-5.10	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.10	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.13	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

67a3c6ac
-0.73	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-0.76	(lambda (flipy $0))
-5.09	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.09	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (flipy $0))) $0)))
-5.11	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

67e8384a
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-5.13	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.13	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.13	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

68b16354
-0.73	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-0.76	(lambda (flipx $0))
-5.09	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-5.09	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.11	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

6d0aefbc
-0.11	(lambda (mirrorX $0))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (mirrorX $0)))
-4.49	(lambda (mirrorX (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorX $0)))
-4.49	(lambda (mirrorX (#(lambda (overlay (ic_connectY $0) $0)) $0)))

6fa7a44f
-1.13	(lambda (mirrorY $0))
-1.13	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-1.13	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))
-5.50	(lambda (left_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.50	(lambda (left_half (#(lambda (mirrorY (mirrorX $0))) $0)))

72ca375d
-0.11	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-4.48	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-4.49	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-4.49	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

7468f01a
-0.11	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-4.49	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (ic_compress2 (flipy $0))) $0)))
-4.49	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.49	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (flipy $0))) $0)))

746b3537
-0.71	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-0.78	(lambda (ic_compress3 $0))
-5.07	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.09	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.09	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

74dd1130
-0.74	(lambda (swapxy $0))
-0.75	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-5.10	(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.10	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (swapxy $0)))
-5.11	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

7b6016b9
-0.75	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (fillobj c2 $0) c3))
-0.79	(lambda (set_bg c3 (fillobj c2 $0)))
-3.27	(lambda (set_bg c3 (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c2 c3)))
-3.33	(lambda (set_bg c3 (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c2 c9)))

8be77c9e
-0.74	(lambda (mirrorY $0))
-0.74	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.12	(lambda (left_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.12	(lambda (left_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.12	(lambda (mirrorY (#(lambda (overlay $0 (ic_connectY $0))) $0)))

90c28cc7
-0.11	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-4.47	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.49	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.49	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

9565186b
-0.18	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-2.67	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5))
-2.70	(lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-5.20	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5 c5))
-5.23	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c6 c5))

9dfd6313
-0.74	(lambda (swapxy $0))
-0.75	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-5.10	(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.10	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (swapxy $0)))
-5.11	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

a416b8f3
-0.10	(lambda (repeatX $0))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (repeatX $0)))
-4.49	(lambda (repeatX (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (repeatX $0)))
-4.49	(lambda (repeatX (#(lambda (overlay (ic_connectY $0) $0)) $0)))

a5313dff
-0.15	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0))
-2.58	(lambda (fillobj c1 $0))
-4.57	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.58	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.60	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_toorigin $0)))

a740d043
-0.42	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0)))
-2.85	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c2 c1)))
-2.87	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c1)))
-2.90	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c5 c1)))
-2.90	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)))

a87f7484
-0.74	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.75	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-5.10	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.10	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-5.11	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)))

aabf363d
-0.73	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0)))
-0.75	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-5.11	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))))
-5.13	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))))
-5.14	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol (swapxy $0))))

b1948b0a
-0.16	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2))
-2.72	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2))
-4.55	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (overlay $0 (ic_connectY $0))) $0) c2))
-4.55	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)))
-4.55	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (overlay (ic_connectY $0) $0)) $0) c2))

b9b7f026
-2.06	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0)))
-2.06	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectY $0)))
-2.11	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_connectX $0)))
-2.11	(lambda (#(lambda (colourPixel (topcol $0))) (ic_connectX $0)))
-2.11	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_connectY $0)))

be94b721
-0.74	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.75	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-5.11	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-5.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)))
-5.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

c8f0f002
-0.11	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0))
-4.47	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-4.47	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))
-4.49	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.49	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))

c9e6f938
-0.10	(lambda (mirrorX $0))
-4.50	(lambda (top_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-4.50	(lambda (top_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-4.52	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (mirrorX $0)))
-4.52	(lambda (mirrorX (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))

ce22a75a
-0.40	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1))
-2.37	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (ic_makeborder $0)))
-2.37	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (ic_makeborder $0)))
-2.40	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_makeborder $0)))
-4.78	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) (#(lambda (overlay (ic_connectY $0) $0)) $0) c1))

d037b0a7
-0.07	(lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))
-3.45	(lambda (ic_embed (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0) $0))
-4.45	(lambda (top_half (#(lambda (overlay $0 (ic_connectY $0))) (mirrorY $0))))
-4.45	(lambda (top_half (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (flipx (mirrorY $0))) $0))))
-4.49	(lambda (top_half (flipx (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))))

d5d6de2d
-0.35	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2))
-2.35	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_connectX $0) c3))
-2.36	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) (ic_interior $0) c3))
-3.75	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 (rarestcol $0)))
-3.76	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 (topcol $0)))

d631b094
-1.12	(lambda (countToY (countPixels $0) (rarestcol $0)))
-1.13	(lambda (countToY (countPixels $0) (topcol $0)))
-1.14	(lambda (countToY (countPixels $0) (#(lambda (rarestcol (rot180 $0))) $0)))
-5.51	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (countToY (countPixels $0) (topcol $0))))
-5.51	(lambda (countToY (countPixels $0) (topcol (#(lambda (overlay $0 (ic_connectY $0))) $0))))

d9fac9be
-0.76	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-0.77	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-3.58	(lambda (pickcommon (split8 $0)))
-5.13	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-5.13	(lambda (#(lambda (pickcommon (split8 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

de1cd16c
-2.02	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_erasecol c5 $0))))
-2.02	(lambda (#(lambda (colourPixel (topcol $0))) (ic_erasecol c5 (#(lambda (ic_compress2 (ic_compress3 $0))) $0))))
-2.08	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_erasecol c5 $0))))
-2.08	(lambda (#(lambda (colourPixel (topcol $0))) (ic_erasecol c5 (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))))
-2.09	(lambda (#(lambda (colourPixel (topcol $0))) (ic_compress3 (ic_erasecol c5 $0))))

ded97339
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-12.02	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))
-12.43	(lambda (ic_composegrowing (#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1)))) $0 (lambda (lambda ($0 $1))))))
-14.10	(lambda (ic_composegrowing (lcons $0 (split8 (ic_connectY $0)))))

e3497940
-0.01	(lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0)))
-4.48	(lambda (left_half (overlay $0 (flipy $0))))
-7.95	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (flipy $0))))))
-7.95	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist $1 ($0 $1)))) $0 (lambda (flipy $0))))))

eb5a1d5d
-1.09	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.14	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.16	(lambda (ic_compress3 $0))
-5.45	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.47	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

ed36ccf7
-0.10	(lambda (rot90 $0))
-4.52	(lambda (flipx (swapxy $0)))
-4.52	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (rot90 $0)))
-4.52	(lambda (rot90 (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.53	(lambda (#(lambda (ic_filtercol (topcol $0) $0)) (rot90 $0)))

f25ffba3
-0.72	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-0.76	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.11	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-5.11	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.12	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (overlay $0 (flipx $0))) $0)))

Compression message saved to: compressionMessages/2023-04-15T03:35:06.916346
Compression backend will run for most 99 iterations
Total number of candidates: 4742
Constructed version spaces and coalesced candidates in 3.28586s.
Trimmed down the beam, have only 266 best candidates
Rewrote topK in 7.25787s.
Initial score: -552.234996
Scored candidates in 15.0592s.
Improved score to -548.902083 (dScore=3.332913) w/ new primitive
	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) : grid -> grid
rewrote all of the frontiers in 5.70528s.
Completed one step of memory consolidation in 32.3321s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))
  (lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
Total number of candidates: 4238
Constructed version spaces and coalesced candidates in 3.38793s.
Trimmed down the beam, have only 266 best candidates
Rewrote topK in 7.0581s.
Initial score: -549.771723
Scored candidates in 15.4656s.
Improved score to -548.112056 (dScore=1.659666) w/ new primitive
	#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) : grid -> colour -> grid
rewrote all of the frontiers in 5.78377s.
Completed one step of memory consolidation in 32.6753s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)))
Total number of candidates: 4236
Constructed version spaces and coalesced candidates in 3.35287s.
Trimmed down the beam, have only 265 best candidates
Rewrote topK in 7.00281s.
Initial score: -548.994942
Scored candidates in 15.7749s.
Improved score to -547.613636 (dScore=1.381306) w/ new primitive
	#(fillobj c2) : grid -> grid
rewrote all of the frontiers in 5.61927s.
Completed one step of memory consolidation in 32.7252s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(fillobj c2) $0) c3))
Total number of candidates: 4132
Constructed version spaces and coalesced candidates in 3.24769s.
Trimmed down the beam, have only 265 best candidates
Rewrote topK in 6.98419s.
Initial score: -548.501413
Scored candidates in 16.0456s.
Improved score to -547.177923 (dScore=1.323491) w/ new primitive
	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) : grid -> colour -> grid
rewrote all of the frontiers in 5.73046s.
Completed one step of memory consolidation in 32.9629s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2))
Total number of candidates: 3971
Constructed version spaces and coalesced candidates in 3.01717s.
Trimmed down the beam, have only 265 best candidates
Rewrote topK in 6.57151s.
Initial score: -548.042295
Scored candidates in 16.2901s.
Improved score to -547.757880 (dScore=0.284415) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) : grid -> grid
rewrote all of the frontiers in 5.20398s.
Completed one step of memory consolidation in 32.0257s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 6243
Constructed version spaces and coalesced candidates in 3.09753s.
Trimmed down the beam, have only 267 best candidates
Rewrote topK in 6.58338s.
Initial score: -548.712565
Scored candidates in 16.9045s.
Improved score to -548.445764 (dScore=0.266801) w/ new primitive
	#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) : grid -> colour
rewrote all of the frontiers in 5.19673s.
Completed one step of memory consolidation in 32.7641s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 6229
Constructed version spaces and coalesced candidates in 2.9504s.
Trimmed down the beam, have only 266 best candidates
Rewrote topK in 6.50826s.
Initial score: -549.391027
Scored candidates in 16.9674s.
Improved score to -549.175346 (dScore=0.215681) w/ new primitive
	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.20376s.
Completed one step of memory consolidation in 32.5969s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5981
Constructed version spaces and coalesced candidates in 3.03002s.
Trimmed down the beam, have only 264 best candidates
Rewrote topK in 6.40079s.
Initial score: -550.123816
Scored candidates in 17.2158s.
Improved score to -549.992649 (dScore=0.131167) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.203s.
Completed one step of memory consolidation in 32.8311s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5950
Constructed version spaces and coalesced candidates in 2.99267s.
Trimmed down the beam, have only 263 best candidates
Rewrote topK in 6.16887s.
Initial score: -550.943895
Scored candidates in 17.3475s.
Improved score to -550.839560 (dScore=0.104335) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.14084s.
Completed one step of memory consolidation in 32.6142s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 5623
Constructed version spaces and coalesced candidates in 3.14283s.
Trimmed down the beam, have only 263 best candidates
Rewrote topK in 6.43157s.
Initial score: -551.787999
Scored candidates in 17.7331s.
Improved score to -551.683281 (dScore=0.104718) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.15259s.
Completed one step of memory consolidation in 33.4594s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4228
Constructed version spaces and coalesced candidates in 3.09909s.
Trimmed down the beam, have only 260 best candidates
Rewrote topK in 6.3695s.
Initial score: -552.625533
Scored candidates in 17.9431s.
Improved score to -552.621291 (dScore=0.004241) w/ new primitive
	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.26477s.
Completed one step of memory consolidation in 33.6461s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3660
Constructed version spaces and coalesced candidates in 3.08239s.
Trimmed down the beam, have only 259 best candidates
Rewrote topK in 6.55181s.
Initial score: -553.575739
Scored candidates in 18.286s.
No improvement possible.
Completed one step of memory consolidation in 28.7462s.
completed ocaml compression in 6.50334m.
Finished consolidation.
Induced a grammar in 391.0 seconds
Grammar after iteration 3:
-0.583624	t0	$_
0.000000	grid -> pos	getpos
0.000000	grid -> size	getsize
-0.001670	grid -> count	countPixels
-0.003185	grid -> list(grid)	ic_splitall
-0.005710	grid -> list(grid)	split8
-0.008888	grid -> grid -> list(grid)	mklist
-0.008889	grid -> list(grid) -> list(grid)	lcons
-0.008889	(grid -> grid) -> list(grid) -> list(grid)	map
-0.008889	grid -> list(grid)	ic_splitcols
-0.008889	grid -> list(grid)	ic_splitcolumns
-0.008889	grid -> list(grid)	ic_splitrows
-0.032734	grid -> count	countColours
-0.183311	colour	c5
-0.188526	colour	c2
-0.216433	colour	c3
-0.218717	colour	c1
-0.225560	grid -> colour	rarestcol
-0.231644	grid -> colour	topcol
-0.246672	colour	c4
-0.246855	colour	c6
-0.249544	colour	c7
-0.249689	colour	c9
-0.249701	colour	c8
-1.642076	grid -> grid	left_half
-1.642149	grid -> grid	top_half
-1.642365	grid -> grid	repeatX
-1.642808	grid -> grid	mirrorX
-1.661494	grid -> grid	swapxy
-1.664302	grid -> grid	rot90
-1.666683	grid -> grid	ic_compress2
-1.668131	grid -> grid	mirrorY
-1.673388	grid -> grid -> grid	ic_embed
-1.673963	grid -> grid	rot180
-1.674389	count -> colour -> grid	countToY
-1.678816	grid -> grid	flipx
-1.688178	colour -> grid -> grid	set_bg
-1.690269	grid -> grid	ic_connectX
-1.690704	grid -> grid	ic_connectY
-1.690910	grid -> grid	ic_compress3
-1.695303	grid -> grid	flipy
-1.696175	grid -> grid	rot270
-1.697445	grid -> grid	ic_makeborder
-1.702249	colour -> grid -> grid	fillobj
-1.703225	colour -> grid -> grid	ic_erasecol
-1.703824	grid -> grid	ic_toorigin
-1.704969	colour -> grid -> grid	colourHull
-1.705305	list(grid) -> grid	pickcommon
-1.705314	list(grid) -> grid	pickmax_neg_interior_count
-1.705314	list(grid) -> grid	ic_pickunique
-1.705453	count -> colour -> grid	countToXY
-1.705465	colour -> grid	colourPixel
-1.706384	list(grid) -> grid	pickmax_interior_count
-1.706385	list(grid) -> grid	pickmax_size
-1.706385	list(grid) -> grid	pickmax_neg_size
-1.706385	list(grid) -> grid	pickmax_cols
-1.706694	grid -> grid	ic_center
-1.706706	grid -> grid -> grid	overlay
-1.706883	grid -> grid	ic_interior
-1.707033	list(grid) -> grid	ic_composegrowing
-1.707081	colour -> grid -> grid	ic_filtercol
-1.707178	colour -> grid -> grid	setcol
-1.707178	grid -> grid	ic_fill
-1.707178	count -> colour -> grid	countToX
-1.707178	grid -> grid	right_half
-1.707178	grid -> grid	bottom_half
-1.707178	list(grid) -> grid	pickmax_count
-1.707178	list(grid) -> grid	pickmax_neg_count
-1.707178	list(grid) -> grid	pickmax_x_pos
-1.707178	list(grid) -> grid	pickmax_x_neg
-1.707178	list(grid) -> grid	pickmax_y_pos
-1.707178	list(grid) -> grid	pickmax_y_neg
-1.707178	grid -> grid	repeatY
-1.707178	colour -> grid -> grid	get_bg
-1.707178	grid -> grid -> grid	logical_and
-0.008878	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist ($0 $1) $1)))
-0.008879	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 $1))))
-0.008889	grid -> (grid -> (grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1))))
-0.008889	((grid -> grid) -> grid -> grid) -> grid -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $0 ($1 (lambda (ic_connectY $0))))))
-0.008889	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $1 ($0 ic_connectY))))
-0.008889	grid -> ((grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0))))))
-0.008889	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 $1)))) $1 ($0 ic_connectY))))
-0.008889	((grid -> grid) -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist $0 ($1 ic_connectY))))
-0.226261	grid -> colour	#(lambda (rarestcol (rot180 $0)))
-0.239406	grid -> colour	#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.629831	grid -> grid	#(lambda (overlay (ic_connectY $0) $0))
-1.630842	grid -> grid	#(lambda (overlay $0 (ic_connectY $0)))
-1.635320	grid -> grid	#(lambda (ic_composegrowing (split8 $0)))
-1.636893	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))
-1.638049	grid -> grid	#(lambda (colourPixel (topcol $0)))
-1.642421	grid -> grid	#(lambda (mirrorY (mirrorX $0)))
-1.643150	grid -> grid	#(lambda (mirrorX (mirrorY $0)))
-1.646480	grid -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
-1.646980	grid -> grid	#(lambda (ic_compress2 (ic_compress3 $0)))
-1.650164	grid -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1))
-1.651852	grid -> colour -> grid	#(lambda (lambda (fillobj $0 (ic_makeborder $1))))
-1.653872	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0)))
-1.655307	grid -> grid	#(lambda (overlay $0 (flipx $0)))
-1.655825	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.656950	grid -> grid	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-1.658032	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6))
-1.660529	grid -> grid	#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.668855	grid -> grid	#(lambda (flipx (mirrorY $0)))
-1.669782	grid -> grid	#(lambda (fillobj c1 (ic_toorigin $0)))
-1.670012	grid -> grid	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-1.670584	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))
-1.670690	grid -> grid	#(lambda (pickcommon (split8 $0)))
-1.671419	grid -> grid	#(lambda (ic_filtercol (topcol $0) $0))
-1.672890	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3))
-1.673811	grid -> colour -> grid	#(lambda (lambda (ic_connectX (get_bg $0 $1))))
-1.674367	grid -> grid	#(fillobj c2)
-1.674623	grid -> grid	#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-1.674727	grid -> grid -> grid	#(lambda (overlay (flipy $0)))
-1.675080	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.676061	grid -> grid -> grid	#(lambda (colourHull (topcol $0)))
-1.676554	grid -> colour -> grid	#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1))))
-1.678381	grid -> grid	#(lambda (ic_compress2 (flipy $0)))
-1.680686	grid -> grid	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.681166	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-1.681346	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-1.681971	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.682143	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.685806	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.704312	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2)))))
-1.705194	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2)))))
Currently using this much memory: 1226813440
Exported checkpoint to ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=3_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
 [+] Cleared recognition model from:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=3_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
     and exported to:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=3_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False_graph=True.pickle
     Use this one for graphing.
Exporting primitive graph to ./experimentOutputs/arc/_primitives_2_depth.pdf
Exported primitive graph to ./experimentOutputs/arc/_primitives_2_unordered.pdf
ecIterator count 2
Currently using this much memory: 1238425600
Currently using this much memory: 1238425600
Using a waking task batch of size: 400
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 48 jobs | 0 CPUs | 400 tasks | 192.0m CPU rem | 4.0m rem | 0.0 avg lb
Enumerated     7,119 programs | 48 jobs | 47 CPUs | 400 tasks | 169.0m CPU rem | 3.5m rem | 12.0 avg lb
Enumerated   221,480 programs | 48 jobs | 47 CPUs | 399 tasks | 164.9m CPU rem | 3.4m rem | 13.3 avg lb
Enumerated   342,500 programs | 24 jobs | 47 CPUs | 190 tasks | 0.1m CPU rem | 0.0m rem | 14.0 avg lb
/usr/local/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:3441: RuntimeWarning: Mean of empty slice.
  out=out, **kwargs)
/usr/local/conda/lib/python3.7/site-packages/numpy/core/_methods.py:189: RuntimeWarning: invalid value encountered in double_scalars
  ret = ret.dtype.type(ret / rcount)
Enumerated   860,900 programs | 0 jobs | 26 CPUs | 0 tasks | 0.0m CPU rem | 0.0m rem | nan avg lb
Enumerated 1,462,820 programs | 0 jobs | 0 CPUs | 0 tasks | 0.0m CPU rem | 0.0m rem | nan avg lb
We enumerated this many programs, for each task:
	
Generative model enumeration results:
HIT 00d62c1b w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)) ; log prior = -7.958795 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.945524 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -7.964456 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) $0)) ; log prior = -7.943951 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.945524 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -7.945524 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (repeatX $0))) ; log prior = -12.450393 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.979321 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -7.951051 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.982594 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -10.480337 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (colourPixel (topcol $0))) $0))) ; log prior = -12.451604 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.963938 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0))) ; log prior = -12.480313 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -11.430820 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -7.982594 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -7.951051 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -7.987012 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -7.951051 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.963938 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -7.951439 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)) ; log prior = -7.962503 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -7.965581 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -7.987012 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.955611 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -7.969160 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -7.976762 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.955611 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -12.489033 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -7.969160 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -7.950996 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -7.978413 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) ; log prior = -12.456618 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.978643 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0))) ; log prior = -13.990673 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -10.491732 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_connectX $0))) ; log prior = -12.499453 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -7.978643 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -7.955111 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -7.951439 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -10.515744 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))) ; log prior = -12.467155 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2)) ; log prior = -10.506590 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -7.965581 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -7.955611 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -7.972933 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -7.963938 ; log likelihood = 0.000000
Hits 47/400 tasks
Average description length of a program solving a task: 9.052573 nats
Generative model average:  22 sec.	median: 4 	max: 223 	standard deviation 43
Currently using this much memory: 1238425600
Frontiers discovered top down: 47
Total frontiers: 57
Using an ensemble size of 1. Note that we will only store and test on the best recognition model.
Currently using this much memory: 1238425600
(ID=0): Training a recognition model from 57 frontiers, 100% Helmholtz, feature extractor MikelArcNet.
(ID=0): Got 0 Helmholtz frontiers - random Helmholtz training? : True
(ID=0): Contextual? False
(ID=0): Bias optimal? False
(ID=0): Aux loss? False (n.b. we train a 'auxiliary' classifier anyway - this controls if gradients propagate back to the future extractor)
Sampling 1000 programs from the prior on 48 CPUs...
Got 502/1000 valid samples.
(ID=0): Epoch 1 Loss 4.44
(ID=0): 	vs MDL (w/o neural net) 3.45
(ID=0): 	1 cum grad steps. 0.2 steps/sec | 124-way aux classif loss 0.6949
(ID=0): Epoch 50 Loss 31.80
(ID=0): 	vs MDL (w/o neural net) 30.74
(ID=0): 	50 cum grad steps. 6.4 steps/sec | 124-way aux classif loss 0.6960
(ID=0): Epoch 100 Loss 28.31
(ID=0): 	vs MDL (w/o neural net) 28.31
(ID=0): 	100 cum grad steps. 9.8 steps/sec | 124-way aux classif loss 0.6334
(ID=0): Epoch 150 Loss 23.26
(ID=0): 	vs MDL (w/o neural net) 23.65
(ID=0): 	150 cum grad steps. 12.0 steps/sec | 124-way aux classif loss 0.5696
(ID=0): Epoch 200 Loss 30.49
(ID=0): 	vs MDL (w/o neural net) 31.49
(ID=0): 	200 cum grad steps. 13.4 steps/sec | 124-way aux classif loss 0.5281
(ID=0): Epoch 250 Loss 26.20
(ID=0): 	vs MDL (w/o neural net) 27.45
(ID=0): 	250 cum grad steps. 14.5 steps/sec | 124-way aux classif loss 0.4894
(ID=0): Epoch 300 Loss 25.15
(ID=0): 	vs MDL (w/o neural net) 26.90
(ID=0): 	300 cum grad steps. 15.2 steps/sec | 124-way aux classif loss 0.4584
(ID=0): Epoch 350 Loss 25.67
(ID=0): 	vs MDL (w/o neural net) 27.80
(ID=0): 	350 cum grad steps. 15.8 steps/sec | 124-way aux classif loss 0.4534
(ID=0): Epoch 400 Loss 28.87
(ID=0): 	vs MDL (w/o neural net) 31.56
(ID=0): 	400 cum grad steps. 16.2 steps/sec | 124-way aux classif loss 0.4473
(ID=0): Epoch 450 Loss 24.84
(ID=0): 	vs MDL (w/o neural net) 27.02
(ID=0): 	450 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.4152
(ID=0): Epoch 500 Loss 24.33
(ID=0): 	vs MDL (w/o neural net) 26.33
(ID=0): 	500 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.3906
Sampling 1000 programs from the prior on 48 CPUs...
Got 481/1000 valid samples.
(ID=0): Epoch 550 Loss 28.27
(ID=0): 	vs MDL (w/o neural net) 30.75
(ID=0): 	550 cum grad steps. 14.8 steps/sec | 124-way aux classif loss 0.3681
(ID=0): Epoch 600 Loss 20.10
(ID=0): 	vs MDL (w/o neural net) 22.02
(ID=0): 	600 cum grad steps. 15.1 steps/sec | 124-way aux classif loss 0.3322
(ID=0): Epoch 650 Loss 25.40
(ID=0): 	vs MDL (w/o neural net) 27.98
(ID=0): 	650 cum grad steps. 15.5 steps/sec | 124-way aux classif loss 0.3242
(ID=0): Epoch 700 Loss 24.03
(ID=0): 	vs MDL (w/o neural net) 26.56
(ID=0): 	700 cum grad steps. 15.7 steps/sec | 124-way aux classif loss 0.3121
(ID=0): Epoch 750 Loss 24.52
(ID=0): 	vs MDL (w/o neural net) 26.97
(ID=0): 	750 cum grad steps. 16.0 steps/sec | 124-way aux classif loss 0.2860
(ID=0): Epoch 800 Loss 27.30
(ID=0): 	vs MDL (w/o neural net) 29.70
(ID=0): 	800 cum grad steps. 16.2 steps/sec | 124-way aux classif loss 0.2830
(ID=0): Epoch 850 Loss 26.91
(ID=0): 	vs MDL (w/o neural net) 29.53
(ID=0): 	850 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.2822
(ID=0): Epoch 900 Loss 27.48
(ID=0): 	vs MDL (w/o neural net) 29.93
(ID=0): 	900 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.2777
(ID=0): Epoch 950 Loss 24.02
(ID=0): 	vs MDL (w/o neural net) 25.65
(ID=0): 	950 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.2599
Sampling 1000 programs from the prior on 48 CPUs...
Got 498/1000 valid samples.
(ID=0): Epoch 1000 Loss 22.78
(ID=0): 	vs MDL (w/o neural net) 24.89
(ID=0): 	1000 cum grad steps. 15.5 steps/sec | 124-way aux classif loss 0.2571
(ID=0): Epoch 1050 Loss 27.78
(ID=0): 	vs MDL (w/o neural net) 30.62
(ID=0): 	1050 cum grad steps. 15.7 steps/sec | 124-way aux classif loss 0.2694
(ID=0): Epoch 1100 Loss 28.47
(ID=0): 	vs MDL (w/o neural net) 31.21
(ID=0): 	1100 cum grad steps. 15.8 steps/sec | 124-way aux classif loss 0.2641
(ID=0): Epoch 1150 Loss 22.22
(ID=0): 	vs MDL (w/o neural net) 24.48
(ID=0): 	1150 cum grad steps. 16.0 steps/sec | 124-way aux classif loss 0.2412
(ID=0): Epoch 1200 Loss 24.52
(ID=0): 	vs MDL (w/o neural net) 27.15
(ID=0): 	1200 cum grad steps. 16.1 steps/sec | 124-way aux classif loss 0.2343
(ID=0): Epoch 1250 Loss 23.05
(ID=0): 	vs MDL (w/o neural net) 25.17
(ID=0): 	1250 cum grad steps. 16.3 steps/sec | 124-way aux classif loss 0.2362
(ID=0): Epoch 1300 Loss 24.95
(ID=0): 	vs MDL (w/o neural net) 27.63
(ID=0): 	1300 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.2261
(ID=0): Epoch 1350 Loss 24.14
(ID=0): 	vs MDL (w/o neural net) 26.31
(ID=0): 	1350 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.2331
(ID=0): Epoch 1400 Loss 24.04
(ID=0): 	vs MDL (w/o neural net) 26.39
(ID=0): 	1400 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.2300
(ID=0): Epoch 1450 Loss 28.37
(ID=0): 	vs MDL (w/o neural net) 31.41
(ID=0): 	1450 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.2397
Sampling 1000 programs from the prior on 48 CPUs...
Got 513/1000 valid samples.
(ID=0): Epoch 1500 Loss 27.56
(ID=0): 	vs MDL (w/o neural net) 30.59
(ID=0): 	1500 cum grad steps. 15.8 steps/sec | 124-way aux classif loss 0.2278
(ID=0): Epoch 1550 Loss 26.46
(ID=0): 	vs MDL (w/o neural net) 28.88
(ID=0): 	1550 cum grad steps. 15.9 steps/sec | 124-way aux classif loss 0.2258
(ID=0): Epoch 1600 Loss 25.49
(ID=0): 	vs MDL (w/o neural net) 28.36
(ID=0): 	1600 cum grad steps. 16.0 steps/sec | 124-way aux classif loss 0.2151
(ID=0): Epoch 1650 Loss 25.53
(ID=0): 	vs MDL (w/o neural net) 27.91
(ID=0): 	1650 cum grad steps. 16.1 steps/sec | 124-way aux classif loss 0.2196
(ID=0): Epoch 1700 Loss 24.63
(ID=0): 	vs MDL (w/o neural net) 27.02
(ID=0): 	1700 cum grad steps. 16.2 steps/sec | 124-way aux classif loss 0.2160
(ID=0): Epoch 1750 Loss 27.03
(ID=0): 	vs MDL (w/o neural net) 29.87
(ID=0): 	1750 cum grad steps. 16.3 steps/sec | 124-way aux classif loss 0.2190
(ID=0): Epoch 1800 Loss 25.38
(ID=0): 	vs MDL (w/o neural net) 27.82
(ID=0): 	1800 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.2148
(ID=0): Epoch 1850 Loss 28.73
(ID=0): 	vs MDL (w/o neural net) 31.35
(ID=0): 	1850 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.2221
(ID=0): Epoch 1900 Loss 28.21
(ID=0): 	vs MDL (w/o neural net) 30.79
(ID=0): 	1900 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.2229
(ID=0): Epoch 1950 Loss 27.48
(ID=0): 	vs MDL (w/o neural net) 29.94
(ID=0): 	1950 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.2164
Sampling 1000 programs from the prior on 48 CPUs...
Got 490/1000 valid samples.
(ID=0): Epoch 2000 Loss 26.24
(ID=0): 	vs MDL (w/o neural net) 28.86
(ID=0): 	2000 cum grad steps. 16.0 steps/sec | 124-way aux classif loss 0.2153
(ID=0): Epoch 2050 Loss 23.47
(ID=0): 	vs MDL (w/o neural net) 26.03
(ID=0): 	2050 cum grad steps. 16.1 steps/sec | 124-way aux classif loss 0.2153
(ID=0): Epoch 2100 Loss 25.96
(ID=0): 	vs MDL (w/o neural net) 28.53
(ID=0): 	2100 cum grad steps. 16.2 steps/sec | 124-way aux classif loss 0.2151
(ID=0): Epoch 2150 Loss 28.05
(ID=0): 	vs MDL (w/o neural net) 30.53
(ID=0): 	2150 cum grad steps. 16.3 steps/sec | 124-way aux classif loss 0.2130
(ID=0): Epoch 2200 Loss 25.97
(ID=0): 	vs MDL (w/o neural net) 28.48
(ID=0): 	2200 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.2010
(ID=0): Epoch 2250 Loss 28.73
(ID=0): 	vs MDL (w/o neural net) 31.55
(ID=0): 	2250 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.2060
(ID=0): Epoch 2300 Loss 26.21
(ID=0): 	vs MDL (w/o neural net) 28.84
(ID=0): 	2300 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.2010
(ID=0): Epoch 2350 Loss 24.31
(ID=0): 	vs MDL (w/o neural net) 26.86
(ID=0): 	2350 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1895
(ID=0): Epoch 2400 Loss 27.94
(ID=0): 	vs MDL (w/o neural net) 30.36
(ID=0): 	2400 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.2046
(ID=0): Epoch 2450 Loss 22.62
(ID=0): 	vs MDL (w/o neural net) 24.82
(ID=0): 	2450 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1821
Sampling 1000 programs from the prior on 48 CPUs...
Got 480/1000 valid samples.
(ID=0): Epoch 2500 Loss 24.12
(ID=0): 	vs MDL (w/o neural net) 26.46
(ID=0): 	2500 cum grad steps. 16.3 steps/sec | 124-way aux classif loss 0.1874
(ID=0): Epoch 2550 Loss 24.00
(ID=0): 	vs MDL (w/o neural net) 26.56
(ID=0): 	2550 cum grad steps. 16.3 steps/sec | 124-way aux classif loss 0.1844
(ID=0): Epoch 2600 Loss 21.43
(ID=0): 	vs MDL (w/o neural net) 23.80
(ID=0): 	2600 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.1781
(ID=0): Epoch 2650 Loss 24.00
(ID=0): 	vs MDL (w/o neural net) 26.77
(ID=0): 	2650 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.1890
(ID=0): Epoch 2700 Loss 25.62
(ID=0): 	vs MDL (w/o neural net) 29.01
(ID=0): 	2700 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1935
(ID=0): Epoch 2750 Loss 26.86
(ID=0): 	vs MDL (w/o neural net) 29.58
(ID=0): 	2750 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1961
(ID=0): Epoch 2800 Loss 25.47
(ID=0): 	vs MDL (w/o neural net) 28.03
(ID=0): 	2800 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1939
(ID=0): Epoch 2850 Loss 27.29
(ID=0): 	vs MDL (w/o neural net) 30.12
(ID=0): 	2850 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1964
(ID=0): Epoch 2900 Loss 23.36
(ID=0): 	vs MDL (w/o neural net) 25.87
(ID=0): 	2900 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1827
(ID=0): Epoch 2950 Loss 25.36
(ID=0): 	vs MDL (w/o neural net) 27.98
(ID=0): 	2950 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1938
Sampling 1000 programs from the prior on 48 CPUs...
Got 522/1000 valid samples.
(ID=0): Epoch 3000 Loss 23.71
(ID=0): 	vs MDL (w/o neural net) 26.35
(ID=0): 	3000 cum grad steps. 16.4 steps/sec | 124-way aux classif loss 0.1853
(ID=0): Epoch 3050 Loss 22.41
(ID=0): 	vs MDL (w/o neural net) 24.95
(ID=0): 	3050 cum grad steps. 16.5 steps/sec | 124-way aux classif loss 0.1771
(ID=0): Epoch 3100 Loss 27.30
(ID=0): 	vs MDL (w/o neural net) 30.22
(ID=0): 	3100 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1923
(ID=0): Epoch 3150 Loss 25.03
(ID=0): 	vs MDL (w/o neural net) 27.32
(ID=0): 	3150 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1842
(ID=0): Epoch 3200 Loss 24.60
(ID=0): 	vs MDL (w/o neural net) 27.05
(ID=0): 	3200 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1841
(ID=0): Epoch 3250 Loss 22.31
(ID=0): 	vs MDL (w/o neural net) 24.81
(ID=0): 	3250 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1749
(ID=0): Epoch 3300 Loss 27.82
(ID=0): 	vs MDL (w/o neural net) 30.40
(ID=0): 	3300 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1966
(ID=0): Epoch 3350 Loss 27.87
(ID=0): 	vs MDL (w/o neural net) 30.50
(ID=0): 	3350 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1994
(ID=0): Epoch 3400 Loss 24.49
(ID=0): 	vs MDL (w/o neural net) 27.21
(ID=0): 	3400 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1856
(ID=0): Epoch 3450 Loss 22.84
(ID=0): 	vs MDL (w/o neural net) 25.18
(ID=0): 	3450 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1728
Sampling 1000 programs from the prior on 48 CPUs...
Got 490/1000 valid samples.
(ID=0): Epoch 3500 Loss 22.41
(ID=0): 	vs MDL (w/o neural net) 24.83
(ID=0): 	3500 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1739
(ID=0): Epoch 3550 Loss 24.75
(ID=0): 	vs MDL (w/o neural net) 27.00
(ID=0): 	3550 cum grad steps. 16.6 steps/sec | 124-way aux classif loss 0.1829
(ID=0): Epoch 3600 Loss 25.86
(ID=0): 	vs MDL (w/o neural net) 28.55
(ID=0): 	3600 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1885
(ID=0): Epoch 3650 Loss 23.89
(ID=0): 	vs MDL (w/o neural net) 26.20
(ID=0): 	3650 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1799
(ID=0): Epoch 3700 Loss 23.08
(ID=0): 	vs MDL (w/o neural net) 25.61
(ID=0): 	3700 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1725
(ID=0): Epoch 3750 Loss 25.30
(ID=0): 	vs MDL (w/o neural net) 27.91
(ID=0): 	3750 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1856
(ID=0): Epoch 3800 Loss 24.89
(ID=0): 	vs MDL (w/o neural net) 27.35
(ID=0): 	3800 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1811
(ID=0): Epoch 3850 Loss 20.61
(ID=0): 	vs MDL (w/o neural net) 22.82
(ID=0): 	3850 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1797
(ID=0): Epoch 3900 Loss 24.83
(ID=0): 	vs MDL (w/o neural net) 27.37
(ID=0): 	3900 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1889
(ID=0): Epoch 3950 Loss 22.98
(ID=0): 	vs MDL (w/o neural net) 25.36
(ID=0): 	3950 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1770
Sampling 1000 programs from the prior on 48 CPUs...
Got 493/1000 valid samples.
(ID=0): Epoch 4000 Loss 25.55
(ID=0): 	vs MDL (w/o neural net) 28.06
(ID=0): 	4000 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1849
(ID=0): Epoch 4050 Loss 28.23
(ID=0): 	vs MDL (w/o neural net) 31.02
(ID=0): 	4050 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1962
(ID=0): Epoch 4100 Loss 22.73
(ID=0): 	vs MDL (w/o neural net) 25.33
(ID=0): 	4100 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1703
(ID=0): Epoch 4150 Loss 28.45
(ID=0): 	vs MDL (w/o neural net) 30.96
(ID=0): 	4150 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1986
(ID=0): Epoch 4200 Loss 28.63
(ID=0): 	vs MDL (w/o neural net) 31.49
(ID=0): 	4200 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1960
(ID=0): Epoch 4250 Loss 24.74
(ID=0): 	vs MDL (w/o neural net) 27.46
(ID=0): 	4250 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1785
(ID=0): Epoch 4300 Loss 22.77
(ID=0): 	vs MDL (w/o neural net) 25.32
(ID=0): 	4300 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1711
(ID=0): Epoch 4350 Loss 25.78
(ID=0): 	vs MDL (w/o neural net) 28.53
(ID=0): 	4350 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1874
(ID=0): Epoch 4400 Loss 28.18
(ID=0): 	vs MDL (w/o neural net) 31.16
(ID=0): 	4400 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1931
(ID=0): Epoch 4450 Loss 24.46
(ID=0): 	vs MDL (w/o neural net) 26.94
(ID=0): 	4450 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1797
Sampling 1000 programs from the prior on 48 CPUs...
Got 486/1000 valid samples.
(ID=0): Epoch 4500 Loss 26.78
(ID=0): 	vs MDL (w/o neural net) 29.50
(ID=0): 	4500 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.1895
(ID=0): Epoch 4550 Loss 26.82
(ID=0): 	vs MDL (w/o neural net) 29.87
(ID=0): 	4550 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1915
(ID=0): Epoch 4600 Loss 25.12
(ID=0): 	vs MDL (w/o neural net) 27.58
(ID=0): 	4600 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1823
(ID=0): Epoch 4650 Loss 22.92
(ID=0): 	vs MDL (w/o neural net) 25.58
(ID=0): 	4650 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1714
(ID=0): Epoch 4700 Loss 23.82
(ID=0): 	vs MDL (w/o neural net) 26.25
(ID=0): 	4700 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1760
(ID=0): Epoch 4750 Loss 25.96
(ID=0): 	vs MDL (w/o neural net) 28.65
(ID=0): 	4750 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1844
(ID=0): Epoch 4800 Loss 27.96
(ID=0): 	vs MDL (w/o neural net) 30.73
(ID=0): 	4800 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1954
(ID=0): Epoch 4850 Loss 22.88
(ID=0): 	vs MDL (w/o neural net) 25.34
(ID=0): 	4850 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1726
(ID=0): Epoch 4900 Loss 25.52
(ID=0): 	vs MDL (w/o neural net) 28.37
(ID=0): 	4900 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1847
(ID=0): Epoch 4950 Loss 25.93
(ID=0): 	vs MDL (w/o neural net) 28.49
(ID=0): 	4950 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1847
Sampling 1000 programs from the prior on 48 CPUs...
Got 491/1000 valid samples.
(ID=0): Epoch 5000 Loss 27.64
(ID=0): 	vs MDL (w/o neural net) 30.35
(ID=0): 	5000 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1954
(ID=0): Epoch 5050 Loss 25.53
(ID=0): 	vs MDL (w/o neural net) 28.47
(ID=0): 	5050 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1818
(ID=0): Epoch 5100 Loss 24.21
(ID=0): 	vs MDL (w/o neural net) 26.50
(ID=0): 	5100 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1760
(ID=0): Epoch 5150 Loss 24.96
(ID=0): 	vs MDL (w/o neural net) 27.71
(ID=0): 	5150 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1819
(ID=0): Epoch 5200 Loss 25.94
(ID=0): 	vs MDL (w/o neural net) 28.64
(ID=0): 	5200 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1830
(ID=0): Epoch 5250 Loss 22.56
(ID=0): 	vs MDL (w/o neural net) 25.22
(ID=0): 	5250 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1666
(ID=0): Epoch 5300 Loss 23.24
(ID=0): 	vs MDL (w/o neural net) 25.82
(ID=0): 	5300 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1693
(ID=0): Epoch 5350 Loss 25.94
(ID=0): 	vs MDL (w/o neural net) 28.32
(ID=0): 	5350 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1843
(ID=0): Epoch 5400 Loss 23.02
(ID=0): 	vs MDL (w/o neural net) 25.56
(ID=0): 	5400 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1732
Sampling 1000 programs from the prior on 48 CPUs...
Got 494/1000 valid samples.
(ID=0): Epoch 5450 Loss 28.87
(ID=0): 	vs MDL (w/o neural net) 31.52
(ID=0): 	5450 cum grad steps. 16.7 steps/sec | 124-way aux classif loss 0.2144
(ID=0): Epoch 5500 Loss 25.77
(ID=0): 	vs MDL (w/o neural net) 28.51
(ID=0): 	5500 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1829
(ID=0): Epoch 5550 Loss 22.71
(ID=0): 	vs MDL (w/o neural net) 25.52
(ID=0): 	5550 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1722
(ID=0): Epoch 5600 Loss 26.85
(ID=0): 	vs MDL (w/o neural net) 29.53
(ID=0): 	5600 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1877
(ID=0): Epoch 5650 Loss 24.02
(ID=0): 	vs MDL (w/o neural net) 26.28
(ID=0): 	5650 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1765
(ID=0): Epoch 5700 Loss 24.43
(ID=0): 	vs MDL (w/o neural net) 26.98
(ID=0): 	5700 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1774
(ID=0): Epoch 5750 Loss 25.56
(ID=0): 	vs MDL (w/o neural net) 28.25
(ID=0): 	5750 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1805
(ID=0): Epoch 5800 Loss 24.27
(ID=0): 	vs MDL (w/o neural net) 26.95
(ID=0): 	5800 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1771
(ID=0): Epoch 5850 Loss 26.02
(ID=0): 	vs MDL (w/o neural net) 28.44
(ID=0): 	5850 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1833
(ID=0): Epoch 5900 Loss 23.57
(ID=0): 	vs MDL (w/o neural net) 26.18
(ID=0): 	5900 cum grad steps. 17.0 steps/sec | 124-way aux classif loss 0.1723
Sampling 1000 programs from the prior on 48 CPUs...
Got 470/1000 valid samples.
(ID=0): Epoch 5950 Loss 26.34
(ID=0): 	vs MDL (w/o neural net) 28.75
(ID=0): 	5950 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1874
(ID=0): Epoch 6000 Loss 23.71
(ID=0): 	vs MDL (w/o neural net) 26.39
(ID=0): 	6000 cum grad steps. 16.8 steps/sec | 124-way aux classif loss 0.1789
(ID=0): Epoch 6050 Loss 25.64
(ID=0): 	vs MDL (w/o neural net) 27.94
(ID=0): 	6050 cum grad steps. 16.9 steps/sec | 124-way aux classif loss 0.1835
(ID=0):   Trained recognition model in 360.02771401405334 seconds
Currently using this much memory: 1244446720
Trained an ensemble of 1 recognition models, now enumerating.
Enumerating from recognizer 0 of 1
Evaluated recognition model in 3.8 seconds
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 400 jobs | 0 CPUs | 400 tasks | 1600.0m CPU rem | 33.3m rem | 0.0 avg lb
Enumerated     2,195 programs | 400 jobs | 47 CPUs | 400 tasks | 1596.7m CPU rem | 33.3m rem | 1.6 avg lb
Enumerated     6,368 programs | 400 jobs | 47 CPUs | 400 tasks | 1592.2m CPU rem | 33.2m rem | 1.9 avg lb
Enumerated    11,787 programs | 400 jobs | 47 CPUs | 400 tasks | 1587.8m CPU rem | 33.1m rem | 2.3 avg lb
Enumerated    33,965 programs | 399 jobs | 47 CPUs | 399 tasks | 1579.9m CPU rem | 32.9m rem | 2.6 avg lb
Enumerated    70,752 programs | 395 jobs | 47 CPUs | 395 tasks | 1561.1m CPU rem | 32.5m rem | 2.8 avg lb
Enumerated    97,684 programs | 394 jobs | 47 CPUs | 394 tasks | 1553.3m CPU rem | 32.4m rem | 3.1 avg lb
Enumerated   114,929 programs | 394 jobs | 47 CPUs | 394 tasks | 1548.9m CPU rem | 32.3m rem | 3.4 avg lb
Enumerated   131,439 programs | 394 jobs | 47 CPUs | 394 tasks | 1544.5m CPU rem | 32.2m rem | 3.8 avg lb
Enumerated   155,827 programs | 394 jobs | 47 CPUs | 394 tasks | 1540.0m CPU rem | 32.1m rem | 4.1 avg lb
Enumerated   178,502 programs | 394 jobs | 47 CPUs | 394 tasks | 1535.7m CPU rem | 32.0m rem | 4.4 avg lb
Enumerated   205,918 programs | 394 jobs | 47 CPUs | 394 tasks | 1531.5m CPU rem | 31.9m rem | 4.8 avg lb
Enumerated   230,576 programs | 393 jobs | 47 CPUs | 393 tasks | 1523.7m CPU rem | 31.7m rem | 5.1 avg lb
Enumerated   251,127 programs | 392 jobs | 47 CPUs | 392 tasks | 1515.7m CPU rem | 31.6m rem | 5.4 avg lb
Enumerated   270,739 programs | 392 jobs | 47 CPUs | 392 tasks | 1511.4m CPU rem | 31.5m rem | 5.8 avg lb
Enumerated   291,724 programs | 391 jobs | 47 CPUs | 391 tasks | 1503.4m CPU rem | 31.3m rem | 6.1 avg lb
Enumerated   311,624 programs | 390 jobs | 47 CPUs | 390 tasks | 1495.6m CPU rem | 31.2m rem | 6.4 avg lb
Enumerated   334,287 programs | 388 jobs | 47 CPUs | 388 tasks | 1484.3m CPU rem | 30.9m rem | 6.7 avg lb
Enumerated   358,146 programs | 387 jobs | 47 CPUs | 387 tasks | 1476.5m CPU rem | 30.8m rem | 7.0 avg lb
Enumerated   384,605 programs | 387 jobs | 47 CPUs | 387 tasks | 1472.1m CPU rem | 30.7m rem | 7.4 avg lb
Enumerated   411,418 programs | 387 jobs | 47 CPUs | 387 tasks | 1467.8m CPU rem | 30.6m rem | 7.7 avg lb
Enumerated   428,224 programs | 386 jobs | 47 CPUs | 386 tasks | 1460.1m CPU rem | 30.4m rem | 8.1 avg lb
Enumerated   454,852 programs | 386 jobs | 47 CPUs | 386 tasks | 1455.9m CPU rem | 30.3m rem | 8.4 avg lb
Enumerated   483,293 programs | 385 jobs | 47 CPUs | 385 tasks | 1447.9m CPU rem | 30.2m rem | 8.7 avg lb
Enumerated   509,579 programs | 383 jobs | 47 CPUs | 383 tasks | 1436.5m CPU rem | 29.9m rem | 9.1 avg lb
Enumerated   533,209 programs | 382 jobs | 47 CPUs | 382 tasks | 1428.6m CPU rem | 29.8m rem | 9.4 avg lb
Enumerated   561,629 programs | 382 jobs | 47 CPUs | 382 tasks | 1424.3m CPU rem | 29.7m rem | 9.7 avg lb
Enumerated   592,398 programs | 382 jobs | 47 CPUs | 382 tasks | 1420.1m CPU rem | 29.6m rem | 10.1 avg lb
Enumerated   622,920 programs | 380 jobs | 47 CPUs | 380 tasks | 1408.7m CPU rem | 29.3m rem | 10.4 avg lb
Enumerated   640,051 programs | 380 jobs | 47 CPUs | 380 tasks | 1404.4m CPU rem | 29.3m rem | 10.8 avg lb
Enumerated   663,310 programs | 379 jobs | 47 CPUs | 379 tasks | 1396.7m CPU rem | 29.1m rem | 11.1 avg lb
Enumerated   684,052 programs | 379 jobs | 47 CPUs | 379 tasks | 1392.4m CPU rem | 29.0m rem | 11.5 avg lb
Enumerated   707,934 programs | 379 jobs | 47 CPUs | 379 tasks | 1388.2m CPU rem | 28.9m rem | 11.8 avg lb
Enumerated   731,174 programs | 378 jobs | 47 CPUs | 378 tasks | 1380.5m CPU rem | 28.8m rem | 12.0 avg lb
Enumerated   755,291 programs | 378 jobs | 47 CPUs | 378 tasks | 1376.4m CPU rem | 28.7m rem | 12.1 avg lb
Enumerated   781,692 programs | 377 jobs | 47 CPUs | 377 tasks | 1368.5m CPU rem | 28.5m rem | 12.1 avg lb
Enumerated   804,776 programs | 376 jobs | 47 CPUs | 376 tasks | 1360.6m CPU rem | 28.3m rem | 12.2 avg lb
Enumerated   831,186 programs | 376 jobs | 47 CPUs | 376 tasks | 1356.1m CPU rem | 28.3m rem | 12.3 avg lb
Enumerated   846,969 programs | 376 jobs | 47 CPUs | 376 tasks | 1351.9m CPU rem | 28.2m rem | 12.3 avg lb
Enumerated   853,969 programs | 376 jobs | 47 CPUs | 376 tasks | 1347.7m CPU rem | 28.1m rem | 12.4 avg lb
Enumerated   864,012 programs | 376 jobs | 47 CPUs | 376 tasks | 1343.1m CPU rem | 28.0m rem | 12.4 avg lb
Enumerated   866,248 programs | 376 jobs | 47 CPUs | 376 tasks | 1338.9m CPU rem | 27.9m rem | 12.4 avg lb
Enumerated   873,754 programs | 376 jobs | 47 CPUs | 376 tasks | 1334.6m CPU rem | 27.8m rem | 12.5 avg lb
Enumerated   882,007 programs | 376 jobs | 47 CPUs | 376 tasks | 1330.1m CPU rem | 27.7m rem | 12.5 avg lb
Enumerated   930,926 programs | 376 jobs | 47 CPUs | 376 tasks | 1325.5m CPU rem | 27.6m rem | 12.6 avg lb
Enumerated   950,772 programs | 376 jobs | 47 CPUs | 376 tasks | 1321.0m CPU rem | 27.5m rem | 12.6 avg lb
Enumerated 1,016,194 programs | 376 jobs | 47 CPUs | 376 tasks | 1316.1m CPU rem | 27.4m rem | 12.6 avg lb
Enumerated 1,062,872 programs | 376 jobs | 47 CPUs | 376 tasks | 1311.7m CPU rem | 27.3m rem | 12.7 avg lb
Enumerated 1,115,604 programs | 376 jobs | 47 CPUs | 376 tasks | 1307.0m CPU rem | 27.2m rem | 12.7 avg lb
Enumerated 1,167,731 programs | 376 jobs | 47 CPUs | 376 tasks | 1302.7m CPU rem | 27.1m rem | 12.7 avg lb
Enumerated 1,220,564 programs | 376 jobs | 47 CPUs | 376 tasks | 1298.4m CPU rem | 27.0m rem | 12.8 avg lb
Enumerated 1,273,298 programs | 376 jobs | 47 CPUs | 376 tasks | 1293.6m CPU rem | 27.0m rem | 12.8 avg lb
Enumerated 1,320,435 programs | 376 jobs | 47 CPUs | 376 tasks | 1289.0m CPU rem | 26.9m rem | 12.8 avg lb
Enumerated 1,358,253 programs | 376 jobs | 47 CPUs | 376 tasks | 1284.3m CPU rem | 26.8m rem | 12.9 avg lb
Enumerated 1,410,158 programs | 376 jobs | 47 CPUs | 376 tasks | 1279.7m CPU rem | 26.7m rem | 12.9 avg lb
Enumerated 1,461,462 programs | 376 jobs | 47 CPUs | 376 tasks | 1275.0m CPU rem | 26.6m rem | 12.9 avg lb
Enumerated 1,506,800 programs | 376 jobs | 47 CPUs | 376 tasks | 1270.3m CPU rem | 26.5m rem | 13.0 avg lb
Enumerated 1,585,094 programs | 376 jobs | 47 CPUs | 376 tasks | 1265.5m CPU rem | 26.4m rem | 13.0 avg lb
Enumerated 1,617,325 programs | 376 jobs | 47 CPUs | 376 tasks | 1260.8m CPU rem | 26.3m rem | 13.0 avg lb
Enumerated 1,713,083 programs | 376 jobs | 47 CPUs | 376 tasks | 1256.0m CPU rem | 26.2m rem | 13.1 avg lb
Enumerated 1,761,144 programs | 376 jobs | 47 CPUs | 376 tasks | 1251.3m CPU rem | 26.1m rem | 13.1 avg lb
Enumerated 1,824,306 programs | 376 jobs | 47 CPUs | 376 tasks | 1246.7m CPU rem | 26.0m rem | 13.1 avg lb
Enumerated 1,894,623 programs | 376 jobs | 47 CPUs | 376 tasks | 1242.0m CPU rem | 25.9m rem | 13.2 avg lb
Enumerated 1,913,524 programs | 376 jobs | 47 CPUs | 376 tasks | 1237.4m CPU rem | 25.8m rem | 13.2 avg lb
Enumerated 1,962,093 programs | 376 jobs | 47 CPUs | 376 tasks | 1233.0m CPU rem | 25.7m rem | 13.2 avg lb
Enumerated 2,027,576 programs | 376 jobs | 47 CPUs | 376 tasks | 1228.1m CPU rem | 25.6m rem | 13.3 avg lb
Enumerated 2,053,858 programs | 376 jobs | 47 CPUs | 376 tasks | 1223.3m CPU rem | 25.5m rem | 13.3 avg lb
Enumerated 2,085,977 programs | 376 jobs | 47 CPUs | 376 tasks | 1218.7m CPU rem | 25.4m rem | 13.3 avg lb
Enumerated 2,174,760 programs | 376 jobs | 47 CPUs | 376 tasks | 1214.0m CPU rem | 25.3m rem | 13.4 avg lb
Enumerated 2,246,429 programs | 376 jobs | 47 CPUs | 376 tasks | 1209.3m CPU rem | 25.2m rem | 13.4 avg lb
Enumerated 2,325,748 programs | 376 jobs | 47 CPUs | 376 tasks | 1205.0m CPU rem | 25.1m rem | 13.4 avg lb
Enumerated 2,379,770 programs | 376 jobs | 47 CPUs | 376 tasks | 1200.1m CPU rem | 25.0m rem | 13.5 avg lb
Enumerated 2,431,913 programs | 376 jobs | 47 CPUs | 376 tasks | 1194.3m CPU rem | 24.9m rem | 13.5 avg lb
Enumerated 2,487,623 programs | 376 jobs | 47 CPUs | 376 tasks | 1189.5m CPU rem | 24.8m rem | 13.5 avg lb
Enumerated 2,548,652 programs | 376 jobs | 47 CPUs | 376 tasks | 1184.8m CPU rem | 24.7m rem | 13.6 avg lb
Enumerated 2,568,153 programs | 376 jobs | 47 CPUs | 376 tasks | 1180.0m CPU rem | 24.6m rem | 13.6 avg lb
Enumerated 2,604,583 programs | 376 jobs | 47 CPUs | 376 tasks | 1175.8m CPU rem | 24.5m rem | 13.6 avg lb
Enumerated 2,684,085 programs | 376 jobs | 47 CPUs | 376 tasks | 1171.1m CPU rem | 24.4m rem | 13.6 avg lb
Enumerated 2,751,467 programs | 376 jobs | 47 CPUs | 376 tasks | 1166.8m CPU rem | 24.3m rem | 13.7 avg lb
Enumerated 2,805,629 programs | 376 jobs | 47 CPUs | 376 tasks | 1162.5m CPU rem | 24.2m rem | 13.7 avg lb
Enumerated 2,845,115 programs | 376 jobs | 47 CPUs | 376 tasks | 1157.9m CPU rem | 24.1m rem | 13.7 avg lb
Enumerated 2,909,357 programs | 375 jobs | 47 CPUs | 375 tasks | 1150.8m CPU rem | 24.0m rem | 13.8 avg lb
Enumerated 2,971,293 programs | 375 jobs | 47 CPUs | 375 tasks | 1146.1m CPU rem | 23.9m rem | 13.8 avg lb
Enumerated 3,037,082 programs | 375 jobs | 47 CPUs | 375 tasks | 1141.4m CPU rem | 23.8m rem | 13.8 avg lb
Enumerated 3,101,907 programs | 375 jobs | 47 CPUs | 375 tasks | 1136.6m CPU rem | 23.7m rem | 13.9 avg lb
Enumerated 3,150,484 programs | 375 jobs | 47 CPUs | 375 tasks | 1131.7m CPU rem | 23.6m rem | 13.9 avg lb
Enumerated 3,219,358 programs | 375 jobs | 47 CPUs | 375 tasks | 1127.3m CPU rem | 23.5m rem | 13.9 avg lb
Enumerated 3,251,986 programs | 375 jobs | 47 CPUs | 375 tasks | 1122.9m CPU rem | 23.4m rem | 14.0 avg lb
Enumerated 3,299,368 programs | 375 jobs | 47 CPUs | 375 tasks | 1118.2m CPU rem | 23.3m rem | 14.0 avg lb
Enumerated 3,348,447 programs | 375 jobs | 47 CPUs | 375 tasks | 1113.5m CPU rem | 23.2m rem | 14.0 avg lb
Enumerated 3,409,600 programs | 375 jobs | 47 CPUs | 375 tasks | 1108.6m CPU rem | 23.1m rem | 14.1 avg lb
Enumerated 3,463,791 programs | 375 jobs | 47 CPUs | 375 tasks | 1104.3m CPU rem | 23.0m rem | 14.1 avg lb
Enumerated 3,535,252 programs | 374 jobs | 47 CPUs | 374 tasks | 1097.5m CPU rem | 22.9m rem | 14.1 avg lb
Enumerated 3,601,550 programs | 374 jobs | 47 CPUs | 374 tasks | 1093.1m CPU rem | 22.8m rem | 14.2 avg lb
Enumerated 3,651,837 programs | 374 jobs | 47 CPUs | 374 tasks | 1088.1m CPU rem | 22.7m rem | 14.2 avg lb
Enumerated 3,698,218 programs | 374 jobs | 47 CPUs | 374 tasks | 1083.5m CPU rem | 22.6m rem | 14.2 avg lb
Enumerated 3,766,243 programs | 374 jobs | 47 CPUs | 374 tasks | 1078.7m CPU rem | 22.5m rem | 14.3 avg lb
Enumerated 3,851,967 programs | 374 jobs | 47 CPUs | 374 tasks | 1074.0m CPU rem | 22.4m rem | 14.3 avg lb
Enumerated 3,913,126 programs | 374 jobs | 47 CPUs | 374 tasks | 1069.3m CPU rem | 22.3m rem | 14.4 avg lb
Enumerated 3,968,136 programs | 374 jobs | 47 CPUs | 374 tasks | 1064.7m CPU rem | 22.2m rem | 14.4 avg lb
Enumerated 4,064,300 programs | 374 jobs | 47 CPUs | 374 tasks | 1060.5m CPU rem | 22.1m rem | 14.4 avg lb
Enumerated 4,103,682 programs | 374 jobs | 47 CPUs | 374 tasks | 1055.7m CPU rem | 22.0m rem | 14.5 avg lb
Enumerated 4,148,396 programs | 371 jobs | 47 CPUs | 371 tasks | 1041.4m CPU rem | 21.7m rem | 14.5 avg lb
Enumerated 4,219,029 programs | 371 jobs | 47 CPUs | 371 tasks | 1036.6m CPU rem | 21.6m rem | 14.5 avg lb
Enumerated 4,243,803 programs | 371 jobs | 47 CPUs | 371 tasks | 1031.7m CPU rem | 21.5m rem | 14.6 avg lb
Enumerated 4,279,023 programs | 370 jobs | 47 CPUs | 370 tasks | 1017.2m CPU rem | 21.2m rem | 14.6 avg lb
Enumerated 4,329,804 programs | 369 jobs | 47 CPUs | 369 tasks | 978.0m CPU rem | 20.4m rem | 14.6 avg lb
Enumerated 4,454,760 programs | 366 jobs | 47 CPUs | 366 tasks | 973.4m CPU rem | 20.3m rem | 14.6 avg lb
Enumerated 4,705,429 programs | 363 jobs | 47 CPUs | 363 tasks | 967.3m CPU rem | 20.2m rem | 14.6 avg lb
Enumerated 4,997,847 programs | 357 jobs | 47 CPUs | 357 tasks | 962.6m CPU rem | 20.1m rem | 14.6 avg lb
Enumerated 5,138,982 programs | 356 jobs | 47 CPUs | 356 tasks | 957.7m CPU rem | 20.0m rem | 14.6 avg lb
Enumerated 5,261,784 programs | 352 jobs | 47 CPUs | 352 tasks | 949.4m CPU rem | 19.8m rem | 14.6 avg lb
Enumerated 5,457,866 programs | 349 jobs | 47 CPUs | 349 tasks | 944.8m CPU rem | 19.7m rem | 14.7 avg lb
Enumerated 5,634,786 programs | 344 jobs | 47 CPUs | 344 tasks | 940.6m CPU rem | 19.6m rem | 14.7 avg lb
Enumerated 5,861,604 programs | 341 jobs | 47 CPUs | 341 tasks | 936.4m CPU rem | 19.5m rem | 14.7 avg lb
Enumerated 6,027,847 programs | 335 jobs | 47 CPUs | 335 tasks | 932.0m CPU rem | 19.4m rem | 14.7 avg lb
Enumerated 6,303,264 programs | 332 jobs | 47 CPUs | 332 tasks | 927.8m CPU rem | 19.3m rem | 14.8 avg lb
Enumerated 6,464,932 programs | 329 jobs | 47 CPUs | 329 tasks | 923.5m CPU rem | 19.2m rem | 14.8 avg lb
Enumerated 6,644,769 programs | 328 jobs | 47 CPUs | 328 tasks | 919.2m CPU rem | 19.2m rem | 14.8 avg lb
Enumerated 6,740,279 programs | 324 jobs | 47 CPUs | 324 tasks | 915.3m CPU rem | 19.1m rem | 14.9 avg lb
Enumerated 6,893,658 programs | 323 jobs | 47 CPUs | 323 tasks | 911.3m CPU rem | 19.0m rem | 14.9 avg lb
Enumerated 7,060,982 programs | 322 jobs | 47 CPUs | 322 tasks | 907.1m CPU rem | 18.9m rem | 14.9 avg lb
Enumerated 7,120,587 programs | 320 jobs | 47 CPUs | 320 tasks | 898.8m CPU rem | 18.7m rem | 14.9 avg lb
Enumerated 7,138,984 programs | 320 jobs | 47 CPUs | 320 tasks | 884.1m CPU rem | 18.4m rem | 15.0 avg lb
Enumerated 7,141,842 programs | 320 jobs | 47 CPUs | 320 tasks | 879.5m CPU rem | 18.3m rem | 15.0 avg lb
Enumerated 7,147,967 programs | 320 jobs | 47 CPUs | 320 tasks | 871.3m CPU rem | 18.2m rem | 15.0 avg lb
Enumerated 7,200,689 programs | 319 jobs | 47 CPUs | 319 tasks | 861.9m CPU rem | 18.0m rem | 15.0 avg lb
Enumerated 7,309,505 programs | 317 jobs | 47 CPUs | 317 tasks | 857.2m CPU rem | 17.9m rem | 15.0 avg lb
Enumerated 7,472,095 programs | 313 jobs | 47 CPUs | 313 tasks | 852.6m CPU rem | 17.8m rem | 15.0 avg lb
Enumerated 7,683,242 programs | 310 jobs | 47 CPUs | 310 tasks | 845.7m CPU rem | 17.6m rem | 15.1 avg lb
Enumerated 7,736,033 programs | 309 jobs | 47 CPUs | 309 tasks | 841.4m CPU rem | 17.5m rem | 15.1 avg lb
Enumerated 7,954,403 programs | 305 jobs | 47 CPUs | 305 tasks | 833.2m CPU rem | 17.4m rem | 15.1 avg lb
Enumerated 8,104,239 programs | 302 jobs | 47 CPUs | 302 tasks | 829.0m CPU rem | 17.3m rem | 15.1 avg lb
Enumerated 8,241,975 programs | 299 jobs | 47 CPUs | 299 tasks | 822.1m CPU rem | 17.1m rem | 15.1 avg lb
Enumerated 8,338,278 programs | 297 jobs | 47 CPUs | 297 tasks | 817.7m CPU rem | 17.0m rem | 15.1 avg lb
Enumerated 8,452,235 programs | 295 jobs | 47 CPUs | 295 tasks | 813.5m CPU rem | 16.9m rem | 15.1 avg lb
Enumerated 8,642,518 programs | 291 jobs | 47 CPUs | 291 tasks | 809.0m CPU rem | 16.9m rem | 15.2 avg lb
Enumerated 8,864,788 programs | 288 jobs | 47 CPUs | 288 tasks | 804.6m CPU rem | 16.8m rem | 15.2 avg lb
Enumerated 9,064,482 programs | 283 jobs | 47 CPUs | 283 tasks | 800.4m CPU rem | 16.7m rem | 15.2 avg lb
Enumerated 9,377,547 programs | 277 jobs | 47 CPUs | 277 tasks | 796.3m CPU rem | 16.6m rem | 15.3 avg lb
Enumerated 9,521,393 programs | 275 jobs | 47 CPUs | 275 tasks | 791.9m CPU rem | 16.5m rem | 15.3 avg lb
Enumerated 9,595,866 programs | 275 jobs | 47 CPUs | 275 tasks | 787.6m CPU rem | 16.4m rem | 15.3 avg lb
Enumerated 9,612,494 programs | 275 jobs | 47 CPUs | 275 tasks | 782.1m CPU rem | 16.3m rem | 15.3 avg lb
Enumerated 9,680,919 programs | 274 jobs | 47 CPUs | 274 tasks | 777.5m CPU rem | 16.2m rem | 15.4 avg lb
Enumerated 9,742,790 programs | 273 jobs | 47 CPUs | 273 tasks | 772.7m CPU rem | 16.1m rem | 15.4 avg lb
Enumerated 9,783,532 programs | 272 jobs | 47 CPUs | 272 tasks | 765.4m CPU rem | 15.9m rem | 15.4 avg lb
Enumerated 9,836,056 programs | 271 jobs | 47 CPUs | 271 tasks | 760.2m CPU rem | 15.8m rem | 15.4 avg lb
Enumerated 9,839,173 programs | 271 jobs | 47 CPUs | 271 tasks | 755.3m CPU rem | 15.7m rem | 15.4 avg lb
Enumerated 9,890,712 programs | 270 jobs | 47 CPUs | 270 tasks | 749.9m CPU rem | 15.6m rem | 15.4 avg lb
Enumerated 9,958,401 programs | 269 jobs | 47 CPUs | 269 tasks | 744.4m CPU rem | 15.5m rem | 15.4 avg lb
Enumerated 10,161,617 programs | 264 jobs | 47 CPUs | 264 tasks | 740.2m CPU rem | 15.4m rem | 15.5 avg lb
Enumerated 10,419,421 programs | 260 jobs | 47 CPUs | 260 tasks | 735.0m CPU rem | 15.3m rem | 15.5 avg lb
Enumerated 10,488,800 programs | 258 jobs | 47 CPUs | 258 tasks | 727.5m CPU rem | 15.2m rem | 15.5 avg lb
Enumerated 10,590,505 programs | 256 jobs | 47 CPUs | 256 tasks | 720.1m CPU rem | 15.0m rem | 15.6 avg lb
Enumerated 10,661,608 programs | 255 jobs | 47 CPUs | 255 tasks | 715.6m CPU rem | 14.9m rem | 15.6 avg lb
Enumerated 10,832,001 programs | 252 jobs | 47 CPUs | 252 tasks | 711.3m CPU rem | 14.8m rem | 15.6 avg lb
Enumerated 10,936,298 programs | 250 jobs | 47 CPUs | 250 tasks | 706.9m CPU rem | 14.7m rem | 15.7 avg lb
Enumerated 10,995,865 programs | 249 jobs | 47 CPUs | 249 tasks | 699.2m CPU rem | 14.6m rem | 15.7 avg lb
Enumerated 11,105,854 programs | 246 jobs | 47 CPUs | 246 tasks | 694.9m CPU rem | 14.5m rem | 15.7 avg lb
Enumerated 11,408,365 programs | 239 jobs | 47 CPUs | 239 tasks | 690.8m CPU rem | 14.4m rem | 15.8 avg lb
Enumerated 11,655,650 programs | 235 jobs | 47 CPUs | 235 tasks | 686.6m CPU rem | 14.3m rem | 15.8 avg lb
Enumerated 11,812,705 programs | 232 jobs | 47 CPUs | 232 tasks | 682.2m CPU rem | 14.2m rem | 15.9 avg lb
Enumerated 11,994,276 programs | 229 jobs | 47 CPUs | 229 tasks | 677.8m CPU rem | 14.1m rem | 15.9 avg lb
Enumerated 12,012,427 programs | 229 jobs | 47 CPUs | 229 tasks | 673.5m CPU rem | 14.0m rem | 15.9 avg lb
Enumerated 12,124,258 programs | 227 jobs | 47 CPUs | 227 tasks | 669.3m CPU rem | 13.9m rem | 16.0 avg lb
Enumerated 12,177,196 programs | 226 jobs | 47 CPUs | 226 tasks | 664.7m CPU rem | 13.8m rem | 16.0 avg lb
Enumerated 12,283,703 programs | 224 jobs | 47 CPUs | 224 tasks | 658.8m CPU rem | 13.7m rem | 16.0 avg lb
Enumerated 12,293,702 programs | 224 jobs | 47 CPUs | 224 tasks | 651.8m CPU rem | 13.6m rem | 16.1 avg lb
Enumerated 12,352,627 programs | 223 jobs | 47 CPUs | 223 tasks | 645.6m CPU rem | 13.5m rem | 16.1 avg lb
Enumerated 12,401,890 programs | 222 jobs | 47 CPUs | 222 tasks | 640.6m CPU rem | 13.3m rem | 16.1 avg lb
Enumerated 12,459,185 programs | 221 jobs | 47 CPUs | 221 tasks | 634.2m CPU rem | 13.2m rem | 16.1 avg lb
Enumerated 12,628,196 programs | 218 jobs | 47 CPUs | 218 tasks | 628.5m CPU rem | 13.1m rem | 16.2 avg lb
Enumerated 12,802,321 programs | 216 jobs | 47 CPUs | 216 tasks | 623.0m CPU rem | 13.0m rem | 16.2 avg lb
Enumerated 12,923,341 programs | 214 jobs | 47 CPUs | 214 tasks | 618.7m CPU rem | 12.9m rem | 16.3 avg lb
Enumerated 13,012,508 programs | 213 jobs | 47 CPUs | 213 tasks | 613.8m CPU rem | 12.8m rem | 16.3 avg lb
Enumerated 13,151,514 programs | 211 jobs | 47 CPUs | 211 tasks | 609.6m CPU rem | 12.7m rem | 16.4 avg lb
Enumerated 13,275,565 programs | 209 jobs | 47 CPUs | 209 tasks | 605.3m CPU rem | 12.6m rem | 16.5 avg lb
Enumerated 13,453,189 programs | 205 jobs | 47 CPUs | 205 tasks | 598.1m CPU rem | 12.5m rem | 16.6 avg lb
Enumerated 13,597,490 programs | 203 jobs | 47 CPUs | 203 tasks | 593.9m CPU rem | 12.4m rem | 16.6 avg lb
Enumerated 13,788,098 programs | 200 jobs | 47 CPUs | 200 tasks | 588.9m CPU rem | 12.3m rem | 16.7 avg lb
Enumerated 13,931,516 programs | 198 jobs | 47 CPUs | 198 tasks | 584.6m CPU rem | 12.2m rem | 16.8 avg lb
Enumerated 14,090,783 programs | 195 jobs | 47 CPUs | 195 tasks | 577.1m CPU rem | 12.0m rem | 16.9 avg lb
Enumerated 14,314,917 programs | 184 jobs | 47 CPUs | 184 tasks | 566.6m CPU rem | 11.8m rem | 17.1 avg lb
Enumerated 14,704,006 programs | 181 jobs | 47 CPUs | 181 tasks | 562.4m CPU rem | 11.7m rem | 17.2 avg lb
Enumerated 14,899,208 programs | 179 jobs | 47 CPUs | 179 tasks | 558.3m CPU rem | 11.6m rem | 17.4 avg lb
Enumerated 15,035,969 programs | 178 jobs | 47 CPUs | 178 tasks | 553.9m CPU rem | 11.5m rem | 17.5 avg lb
Enumerated 15,159,581 programs | 178 jobs | 47 CPUs | 178 tasks | 549.6m CPU rem | 11.5m rem | 17.7 avg lb
Enumerated 15,220,585 programs | 177 jobs | 47 CPUs | 177 tasks | 541.8m CPU rem | 11.3m rem | 17.8 avg lb
Enumerated 15,379,454 programs | 177 jobs | 47 CPUs | 177 tasks | 537.4m CPU rem | 11.2m rem | 17.9 avg lb
Enumerated 15,466,914 programs | 177 jobs | 47 CPUs | 177 tasks | 533.1m CPU rem | 11.1m rem | 17.9 avg lb
Enumerated 15,611,983 programs | 176 jobs | 47 CPUs | 176 tasks | 525.4m CPU rem | 10.9m rem | 18.0 avg lb
Enumerated 15,718,528 programs | 175 jobs | 47 CPUs | 175 tasks | 521.0m CPU rem | 10.9m rem | 18.1 avg lb
Enumerated 15,749,344 programs | 175 jobs | 47 CPUs | 175 tasks | 516.4m CPU rem | 10.8m rem | 18.1 avg lb
Enumerated 15,858,582 programs | 175 jobs | 47 CPUs | 175 tasks | 512.2m CPU rem | 10.7m rem | 18.2 avg lb
Enumerated 15,890,543 programs | 175 jobs | 47 CPUs | 175 tasks | 507.9m CPU rem | 10.6m rem | 18.2 avg lb
Enumerated 16,038,958 programs | 175 jobs | 47 CPUs | 175 tasks | 503.2m CPU rem | 10.5m rem | 18.3 avg lb
Enumerated 16,232,914 programs | 175 jobs | 47 CPUs | 175 tasks | 492.2m CPU rem | 10.3m rem | 18.3 avg lb
Enumerated 16,391,000 programs | 174 jobs | 47 CPUs | 174 tasks | 487.2m CPU rem | 10.2m rem | 18.4 avg lb
Enumerated 16,685,651 programs | 173 jobs | 47 CPUs | 173 tasks | 481.6m CPU rem | 10.0m rem | 18.4 avg lb
Enumerated 16,691,910 programs | 173 jobs | 47 CPUs | 173 tasks | 476.7m CPU rem | 9.9m rem | 18.4 avg lb
Enumerated 16,869,404 programs | 173 jobs | 47 CPUs | 173 tasks | 470.6m CPU rem | 9.8m rem | 18.5 avg lb
Enumerated 17,183,376 programs | 173 jobs | 47 CPUs | 173 tasks | 466.1m CPU rem | 9.7m rem | 18.6 avg lb
Enumerated 17,538,985 programs | 171 jobs | 47 CPUs | 171 tasks | 459.9m CPU rem | 9.6m rem | 18.7 avg lb
Enumerated 17,939,241 programs | 170 jobs | 47 CPUs | 170 tasks | 455.7m CPU rem | 9.5m rem | 18.8 avg lb
Enumerated 18,159,531 programs | 170 jobs | 47 CPUs | 170 tasks | 450.6m CPU rem | 9.4m rem | 18.8 avg lb
Enumerated 18,625,056 programs | 165 jobs | 47 CPUs | 165 tasks | 439.3m CPU rem | 9.2m rem | 18.9 avg lb
Enumerated 18,824,963 programs | 165 jobs | 47 CPUs | 165 tasks | 433.3m CPU rem | 9.0m rem | 19.0 avg lb
Enumerated 18,874,278 programs | 164 jobs | 47 CPUs | 164 tasks | 427.2m CPU rem | 8.9m rem | 19.0 avg lb
Enumerated 18,979,538 programs | 163 jobs | 47 CPUs | 163 tasks | 423.0m CPU rem | 8.8m rem | 19.1 avg lb
Enumerated 19,015,784 programs | 163 jobs | 47 CPUs | 163 tasks | 418.8m CPU rem | 8.7m rem | 19.1 avg lb
Enumerated 19,223,840 programs | 162 jobs | 47 CPUs | 162 tasks | 414.5m CPU rem | 8.6m rem | 19.2 avg lb
Enumerated 19,336,723 programs | 161 jobs | 47 CPUs | 161 tasks | 409.8m CPU rem | 8.5m rem | 19.2 avg lb
Enumerated 19,622,825 programs | 159 jobs | 47 CPUs | 159 tasks | 405.5m CPU rem | 8.4m rem | 19.3 avg lb
Enumerated 19,751,227 programs | 159 jobs | 47 CPUs | 159 tasks | 399.8m CPU rem | 8.3m rem | 19.4 avg lb
Enumerated 20,023,798 programs | 156 jobs | 47 CPUs | 156 tasks | 393.8m CPU rem | 8.2m rem | 19.5 avg lb
Enumerated 20,139,253 programs | 156 jobs | 47 CPUs | 156 tasks | 389.6m CPU rem | 8.1m rem | 19.5 avg lb
Enumerated 20,496,021 programs | 154 jobs | 47 CPUs | 154 tasks | 385.4m CPU rem | 8.0m rem | 19.6 avg lb
Enumerated 20,627,778 programs | 153 jobs | 47 CPUs | 153 tasks | 380.4m CPU rem | 7.9m rem | 19.7 avg lb
Enumerated 20,699,106 programs | 152 jobs | 47 CPUs | 152 tasks | 375.5m CPU rem | 7.8m rem | 19.7 avg lb
Enumerated 20,852,995 programs | 151 jobs | 47 CPUs | 151 tasks | 371.0m CPU rem | 7.7m rem | 19.8 avg lb
Enumerated 20,988,564 programs | 150 jobs | 47 CPUs | 150 tasks | 365.2m CPU rem | 7.6m rem | 19.8 avg lb
Enumerated 21,178,286 programs | 150 jobs | 47 CPUs | 150 tasks | 360.8m CPU rem | 7.5m rem | 19.9 avg lb
Enumerated 21,281,232 programs | 150 jobs | 47 CPUs | 150 tasks | 355.0m CPU rem | 7.4m rem | 19.9 avg lb
Enumerated 21,455,531 programs | 150 jobs | 47 CPUs | 150 tasks | 350.0m CPU rem | 7.3m rem | 20.0 avg lb
Enumerated 21,670,277 programs | 148 jobs | 47 CPUs | 148 tasks | 344.8m CPU rem | 7.2m rem | 20.1 avg lb
Enumerated 21,935,434 programs | 147 jobs | 47 CPUs | 147 tasks | 338.7m CPU rem | 7.1m rem | 20.2 avg lb
Enumerated 22,017,594 programs | 146 jobs | 47 CPUs | 146 tasks | 334.3m CPU rem | 7.0m rem | 20.2 avg lb
Enumerated 22,329,176 programs | 144 jobs | 47 CPUs | 144 tasks | 328.4m CPU rem | 6.8m rem | 20.3 avg lb
Enumerated 22,567,004 programs | 141 jobs | 47 CPUs | 141 tasks | 323.3m CPU rem | 6.7m rem | 20.4 avg lb
Enumerated 22,824,733 programs | 139 jobs | 47 CPUs | 139 tasks | 316.7m CPU rem | 6.6m rem | 20.5 avg lb
Enumerated 22,976,040 programs | 139 jobs | 47 CPUs | 139 tasks | 312.4m CPU rem | 6.5m rem | 20.6 avg lb
Enumerated 23,094,525 programs | 138 jobs | 47 CPUs | 138 tasks | 307.4m CPU rem | 6.4m rem | 20.6 avg lb
Enumerated 23,347,582 programs | 137 jobs | 47 CPUs | 137 tasks | 302.3m CPU rem | 6.3m rem | 20.7 avg lb
Enumerated 23,562,823 programs | 136 jobs | 47 CPUs | 136 tasks | 296.7m CPU rem | 6.2m rem | 20.8 avg lb
Enumerated 23,640,023 programs | 135 jobs | 47 CPUs | 135 tasks | 292.3m CPU rem | 6.1m rem | 20.8 avg lb
Enumerated 23,790,105 programs | 133 jobs | 47 CPUs | 133 tasks | 287.6m CPU rem | 6.0m rem | 20.8 avg lb
Enumerated 23,914,041 programs | 133 jobs | 47 CPUs | 133 tasks | 280.1m CPU rem | 5.8m rem | 20.9 avg lb
Enumerated 23,966,065 programs | 132 jobs | 47 CPUs | 132 tasks | 271.1m CPU rem | 5.6m rem | 21.0 avg lb
Enumerated 24,035,066 programs | 131 jobs | 47 CPUs | 131 tasks | 263.4m CPU rem | 5.5m rem | 21.0 avg lb
Enumerated 24,181,015 programs | 129 jobs | 47 CPUs | 129 tasks | 255.2m CPU rem | 5.3m rem | 21.0 avg lb
Enumerated 24,564,173 programs | 125 jobs | 47 CPUs | 125 tasks | 251.1m CPU rem | 5.2m rem | 21.1 avg lb
Enumerated 24,724,118 programs | 123 jobs | 47 CPUs | 123 tasks | 244.8m CPU rem | 5.1m rem | 21.1 avg lb
Enumerated 25,280,030 programs | 116 jobs | 47 CPUs | 116 tasks | 239.3m CPU rem | 5.0m rem | 21.2 avg lb
Enumerated 25,525,886 programs | 113 jobs | 47 CPUs | 113 tasks | 234.0m CPU rem | 4.9m rem | 21.2 avg lb
Enumerated 25,953,196 programs | 109 jobs | 47 CPUs | 109 tasks | 229.8m CPU rem | 4.8m rem | 21.4 avg lb
Enumerated 26,037,561 programs | 108 jobs | 47 CPUs | 108 tasks | 225.3m CPU rem | 4.7m rem | 21.4 avg lb
Enumerated 26,135,073 programs | 107 jobs | 47 CPUs | 107 tasks | 219.6m CPU rem | 4.6m rem | 21.5 avg lb
Enumerated 26,238,365 programs | 106 jobs | 47 CPUs | 106 tasks | 215.0m CPU rem | 4.5m rem | 21.5 avg lb
Enumerated 26,377,568 programs | 104 jobs | 47 CPUs | 104 tasks | 210.5m CPU rem | 4.4m rem | 21.5 avg lb
Enumerated 26,552,269 programs | 102 jobs | 47 CPUs | 102 tasks | 206.1m CPU rem | 4.3m rem | 21.6 avg lb
Enumerated 26,905,834 programs | 99 jobs | 47 CPUs | 99 tasks | 201.8m CPU rem | 4.2m rem | 21.7 avg lb
Enumerated 27,068,141 programs | 96 jobs | 47 CPUs | 96 tasks | 195.4m CPU rem | 4.1m rem | 21.8 avg lb
Enumerated 27,259,332 programs | 94 jobs | 47 CPUs | 94 tasks | 186.8m CPU rem | 3.9m rem | 21.9 avg lb
Enumerated 27,506,345 programs | 92 jobs | 47 CPUs | 92 tasks | 180.6m CPU rem | 3.8m rem | 21.9 avg lb
Enumerated 27,771,612 programs | 89 jobs | 47 CPUs | 89 tasks | 175.3m CPU rem | 3.7m rem | 22.0 avg lb
Enumerated 28,046,721 programs | 87 jobs | 47 CPUs | 87 tasks | 171.1m CPU rem | 3.6m rem | 22.1 avg lb
Enumerated 28,262,124 programs | 85 jobs | 47 CPUs | 85 tasks | 166.2m CPU rem | 3.5m rem | 22.3 avg lb
Enumerated 28,398,839 programs | 83 jobs | 47 CPUs | 83 tasks | 159.6m CPU rem | 3.3m rem | 22.4 avg lb
Enumerated 28,532,598 programs | 82 jobs | 47 CPUs | 82 tasks | 154.3m CPU rem | 3.2m rem | 22.4 avg lb
Enumerated 28,698,511 programs | 80 jobs | 47 CPUs | 80 tasks | 147.9m CPU rem | 3.1m rem | 22.5 avg lb
Enumerated 28,943,877 programs | 77 jobs | 47 CPUs | 77 tasks | 143.3m CPU rem | 3.0m rem | 22.6 avg lb
Enumerated 29,198,903 programs | 74 jobs | 47 CPUs | 74 tasks | 138.7m CPU rem | 2.9m rem | 22.8 avg lb
Enumerated 29,210,592 programs | 74 jobs | 47 CPUs | 74 tasks | 131.8m CPU rem | 2.7m rem | 22.8 avg lb
Enumerated 29,431,387 programs | 72 jobs | 47 CPUs | 72 tasks | 127.6m CPU rem | 2.7m rem | 22.9 avg lb
Enumerated 29,542,150 programs | 70 jobs | 47 CPUs | 70 tasks | 123.5m CPU rem | 2.6m rem | 22.9 avg lb
Enumerated 29,779,230 programs | 68 jobs | 47 CPUs | 68 tasks | 119.4m CPU rem | 2.5m rem | 23.1 avg lb
Enumerated 29,871,060 programs | 67 jobs | 47 CPUs | 67 tasks | 114.6m CPU rem | 2.4m rem | 23.2 avg lb
Enumerated 30,128,760 programs | 64 jobs | 47 CPUs | 64 tasks | 109.5m CPU rem | 2.3m rem | 23.3 avg lb
Enumerated 30,521,270 programs | 59 jobs | 47 CPUs | 59 tasks | 104.7m CPU rem | 2.2m rem | 23.6 avg lb
Enumerated 30,793,258 programs | 56 jobs | 47 CPUs | 56 tasks | 99.9m CPU rem | 2.1m rem | 23.9 avg lb
Enumerated 30,904,143 programs | 55 jobs | 47 CPUs | 55 tasks | 95.6m CPU rem | 2.0m rem | 24.0 avg lb
Enumerated 31,267,388 programs | 51 jobs | 47 CPUs | 51 tasks | 90.5m CPU rem | 1.9m rem | 24.4 avg lb
Enumerated 31,465,591 programs | 50 jobs | 47 CPUs | 50 tasks | 84.0m CPU rem | 1.7m rem | 24.7 avg lb
Enumerated 31,604,072 programs | 50 jobs | 47 CPUs | 50 tasks | 79.4m CPU rem | 1.7m rem | 25.0 avg lb
Enumerated 31,776,651 programs | 48 jobs | 47 CPUs | 48 tasks | 74.8m CPU rem | 1.6m rem | 25.2 avg lb
Enumerated 32,009,734 programs | 47 jobs | 47 CPUs | 47 tasks | 70.9m CPU rem | 1.5m rem | 25.4 avg lb
Enumerated 32,256,926 programs | 45 jobs | 47 CPUs | 45 tasks | 64.9m CPU rem | 1.4m rem | 25.7 avg lb
Enumerated 32,465,277 programs | 44 jobs | 45 CPUs | 44 tasks | 61.1m CPU rem | 1.4m rem | 25.9 avg lb
Enumerated 32,863,153 programs | 42 jobs | 47 CPUs | 42 tasks | 56.2m CPU rem | 1.3m rem | 26.1 avg lb
Enumerated 33,021,233 programs | 40 jobs | 46 CPUs | 40 tasks | 50.7m CPU rem | 1.2m rem | 26.2 avg lb
Enumerated 33,105,780 programs | 38 jobs | 45 CPUs | 38 tasks | 47.4m CPU rem | 1.2m rem | 26.4 avg lb
Enumerated 33,291,880 programs | 38 jobs | 47 CPUs | 38 tasks | 43.8m CPU rem | 1.1m rem | 26.5 avg lb
Enumerated 33,556,968 programs | 36 jobs | 46 CPUs | 36 tasks | 40.5m CPU rem | 1.1m rem | 26.8 avg lb
Enumerated 33,797,164 programs | 34 jobs | 46 CPUs | 34 tasks | 37.4m CPU rem | 1.1m rem | 27.0 avg lb
Enumerated 33,893,395 programs | 33 jobs | 47 CPUs | 33 tasks | 34.3m CPU rem | 1.0m rem | 27.2 avg lb
Enumerated 34,218,673 programs | 30 jobs | 47 CPUs | 30 tasks | 30.3m CPU rem | 1.0m rem | 27.5 avg lb
Enumerated 34,602,004 programs | 29 jobs | 47 CPUs | 29 tasks | 27.5m CPU rem | 0.9m rem | 27.9 avg lb
Enumerated 34,847,983 programs | 27 jobs | 46 CPUs | 27 tasks | 25.2m CPU rem | 0.9m rem | 28.1 avg lb
Enumerated 35,117,940 programs | 26 jobs | 47 CPUs | 26 tasks | 22.6m CPU rem | 0.8m rem | 28.4 avg lb
Enumerated 35,216,782 programs | 25 jobs | 43 CPUs | 25 tasks | 20.5m CPU rem | 0.8m rem | 28.5 avg lb
Enumerated 35,478,110 programs | 23 jobs | 44 CPUs | 23 tasks | 16.8m CPU rem | 0.7m rem | 28.9 avg lb
Enumerated 35,543,019 programs | 22 jobs | 47 CPUs | 22 tasks | 14.9m CPU rem | 0.6m rem | 29.1 avg lb
Enumerated 35,723,592 programs | 20 jobs | 39 CPUs | 20 tasks | 12.7m CPU rem | 0.6m rem | 29.4 avg lb
Enumerated 35,739,925 programs | 19 jobs | 37 CPUs | 19 tasks | 10.9m CPU rem | 0.5m rem | 29.5 avg lb
Enumerated 36,111,474 programs | 17 jobs | 47 CPUs | 17 tasks | 8.8m CPU rem | 0.5m rem | 30.1 avg lb
Enumerated 36,373,881 programs | 16 jobs | 47 CPUs | 16 tasks | 7.4m CPU rem | 0.4m rem | 30.4 avg lb
Enumerated 36,667,187 programs | 15 jobs | 46 CPUs | 15 tasks | 6.1m CPU rem | 0.4m rem | 30.8 avg lb
Enumerated 36,751,683 programs | 13 jobs | 43 CPUs | 13 tasks | 4.9m CPU rem | 0.4m rem | 31.2 avg lb
Enumerated 36,997,843 programs | 11 jobs | 34 CPUs | 11 tasks | 2.8m CPU rem | 0.2m rem | 31.8 avg lb
Enumerated 37,316,828 programs | 7 jobs | 29 CPUs | 7 tasks | 1.7m CPU rem | 0.2m rem | 33.1 avg lb
Enumerated 37,704,856 programs | 5 jobs | 44 CPUs | 5 tasks | 1.0m CPU rem | 0.2m rem | 34.0 avg lb
Enumerated 37,760,245 programs | 3 jobs | 6 CPUs | 3 tasks | 0.4m CPU rem | 0.1m rem | 35.3 avg lb
Enumerated 37,840,131 programs | 2 jobs | 1 CPUs | 2 tasks | 0.0m CPU rem | 0.0m rem | 29.0 avg lb
We enumerated this many programs, for each task:
	 [182433, 3584, 148555, 86628, 132461, 135599, 153338, 80776, 73366, 127811, 129785, 128715, 86639, 3646, 141998, 142272, 124649, 77970, 89370, 141016, 3716, 150596, 83850, 87056, 77681, 151773, 144364, 128773, 68775, 79795, 3640, 79823, 132735, 130979, 138056, 3824, 135094, 151907, 127492, 135865, 58298, 138042, 137860, 132069, 51704, 88334, 128737, 77945, 3794, 79642, 80334, 136286, 167907, 100795, 79676, 316302, 14614, 89674, 126847, 128612, 103956, 119528, 76603, 75084, 81274, 68155, 70658, 128007, 121859, 117806, 118667, 161266, 132817, 89800, 123386, 72079, 68321, 121269, 3258, 68015, 127282, 84029, 2516, 77354, 67708, 75754, 888, 77524, 118271, 70012, 70971, 68394, 129746, 123226, 21005, 63447, 67562, 65521, 137638, 75676, 67948, 125643, 286090, 136643, 69130, 67803, 70485, 136474, 68298, 108444, 153844, 70685, 3595, 75860, 73399, 150161, 71761, 64575, 134574, 67462, 142514, 71278, 140151, 71754, 122676, 72207, 72571, 123686, 14448, 129917, 71224, 71642, 69835, 75293, 146420, 140294, 73284, 69684, 132418, 846, 72080, 2358, 136584, 144776, 72001, 152425, 76523, 69400, 137185, 3576, 73461, 4904, 142882, 129086, 3572, 124691, 126302, 67206, 75677, 127481, 67531, 117131, 127214, 15439, 125835, 72844, 179784, 131699, 134527, 69880, 87540, 2883, 73838, 3786, 119053, 78860, 3654, 3874, 2554, 167572, 135891, 109658, 71546, 75621, 66422, 180310, 72970, 75108, 136105, 132471, 106064, 66391, 73029, 135425, 70462, 69222, 71653, 72147, 77088, 144737, 72274, 66629, 63277, 69229, 57617, 71935, 157895, 120878, 70907, 3267, 164455, 129733, 70789, 129292, 73508, 72193, 141553, 3864, 134411, 72444, 68927, 128386, 136896, 71956, 145734, 137581, 135261, 137542, 164802, 72556, 70170, 71759, 61079, 69548, 212509, 159071, 72932, 71489, 68058, 130470, 3562, 126577, 65606, 68517, 67764, 69743, 77825, 73797, 3650, 134783, 3576, 71264, 132284, 134000, 107262, 73639, 188680, 68893, 67815, 140217, 71432, 186037, 3663, 60264, 128101, 179886, 87370, 76184, 69332, 135637, 150185, 70258, 144957, 70716, 64018, 19982, 132636, 69754, 67191, 69581, 69513, 137621, 142994, 71607, 61934, 63395, 131262, 72020, 65356, 72863, 3853, 67211, 65075, 138009, 82307, 216560, 73407, 67778, 140811, 3800, 64936, 141578, 65074, 156859, 135568, 66004, 67786, 65496, 3582, 60354, 8419, 130953, 61231, 143575, 160518, 146819, 17711, 174633, 65440, 69844, 194669, 149604, 126741, 68085, 75174, 72454, 160067, 77508, 65822, 144121, 130890, 74447, 140912, 213912, 71392, 131574, 68407, 18051, 72365, 69873, 141247, 141314, 142746, 69371, 134190, 3811, 209635, 71572, 75121, 70207, 119678, 77782, 73036, 138889, 65842, 139798, 78668, 69315, 59518, 145121, 141817, 152943, 135156, 66823, 66973, 63477, 67810, 132056, 134417, 64688, 68210, 144166, 135725, 174712, 71446, 65927, 3696, 67952, 67409, 2054, 140301, 70696, 64291, 75683, 745, 199496, 68958, 73058, 68671, 136057, 74742, 142388, 166882, 73961, 215109, 66623, 139129, 87028, 70444, 112330]
Recognizer 0 solved 54/400 tasks; total tasks solved is now 54.
Best recognizer: 0.
Currently using this much memory: 1248145408
Recognition model enumeration results for the best recognizer.
HIT 00d62c1b w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)) ; log prior = -5.628855 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.929494 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0)) ; log prior = -5.885969 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.794057 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.676022 ; log likelihood = 0.000000
HIT 2013d3e2 w/ (lambda (left_half (top_half (ic_compress2 $0)))) ; log prior = -17.979673 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (overlay $0 (ic_connectX $0))) ; log prior = -14.803679 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (#(lambda (overlay (flipy $0))) (ic_connectX $0) $0)) ; log prior = -14.401280 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.742029 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (repeatX (ic_compress2 $0))) ; log prior = -15.178951 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -7.026976 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorX (mirrorY $0))) $0)) ; log prior = -8.450109 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -7.521684 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5)) ; log prior = -8.322409 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -12.679173 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0)) ; log prior = -5.403360 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))) ; log prior = -18.381894 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -10.105836 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -5.459566 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -8.515681 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (flipy $0)) ; log prior = -5.551596 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -10.114964 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)) ; log prior = -5.636283 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -11.744062 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -9.613014 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -6.476293 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)) ; log prior = -5.531053 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.786629 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -8.515219 ; log likelihood = 0.000000
HIT 7b6016b9 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(fillobj c2) $0) c3)) ; log prior = -12.625023 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -8.251930 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)) ; log prior = -5.702421 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -19.591545 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -5.729584 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -5.877604 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -5.776925 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) ; log prior = -10.818701 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)) ; log prior = -5.995658 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) ; log prior = -11.055136 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -8.087818 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_connectY $0))) ; log prior = -10.557216 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)) ; log prior = -5.971421 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -6.002748 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -9.826585 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -8.489812 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (ic_embed (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0) $0)) ; log prior = -17.205930 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2)) ; log prior = -8.526814 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (topcol $0))) ; log prior = -12.980533 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -5.358363 ; log likelihood = 0.000000
HIT de1cd16c w/ (lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5))) ; log prior = -12.410405 ; log likelihood = 0.000000
HIT e3497940 w/ (lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0))) ; log prior = -15.396220 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -5.727655 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -8.755165 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0)) ; log prior = -5.501502 ; log likelihood = 0.000000
Hits 54/400 tasks
Average description length of a program solving a task: 9.075528 nats
Recognition model average:  12 sec.	median: 0 	max: 174 	standard deviation 29
Cumulative results for the full ensemble of 1 recognizers: 
Frontiers discovered bottom up: 54
Total frontiers: 57
Average search time:  12 sec.	median: 0 	max: 174 	standard deviation 29
54 / 400 total hit tasks
              bottom miss  bottom hit  
top miss          346           7      
top hit            0           47      
Currently using this much memory: 1248145408
Showing the top 5 programs in each frontier being sent to the compressor:
00d62c1b
-0.14	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))
-2.77	(lambda (fillobj c4 $0))
-4.65	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.67	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.67	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

0b148d64
-1.10	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.15	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-5.60	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-5.60	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

1190e5a7
-0.72	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-0.75	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-5.22	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-5.22	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.22	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))

1cf80156
-2.07	(lambda (#(lambda (ic_composegrowing (split8 $0))) $0))
-2.07	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-2.09	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-2.10	(lambda (ic_compress2 $0))
-2.10	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))

1f85a75f
-1.21	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-1.23	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.25	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-4.04	(lambda (ic_pickunique (ic_splitall $0)))
-4.04	(lambda (pickmax_neg_interior_count (ic_splitall $0)))

2013d3e2
-1.37	(lambda (left_half (top_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.37	(lambda (top_half (left_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.40	(lambda (left_half (top_half (ic_compress2 $0))))
-1.40	(lambda (top_half (left_half (ic_compress2 $0))))

22168020
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-8.77	(lambda (overlay $0 (ic_connectX $0)))
-8.77	(lambda (overlay (ic_connectX $0) $0))
-9.74	(lambda (swapxy (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))))

22eb0ac0
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-8.74	(lambda (#(lambda (overlay (flipy $0))) (ic_connectX $0) $0))
-8.77	(lambda (overlay $0 (ic_connectX $0)))
-8.77	(lambda (overlay (ic_connectX $0) $0))

23b5c85d
-0.09	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-4.59	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.59	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-4.59	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.59	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

28bf18c6
-2.29	(lambda (repeatX (#(lambda (ic_composegrowing (split8 $0))) $0)))
-2.29	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (repeatX $0)))
-2.29	(lambda (repeatX (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-2.30	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (repeatX $0)))
-2.30	(lambda (repeatX (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))

2dee498d
-2.17	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (swapxy $0))))
-2.17	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (rot90 $0))))
-2.18	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (swapxy $0))))
-2.19	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (rot90 $0))))
-2.20	(lambda (ic_compress2 (ic_embed $0 (swapxy $0))))

39a8645d
-0.75	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-0.77	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) $0))
-3.56	(lambda (pickcommon (split8 $0)))
-5.25	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-5.25	(lambda (#(lambda (pickcommon (split8 $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

3af2c5a8
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-5.25	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.25	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.27	(lambda (mirrorX (mirrorY $0)))

3c9b0459
-0.74	(lambda (rot180 $0))
-0.74	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (rot180 $0)))
-5.23	(lambda (rot180 (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

40853293
-0.70	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.70	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-5.27	(lambda (ic_toorigin (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.27	(lambda (ic_toorigin (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-12.25	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))

4258a5f9
-0.16	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5))
-3.65	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (rarestcol $0)))
-3.65	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-3.66	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (topcol $0)))
-3.66	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)))

445eab21
-0.82	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-0.82	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-3.11	(lambda (countToXY (countColours $0) (topcol $0)))
-3.46	(lambda (#(lambda (mirrorY (mirrorX $0))) (colourPixel (topcol $0))))
-3.46	(lambda (#(lambda (mirrorX (mirrorY $0))) (colourPixel (topcol $0))))

496994bd
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.13	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.60	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.60	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

4c4377d9
-2.17	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-2.19	(lambda (mirrorY (#(lambda (overlay $0 (flipx $0))) $0)))
-2.19	(lambda (#(lambda (flipx (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-2.19	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)))
-2.20	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (flipx $0)))

5582e5ca
-0.15	(lambda (#(lambda (colourHull (topcol $0))) $0 $0))
-2.75	(lambda (colourHull (topcol $0) $0))
-4.64	(lambda (#(lambda (colourHull (topcol $0))) $0 (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.64	(lambda (#(lambda (colourHull (topcol $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0) $0))
-4.64	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (colourHull (topcol $0))) $0 $0)))

6150a2bd
-0.74	(lambda (rot180 $0))
-0.74	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (rot180 $0)))
-5.23	(lambda (rot180 (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

62c24649
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-5.23	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

67a3c6ac
-1.12	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (flipy $0))
-5.61	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.61	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (flipy $0))) $0)))

67e8384a
-0.74	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-0.74	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-5.23	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.23	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

68b16354
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.13	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.13	(lambda (flipx $0))
-5.60	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.60	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (overlay $0 (flipx $0))) $0)))

6d0aefbc
-0.10	(lambda (mirrorX $0))
-4.59	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorX $0)))
-4.59	(lambda (mirrorX (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.59	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (mirrorX $0)))
-4.59	(lambda (mirrorX (#(lambda (overlay $0 (ic_connectY $0))) $0)))

6fa7a44f
-1.11	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))
-1.13	(lambda (mirrorY $0))
-1.13	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.61	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.61	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))

72ca375d
-0.10	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-4.59	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.59	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-4.59	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.59	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))

7468f01a
-0.74	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-0.74	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-5.23	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (flipy $0))) $0)))
-5.23	(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

746b3537
-1.42	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.46	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.46	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.47	(lambda (ic_compress3 $0))
-3.97	(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5))

74dd1130
-0.74	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-0.74	(lambda (swapxy $0))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-5.23	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0)))

7b6016b9
-0.72	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(fillobj c2) $0) c3))
-0.75	(lambda (set_bg c3 (#(fillobj c2) $0)))
-3.27	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (fillobj c2 $0) c3))
-7.87	(lambda (set_bg c3 (ic_erasecol c3 (#(fillobj c2) $0))))
-7.90	(lambda (set_bg c3 (ic_erasecol c9 (#(fillobj c2) $0))))

8be77c9e
-0.74	(lambda (mirrorY $0))
-0.74	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.22	(lambda (left_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.22	(lambda (left_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.23	(lambda (mirrorY (#(lambda (overlay (ic_connectY $0) $0)) $0)))

90c28cc7
-1.14	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.18	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.18	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-3.76	(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c6))
-3.76	(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c9))

9565186b
-0.17	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-2.70	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5))
-2.73	(lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-5.27	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5 c5))
-5.33	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c6 c5))

9dfd6313
-0.74	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-0.74	(lambda (swapxy $0))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-5.23	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.23	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0)))

a416b8f3
-0.09	(lambda (repeatX $0))
-4.59	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (repeatX $0)))
-4.59	(lambda (repeatX (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.59	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (repeatX $0)))
-4.59	(lambda (repeatX (#(lambda (overlay $0 (ic_connectY $0))) $0)))

a5313dff
-0.14	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0))
-2.72	(lambda (fillobj c1 $0))
-4.67	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.67	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.67	(lambda (#(fillobj c2) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))

a740d043
-0.27	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-2.84	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c1)))
-2.87	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0)))
-3.10	(lambda (ic_composegrowing (ic_splitall (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))))
-3.11	(lambda (ic_composegrowing (split8 (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))))

a87f7484
-0.74	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.74	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-5.23	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-5.23	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)))
-5.24	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

aabf363d
-1.12	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0)))
-1.12	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-1.13	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)))
-5.61	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))))
-5.61	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))))

b1948b0a
-0.15	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2))
-2.78	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2))
-4.64	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (overlay (ic_connectY $0) $0)) $0) c2))
-4.64	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)))
-4.64	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (overlay $0 (ic_connectY $0))) $0) c2))

b9b7f026
-2.28	(lambda (#(lambda (colourPixel (topcol $0))) (ic_connectX $0)))
-2.28	(lambda (#(lambda (colourPixel (topcol $0))) (ic_connectY $0)))
-2.29	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0)))
-2.29	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectY $0)))
-2.30	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_connectX $0)))

be94b721
-0.74	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-0.74	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-5.23	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-5.23	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)))
-5.24	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

c8f0f002
-0.10	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0))
-4.59	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.59	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))
-4.59	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-4.59	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))

c9e6f938
-0.09	(lambda (mirrorX $0))
-4.60	(lambda (top_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-4.60	(lambda (top_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-4.61	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (mirrorX $0)))
-4.61	(lambda (mirrorX (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))

ce22a75a
-0.39	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1))
-2.37	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (ic_makeborder $0)))
-2.37	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (ic_makeborder $0)))
-2.41	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_makeborder $0)))
-4.88	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) (#(lambda (overlay (ic_connectY $0) $0)) $0) c1))

d037b0a7
-0.06	(lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))
-3.54	(lambda (ic_embed (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0) $0))
-4.57	(lambda (top_half (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (flipx (mirrorY $0))) $0))))
-4.57	(lambda (top_half (#(lambda (overlay $0 (ic_connectY $0))) (mirrorY $0))))
-4.60	(lambda (top_half (flipx (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))))

d5d6de2d
-0.22	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2))
-2.80	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2))
-3.70	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (rarestcol $0)))
-3.70	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-3.70	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (topcol $0)))

d631b094
-1.40	(lambda (countToY (countPixels $0) (rarestcol $0)))
-1.40	(lambda (countToY (countPixels $0) (#(lambda (rarestcol (rot180 $0))) $0)))
-1.40	(lambda (countToY (countPixels $0) (topcol $0)))
-1.41	(lambda (countToY (countPixels $0) (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)))
-5.90	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (countToY (countPixels $0) (topcol $0))))

d9fac9be
-1.13	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-1.14	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-1.15	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) $0))
-3.95	(lambda (pickcommon (split8 $0)))
-5.62	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))

de1cd16c
-0.07	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)))
-4.61	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_erasecol c5 $0))))
-4.62	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_erasecol c5 $0))))
-4.62	(lambda (#(lambda (colourPixel (topcol $0))) (ic_erasecol c5 (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))))
-4.65	(lambda (#(lambda (colourPixel (topcol $0))) (ic_compress3 (ic_erasecol c5 $0))))

ded97339
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-12.24	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))
-12.63	(lambda (ic_composegrowing (#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1)))) $0 (lambda (lambda ($0 $1))))))
-14.31	(lambda (ic_composegrowing (lcons $0 (split8 (ic_connectY $0)))))

e3497940
-0.01	(lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0)))
-4.60	(lambda (left_half (overlay $0 (flipy $0))))
-8.07	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (flipy $0))))))
-8.07	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist $1 ($0 $1)))) $0 (lambda (flipy $0))))))

eb5a1d5d
-1.63	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.65	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.67	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.67	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.68	(lambda (ic_compress3 $0))

ed36ccf7
-0.09	(lambda (rot90 $0))
-4.61	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (rot90 $0)))
-4.61	(lambda (rot90 (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.62	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (rot90 $0)))
-4.62	(lambda (rot90 (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))

f25ffba3
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.13	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.60	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.60	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))

Compression message saved to: compressionMessages/2023-04-15T04:24:32.921440
Compression backend will run for most 99 iterations
Total number of candidates: 4655
Constructed version spaces and coalesced candidates in 2.73211s.
Trimmed down the beam, have only 259 best candidates
Rewrote topK in 6.44775s.
Initial score: -552.646682
Scored candidates in 17.9215s.
Improved score to -550.600718 (dScore=2.045964) w/ new primitive
	#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) : grid -> grid
rewrote all of the frontiers in 5.01443s.
Completed one step of memory consolidation in 33.1144s.
New primitive is used 2 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0))
  (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0)))
Total number of candidates: 4255
Constructed version spaces and coalesced candidates in 2.92701s.
Trimmed down the beam, have only 261 best candidates
Rewrote topK in 6.15827s.
Initial score: -551.597921
Scored candidates in 18.4712s.
Improved score to -549.647255 (dScore=1.950666) w/ new primitive
	#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) : grid -> grid
rewrote all of the frontiers in 4.96041s.
Completed one step of memory consolidation in 33.5321s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0)))
Total number of candidates: 4221
Constructed version spaces and coalesced candidates in 2.71237s.
Trimmed down the beam, have only 261 best candidates
Rewrote topK in 6.14574s.
Initial score: -550.652721
Scored candidates in 18.4642s.
Improved score to -550.389352 (dScore=0.263369) w/ new primitive
	#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) : grid -> grid
rewrote all of the frontiers in 4.98117s.
Completed one step of memory consolidation in 33.2581s.
New primitive is used 1 times in the best programs in each of the frontiers.
Here is where it is used:
  (lambda (#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) $0))
Total number of candidates: 4160
Constructed version spaces and coalesced candidates in 2.93629s.
Trimmed down the beam, have only 260 best candidates
Rewrote topK in 6.15053s.
Initial score: -551.384671
Scored candidates in 18.7075s.
Improved score to -551.347839 (dScore=0.036832) w/ new primitive
	#(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) : grid -> grid
rewrote all of the frontiers in 4.95755s.
Completed one step of memory consolidation in 33.7452s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4075
Constructed version spaces and coalesced candidates in 2.86332s.
Trimmed down the beam, have only 259 best candidates
Rewrote topK in 6.06756s.
Initial score: -552.355526
Scored candidates in 19.2847s.
Improved score to -552.311308 (dScore=0.044218) w/ new primitive
	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))) : grid -> grid
rewrote all of the frontiers in 4.91242s.
Completed one step of memory consolidation in 34.0876s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 4033
Constructed version spaces and coalesced candidates in 2.7401s.
Trimmed down the beam, have only 258 best candidates
Rewrote topK in 6.0061s.
Initial score: -553.318444
Scored candidates in 19.7308s.
Improved score to -553.263023 (dScore=0.055422) w/ new primitive
	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) : grid -> grid
rewrote all of the frontiers in 5.03579s.
Completed one step of memory consolidation in 34.4818s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3760
Constructed version spaces and coalesced candidates in 2.95081s.
Trimmed down the beam, have only 257 best candidates
Rewrote topK in 6.03348s.
Initial score: -554.265929
Scored candidates in 20.0496s.
Improved score to -554.219643 (dScore=0.046286) w/ new primitive
	#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) : grid -> grid
rewrote all of the frontiers in 4.90818s.
Completed one step of memory consolidation in 34.9648s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3722
Constructed version spaces and coalesced candidates in 2.91346s.
Trimmed down the beam, have only 255 best candidates
Rewrote topK in 6.0305s.
Initial score: -555.236589
Scored candidates in 20.0607s.
Improved score to -555.178115 (dScore=0.058474) w/ new primitive
	#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) : grid -> grid
rewrote all of the frontiers in 4.98068s.
Completed one step of memory consolidation in 34.9832s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3347
Constructed version spaces and coalesced candidates in 2.82s.
Trimmed down the beam, have only 254 best candidates
Rewrote topK in 5.98217s.
Initial score: -556.194886
Scored candidates in 20.7585s.
Improved score to -555.683432 (dScore=0.511454) w/ new primitive
	#(lambda (lambda (mklist ($0 ic_connectY $1)))) : t0 -> ((grid -> grid) -> t0 -> grid) -> grid -> list(grid)
rewrote all of the frontiers in 4.90959s.
Completed one step of memory consolidation in 35.4643s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3347
Constructed version spaces and coalesced candidates in 2.71077s.
Trimmed down the beam, have only 253 best candidates
Rewrote topK in 5.98793s.
Initial score: -556.704494
Scored candidates in 20.5793s.
Improved score to -556.474543 (dScore=0.229951) w/ new primitive
	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))) : grid -> grid
rewrote all of the frontiers in 4.8836s.
Completed one step of memory consolidation in 35.1358s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3224
Constructed version spaces and coalesced candidates in 2.8222s.
Trimmed down the beam, have only 252 best candidates
Rewrote topK in 5.89407s.
Initial score: -557.497580
Scored candidates in 20.8857s.
Improved score to -557.470494 (dScore=0.027085) w/ new primitive
	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) : grid -> grid
rewrote all of the frontiers in 4.88367s.
Completed one step of memory consolidation in 35.4637s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 3036
Constructed version spaces and coalesced candidates in 3.25526s.
Trimmed down the beam, have only 251 best candidates
Rewrote topK in 5.89869s.
Initial score: -558.495295
Scored candidates in 21.3954s.
No improvement possible.
Completed one step of memory consolidation in 31.388s.
completed ocaml compression in 6.84358m.
Finished consolidation.
Induced a grammar in 411.5 seconds
Grammar after iteration 4:
-0.587229	t0	$_
0.000000	grid -> pos	getpos
0.000000	grid -> size	getsize
-0.001607	grid -> count	countPixels
-0.003200	grid -> list(grid)	ic_splitall
-0.005304	grid -> list(grid)	split8
-0.008501	grid -> grid -> list(grid)	mklist
-0.008502	grid -> list(grid) -> list(grid)	lcons
-0.008502	(grid -> grid) -> list(grid) -> list(grid)	map
-0.008502	grid -> list(grid)	ic_splitcols
-0.008502	grid -> list(grid)	ic_splitcolumns
-0.008502	grid -> list(grid)	ic_splitrows
-0.032736	grid -> count	countColours
-0.124457	colour	c2
-0.152469	colour	c3
-0.156243	colour	c1
-0.171895	grid -> colour	topcol
-0.173792	grid -> colour	rarestcol
-0.179294	colour	c5
-0.184368	colour	c6
-0.184375	colour	c4
-0.185558	colour	c9
-0.186187	colour	c7
-0.187268	colour	c8
-1.638433	grid -> grid	left_half
-1.638697	grid -> grid	top_half
-1.638763	grid -> grid	repeatX
-1.639385	grid -> grid	mirrorX
-1.659980	grid -> grid	rot90
-1.664930	grid -> grid	ic_compress2
-1.665104	grid -> grid	mirrorY
-1.669758	grid -> grid	swapxy
-1.669786	grid -> grid -> grid	ic_embed
-1.670689	count -> colour -> grid	countToY
-1.681102	grid -> grid	rot180
-1.681693	grid -> grid	flipx
-1.685727	colour -> grid -> grid	set_bg
-1.686880	grid -> grid	ic_connectX
-1.687004	grid -> grid	ic_connectY
-1.690610	grid -> grid	ic_compress3
-1.692744	grid -> grid	rot270
-1.694887	grid -> grid	ic_makeborder
-1.695050	grid -> grid	flipy
-1.697926	colour -> grid -> grid	fillobj
-1.700527	list(grid) -> grid	ic_composegrowing
-1.701254	colour -> grid -> grid	colourHull
-1.701331	colour -> grid	colourPixel
-1.701344	colour -> grid -> grid	ic_erasecol
-1.701774	grid -> grid	ic_toorigin
-1.701819	count -> colour -> grid	countToXY
-1.702014	list(grid) -> grid	pickcommon
-1.702137	list(grid) -> grid	ic_pickunique
-1.702925	list(grid) -> grid	pickmax_neg_interior_count
-1.702925	list(grid) -> grid	pickmax_size
-1.702925	list(grid) -> grid	pickmax_neg_size
-1.702925	list(grid) -> grid	pickmax_cols
-1.702925	list(grid) -> grid	pickmax_interior_count
-1.703054	grid -> grid	ic_center
-1.703165	grid -> grid -> grid	overlay
-1.703412	colour -> grid -> grid	ic_filtercol
-1.703479	colour -> grid -> grid	setcol
-1.703479	grid -> grid	ic_fill
-1.703479	grid -> grid	ic_interior
-1.703479	count -> colour -> grid	countToX
-1.703479	grid -> grid	right_half
-1.703479	grid -> grid	bottom_half
-1.703479	list(grid) -> grid	pickmax_count
-1.703479	list(grid) -> grid	pickmax_neg_count
-1.703479	list(grid) -> grid	pickmax_x_pos
-1.703479	list(grid) -> grid	pickmax_x_neg
-1.703479	list(grid) -> grid	pickmax_y_pos
-1.703479	list(grid) -> grid	pickmax_y_neg
-1.703479	grid -> grid	repeatY
-1.703479	colour -> grid -> grid	get_bg
-1.703479	grid -> grid -> grid	logical_and
-0.008493	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist ($0 $1) $1)))
-0.008493	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 $1))))
-0.008502	grid -> (grid -> (grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1))))
-0.008502	t0 -> ((grid -> grid) -> t0 -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist ($0 ic_connectY $1))))
-0.008502	((grid -> grid) -> grid -> grid) -> grid -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $0 ($1 (lambda (ic_connectY $0))))))
-0.008502	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $1 ($0 ic_connectY))))
-0.008502	grid -> ((grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0))))))
-0.008502	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 $1)))) $1 ($0 ic_connectY))))
-0.008502	((grid -> grid) -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist $0 ($1 ic_connectY))))
-0.173933	grid -> colour	#(lambda (rarestcol (rot180 $0)))
-0.174075	grid -> colour	#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.623818	grid -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1))
-1.635580	grid -> grid	#(lambda (ic_composegrowing (split8 $0)))
-1.636466	grid -> grid	#(lambda (colourPixel (topcol $0)))
-1.637710	grid -> grid	#(lambda (overlay (ic_connectY $0) $0))
-1.638511	grid -> grid	#(lambda (overlay $0 (ic_connectY $0)))
-1.642728	grid -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
-1.649071	grid -> grid	#(lambda (mirrorY (mirrorX $0)))
-1.649493	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0)))
-1.649717	grid -> grid	#(lambda (mirrorX (mirrorY $0)))
-1.653404	grid -> grid	#(lambda (ic_compress2 (ic_compress3 $0)))
-1.653825	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6))
-1.654333	grid -> grid	#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-1.655419	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.656478	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))
-1.657604	grid -> grid	#(lambda (overlay $0 (flipx $0)))
-1.659913	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.663915	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-1.664595	grid -> grid	#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5))
-1.665394	grid -> grid	#(lambda (flipx (mirrorY $0)))
-1.667421	grid -> grid	#(lambda (fillobj c1 (ic_toorigin $0)))
-1.667825	grid -> grid	#(lambda (ic_filtercol (topcol $0) $0))
-1.668092	grid -> grid	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-1.668574	grid -> grid	#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.669462	grid -> grid	#(fillobj c2)
-1.670785	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3))
-1.670997	grid -> grid -> grid	#(lambda (overlay (flipy $0)))
-1.672435	grid -> grid -> grid	#(lambda (colourHull (topcol $0)))
-1.676484	grid -> colour -> grid	#(lambda (lambda (fillobj $0 (ic_makeborder $1))))
-1.677125	grid -> grid	#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-1.677278	grid -> grid	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-1.677656	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))
-1.677746	grid -> grid	#(lambda (pickcommon (split8 $0)))
-1.678315	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-1.679777	grid -> grid	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-1.680749	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.680749	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.681361	grid -> grid	#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-1.681996	grid -> grid	#(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.682026	grid -> grid	#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0)))
-1.682042	grid -> grid	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-1.682135	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0)))
-1.682334	grid -> grid	#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.682380	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.683902	grid -> grid	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.684008	grid -> grid	#(lambda (ic_compress2 (flipy $0)))
-1.684569	grid -> grid	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.689937	grid -> colour -> grid	#(lambda (lambda (ic_connectX (get_bg $0 $1))))
-1.699617	grid -> colour -> grid	#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1))))
-1.700314	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2)))))
-1.700620	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2)))))
Currently using this much memory: 1247883264
Exported checkpoint to ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=4_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
 [+] Cleared recognition model from:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=4_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
     and exported to:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=4_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False_graph=True.pickle
     Use this one for graphing.
Exporting primitive graph to ./experimentOutputs/arc/_primitives_3_depth.pdf
Exported primitive graph to ./experimentOutputs/arc/_primitives_3_unordered.pdf
ecIterator count 3
Currently using this much memory: 1260101632
Currently using this much memory: 1260101632
Using a waking task batch of size: 400
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 48 jobs | 0 CPUs | 400 tasks | 192.0m CPU rem | 4.0m rem | 0.0 avg lb
Enumerated     8,019 programs | 48 jobs | 47 CPUs | 400 tasks | 179.5m CPU rem | 3.7m rem | 12.0 avg lb
Enumerated   242,352 programs | 48 jobs | 47 CPUs | 399 tasks | 175.4m CPU rem | 3.7m rem | 13.3 avg lb
Enumerated   380,619 programs | 36 jobs | 47 CPUs | 290 tasks | 0.3m CPU rem | 0.0m rem | 14.0 avg lb
We enumerated this many programs, for each task:
	 [3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 891, 3423, 3475, 3468, 3491, 891, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479, 3522, 3505, 3552, 3514, 3548, 3470, 3546, 3424, 3546, 3450, 3493, 3508, 3473, 3492, 3498, 3423, 3475, 3468, 3491, 3486, 3500, 3482, 3464, 3503, 3407, 3446, 3438, 3467, 3432, 3437, 3410, 3429, 3600, 3568, 3546, 3582, 3560, 3548, 3593, 3572, 3546, 3523, 3499, 3572, 3470, 3503, 3499, 3479]
Generative model enumeration results:
HIT 00d62c1b w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)) ; log prior = -8.140248 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -8.171849 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -8.171849 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) $0)) ; log prior = -8.152010 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -8.171849 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)) ; log prior = -8.198456 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)) ; log prior = -8.198456 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -8.172908 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (repeatX $0))) ; log prior = -12.773197 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) $0)) ; log prior = -8.193555 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -8.165501 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -8.197532 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0)) ; log prior = -8.170762 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (colourPixel (topcol $0))) $0))) ; log prior = -12.766568 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -8.174034 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0))) ; log prior = -12.788127 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -11.740694 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -8.197532 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -8.165501 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)) ; log prior = -8.200332 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -8.165501 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -8.174034 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -8.155815 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)) ; log prior = -8.165922 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -8.184522 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)) ; log prior = -8.200332 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -8.169834 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -8.185004 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -8.181534 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -8.169834 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -12.791583 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -8.185004 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -8.155192 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -8.183851 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) ; log prior = -12.740428 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -8.193708 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0))) ; log prior = -12.759180 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -10.687972 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_connectX $0))) ; log prior = -12.804376 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)) ; log prior = -8.193708 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -8.159158 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -8.155815 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -10.742417 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2)) ; log prior = -10.704932 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -8.184522 ; log likelihood = 0.000000
HIT de1cd16c w/ (lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0))) ; log prior = -12.782091 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0)) ; log prior = -8.169834 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -8.176409 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (overlay $0 (flipx $0))) $0)) ; log prior = -8.174034 ; log likelihood = 0.000000
Hits 49/400 tasks
Average description length of a program solving a task: 9.155255 nats
Generative model average:  19 sec.	median: 1 	max: 167 	standard deviation 43
Currently using this much memory: 1260101632
Frontiers discovered top down: 49
Total frontiers: 57
Using an ensemble size of 1. Note that we will only store and test on the best recognition model.
Currently using this much memory: 1260101632
(ID=0): Training a recognition model from 57 frontiers, 100% Helmholtz, feature extractor MikelArcNet.
(ID=0): Got 0 Helmholtz frontiers - random Helmholtz training? : True
(ID=0): Contextual? False
(ID=0): Bias optimal? False
(ID=0): Aux loss? False (n.b. we train a 'auxiliary' classifier anyway - this controls if gradients propagate back to the future extractor)
Sampling 1000 programs from the prior on 48 CPUs...
Got 442/1000 valid samples.
(ID=0): Epoch 1 Loss 23.99
(ID=0): 	vs MDL (w/o neural net) 23.16
(ID=0): 	1 cum grad steps. 0.2 steps/sec | 135-way aux classif loss 0.6962
(ID=0): Epoch 50 Loss 32.46
(ID=0): 	vs MDL (w/o neural net) 31.07
(ID=0): 	50 cum grad steps. 6.2 steps/sec | 135-way aux classif loss 0.6808
(ID=0): Epoch 100 Loss 25.94
(ID=0): 	vs MDL (w/o neural net) 25.72
(ID=0): 	100 cum grad steps. 9.5 steps/sec | 135-way aux classif loss 0.6256
(ID=0): Epoch 150 Loss 31.44
(ID=0): 	vs MDL (w/o neural net) 31.88
(ID=0): 	150 cum grad steps. 11.6 steps/sec | 135-way aux classif loss 0.5648
(ID=0): Epoch 200 Loss 32.22
(ID=0): 	vs MDL (w/o neural net) 32.47
(ID=0): 	200 cum grad steps. 13.1 steps/sec | 135-way aux classif loss 0.5098
(ID=0): Epoch 250 Loss 28.47
(ID=0): 	vs MDL (w/o neural net) 28.93
(ID=0): 	250 cum grad steps. 14.0 steps/sec | 135-way aux classif loss 0.5777
(ID=0): Epoch 300 Loss 26.15
(ID=0): 	vs MDL (w/o neural net) 27.81
(ID=0): 	300 cum grad steps. 14.8 steps/sec | 135-way aux classif loss 0.4878
(ID=0): Epoch 350 Loss 26.81
(ID=0): 	vs MDL (w/o neural net) 29.02
(ID=0): 	350 cum grad steps. 15.4 steps/sec | 135-way aux classif loss 0.4677
(ID=0): Epoch 400 Loss 24.39
(ID=0): 	vs MDL (w/o neural net) 26.46
(ID=0): 	400 cum grad steps. 15.8 steps/sec | 135-way aux classif loss 0.4385
Sampling 1000 programs from the prior on 48 CPUs...
Got 456/1000 valid samples.
(ID=0): Epoch 450 Loss 25.50
(ID=0): 	vs MDL (w/o neural net) 27.64
(ID=0): 	450 cum grad steps. 13.5 steps/sec | 135-way aux classif loss 0.4040
(ID=0): Epoch 500 Loss 24.98
(ID=0): 	vs MDL (w/o neural net) 27.34
(ID=0): 	500 cum grad steps. 13.9 steps/sec | 135-way aux classif loss 0.3867
(ID=0): Epoch 550 Loss 21.70
(ID=0): 	vs MDL (w/o neural net) 24.04
(ID=0): 	550 cum grad steps. 14.4 steps/sec | 135-way aux classif loss 0.3568
(ID=0): Epoch 600 Loss 25.95
(ID=0): 	vs MDL (w/o neural net) 28.71
(ID=0): 	600 cum grad steps. 14.7 steps/sec | 135-way aux classif loss 0.3308
(ID=0): Epoch 650 Loss 27.35
(ID=0): 	vs MDL (w/o neural net) 30.08
(ID=0): 	650 cum grad steps. 15.0 steps/sec | 135-way aux classif loss 0.3154
(ID=0): Epoch 700 Loss 26.64
(ID=0): 	vs MDL (w/o neural net) 28.94
(ID=0): 	700 cum grad steps. 15.3 steps/sec | 135-way aux classif loss 0.3142
(ID=0): Epoch 750 Loss 27.63
(ID=0): 	vs MDL (w/o neural net) 30.24
(ID=0): 	750 cum grad steps. 15.6 steps/sec | 135-way aux classif loss 0.2907
(ID=0): Epoch 800 Loss 25.80
(ID=0): 	vs MDL (w/o neural net) 28.38
(ID=0): 	800 cum grad steps. 15.9 steps/sec | 135-way aux classif loss 0.2777
(ID=0): Epoch 850 Loss 22.66
(ID=0): 	vs MDL (w/o neural net) 25.02
(ID=0): 	850 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.2744
Sampling 1000 programs from the prior on 48 CPUs...
Got 474/1000 valid samples.
(ID=0): Epoch 900 Loss 25.42
(ID=0): 	vs MDL (w/o neural net) 28.04
(ID=0): 	900 cum grad steps. 14.8 steps/sec | 135-way aux classif loss 0.2574
(ID=0): Epoch 950 Loss 25.73
(ID=0): 	vs MDL (w/o neural net) 28.48
(ID=0): 	950 cum grad steps. 15.0 steps/sec | 135-way aux classif loss 0.2705
(ID=0): Epoch 1000 Loss 26.01
(ID=0): 	vs MDL (w/o neural net) 28.55
(ID=0): 	1000 cum grad steps. 15.2 steps/sec | 135-way aux classif loss 0.2466
(ID=0): Epoch 1050 Loss 25.22
(ID=0): 	vs MDL (w/o neural net) 27.64
(ID=0): 	1050 cum grad steps. 15.4 steps/sec | 135-way aux classif loss 0.2464
(ID=0): Epoch 1100 Loss 25.15
(ID=0): 	vs MDL (w/o neural net) 27.59
(ID=0): 	1100 cum grad steps. 15.6 steps/sec | 135-way aux classif loss 0.2414
(ID=0): Epoch 1150 Loss 25.01
(ID=0): 	vs MDL (w/o neural net) 27.63
(ID=0): 	1150 cum grad steps. 15.8 steps/sec | 135-way aux classif loss 0.2297
(ID=0): Epoch 1200 Loss 27.21
(ID=0): 	vs MDL (w/o neural net) 29.85
(ID=0): 	1200 cum grad steps. 15.9 steps/sec | 135-way aux classif loss 0.2431
(ID=0): Epoch 1250 Loss 24.76
(ID=0): 	vs MDL (w/o neural net) 27.13
(ID=0): 	1250 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.2183
(ID=0): Epoch 1300 Loss 26.26
(ID=0): 	vs MDL (w/o neural net) 29.01
(ID=0): 	1300 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.2217
(ID=0): Epoch 1350 Loss 29.00
(ID=0): 	vs MDL (w/o neural net) 32.08
(ID=0): 	1350 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.2270
Sampling 1000 programs from the prior on 48 CPUs...
Got 422/1000 valid samples.
(ID=0): Epoch 1400 Loss 25.41
(ID=0): 	vs MDL (w/o neural net) 28.06
(ID=0): 	1400 cum grad steps. 15.4 steps/sec | 135-way aux classif loss 0.2193
(ID=0): Epoch 1450 Loss 24.23
(ID=0): 	vs MDL (w/o neural net) 27.00
(ID=0): 	1450 cum grad steps. 15.6 steps/sec | 135-way aux classif loss 0.2163
(ID=0): Epoch 1500 Loss 24.92
(ID=0): 	vs MDL (w/o neural net) 27.61
(ID=0): 	1500 cum grad steps. 15.8 steps/sec | 135-way aux classif loss 0.2146
(ID=0): Epoch 1550 Loss 28.64
(ID=0): 	vs MDL (w/o neural net) 31.61
(ID=0): 	1550 cum grad steps. 15.9 steps/sec | 135-way aux classif loss 0.2214
(ID=0): Epoch 1600 Loss 27.30
(ID=0): 	vs MDL (w/o neural net) 30.05
(ID=0): 	1600 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.2092
(ID=0): Epoch 1650 Loss 25.35
(ID=0): 	vs MDL (w/o neural net) 27.58
(ID=0): 	1650 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.2047
(ID=0): Epoch 1700 Loss 27.06
(ID=0): 	vs MDL (w/o neural net) 29.65
(ID=0): 	1700 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.2065
(ID=0): Epoch 1750 Loss 25.00
(ID=0): 	vs MDL (w/o neural net) 27.74
(ID=0): 	1750 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.2054
Sampling 1000 programs from the prior on 48 CPUs...
Got 443/1000 valid samples.
(ID=0): Epoch 1800 Loss 31.20
(ID=0): 	vs MDL (w/o neural net) 34.47
(ID=0): 	1800 cum grad steps. 15.7 steps/sec | 135-way aux classif loss 0.2211
(ID=0): Epoch 1850 Loss 25.80
(ID=0): 	vs MDL (w/o neural net) 28.06
(ID=0): 	1850 cum grad steps. 15.8 steps/sec | 135-way aux classif loss 0.2075
(ID=0): Epoch 1900 Loss 25.22
(ID=0): 	vs MDL (w/o neural net) 27.99
(ID=0): 	1900 cum grad steps. 15.9 steps/sec | 135-way aux classif loss 0.2024
(ID=0): Epoch 1950 Loss 27.25
(ID=0): 	vs MDL (w/o neural net) 30.15
(ID=0): 	1950 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.2026
(ID=0): Epoch 2000 Loss 24.15
(ID=0): 	vs MDL (w/o neural net) 26.64
(ID=0): 	2000 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.1910
(ID=0): Epoch 2050 Loss 29.81
(ID=0): 	vs MDL (w/o neural net) 32.72
(ID=0): 	2050 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.2090
(ID=0): Epoch 2100 Loss 25.06
(ID=0): 	vs MDL (w/o neural net) 27.85
(ID=0): 	2100 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1964
(ID=0): Epoch 2150 Loss 24.94
(ID=0): 	vs MDL (w/o neural net) 27.27
(ID=0): 	2150 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1991
(ID=0): Epoch 2200 Loss 23.32
(ID=0): 	vs MDL (w/o neural net) 26.15
(ID=0): 	2200 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1884
Sampling 1000 programs from the prior on 48 CPUs...
Got 445/1000 valid samples.
(ID=0): Epoch 2250 Loss 24.52
(ID=0): 	vs MDL (w/o neural net) 27.36
(ID=0): 	2250 cum grad steps. 15.9 steps/sec | 135-way aux classif loss 0.1910
(ID=0): Epoch 2300 Loss 27.22
(ID=0): 	vs MDL (w/o neural net) 29.56
(ID=0): 	2300 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.2005
(ID=0): Epoch 2350 Loss 26.09
(ID=0): 	vs MDL (w/o neural net) 28.63
(ID=0): 	2350 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.1922
(ID=0): Epoch 2400 Loss 26.96
(ID=0): 	vs MDL (w/o neural net) 29.17
(ID=0): 	2400 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.1961
(ID=0): Epoch 2450 Loss 28.82
(ID=0): 	vs MDL (w/o neural net) 31.17
(ID=0): 	2450 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.2159
(ID=0): Epoch 2500 Loss 23.87
(ID=0): 	vs MDL (w/o neural net) 26.25
(ID=0): 	2500 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1857
(ID=0): Epoch 2550 Loss 23.97
(ID=0): 	vs MDL (w/o neural net) 26.37
(ID=0): 	2550 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1769
(ID=0): Epoch 2600 Loss 23.14
(ID=0): 	vs MDL (w/o neural net) 25.81
(ID=0): 	2600 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1784
(ID=0): Epoch 2650 Loss 26.25
(ID=0): 	vs MDL (w/o neural net) 28.99
(ID=0): 	2650 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1901
Sampling 1000 programs from the prior on 48 CPUs...
Got 473/1000 valid samples.
(ID=0): Epoch 2700 Loss 27.46
(ID=0): 	vs MDL (w/o neural net) 30.21
(ID=0): 	2700 cum grad steps. 16.0 steps/sec | 135-way aux classif loss 0.1932
(ID=0): Epoch 2750 Loss 26.82
(ID=0): 	vs MDL (w/o neural net) 29.84
(ID=0): 	2750 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.1884
(ID=0): Epoch 2800 Loss 25.94
(ID=0): 	vs MDL (w/o neural net) 28.79
(ID=0): 	2800 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.1785
(ID=0): Epoch 2850 Loss 26.54
(ID=0): 	vs MDL (w/o neural net) 29.27
(ID=0): 	2850 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.1891
(ID=0): Epoch 2900 Loss 23.12
(ID=0): 	vs MDL (w/o neural net) 25.62
(ID=0): 	2900 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1722
(ID=0): Epoch 2950 Loss 23.41
(ID=0): 	vs MDL (w/o neural net) 25.85
(ID=0): 	2950 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1755
(ID=0): Epoch 3000 Loss 26.35
(ID=0): 	vs MDL (w/o neural net) 29.14
(ID=0): 	3000 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1865
(ID=0): Epoch 3050 Loss 25.46
(ID=0): 	vs MDL (w/o neural net) 27.84
(ID=0): 	3050 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1874
(ID=0): Epoch 3100 Loss 25.62
(ID=0): 	vs MDL (w/o neural net) 28.17
(ID=0): 	3100 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1826
(ID=0): Epoch 3150 Loss 26.93
(ID=0): 	vs MDL (w/o neural net) 29.80
(ID=0): 	3150 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1824
Sampling 1000 programs from the prior on 48 CPUs...
Got 464/1000 valid samples.
(ID=0): Epoch 3200 Loss 25.92
(ID=0): 	vs MDL (w/o neural net) 28.84
(ID=0): 	3200 cum grad steps. 16.1 steps/sec | 135-way aux classif loss 0.1764
(ID=0): Epoch 3250 Loss 24.21
(ID=0): 	vs MDL (w/o neural net) 26.73
(ID=0): 	3250 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.1729
(ID=0): Epoch 3300 Loss 29.02
(ID=0): 	vs MDL (w/o neural net) 31.75
(ID=0): 	3300 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1953
(ID=0): Epoch 3350 Loss 26.21
(ID=0): 	vs MDL (w/o neural net) 29.12
(ID=0): 	3350 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1809
(ID=0): Epoch 3400 Loss 26.50
(ID=0): 	vs MDL (w/o neural net) 29.04
(ID=0): 	3400 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1854
(ID=0): Epoch 3450 Loss 25.25
(ID=0): 	vs MDL (w/o neural net) 27.89
(ID=0): 	3450 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1787
(ID=0): Epoch 3500 Loss 27.52
(ID=0): 	vs MDL (w/o neural net) 30.46
(ID=0): 	3500 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1851
(ID=0): Epoch 3550 Loss 32.46
(ID=0): 	vs MDL (w/o neural net) 35.77
(ID=0): 	3550 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.2069
(ID=0): Epoch 3600 Loss 25.31
(ID=0): 	vs MDL (w/o neural net) 27.84
(ID=0): 	3600 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1764
Sampling 1000 programs from the prior on 48 CPUs...
Got 444/1000 valid samples.
(ID=0): Epoch 3650 Loss 25.30
(ID=0): 	vs MDL (w/o neural net) 27.98
(ID=0): 	3650 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.1762
(ID=0): Epoch 3700 Loss 24.69
(ID=0): 	vs MDL (w/o neural net) 27.20
(ID=0): 	3700 cum grad steps. 16.2 steps/sec | 135-way aux classif loss 0.1780
(ID=0): Epoch 3750 Loss 27.70
(ID=0): 	vs MDL (w/o neural net) 30.81
(ID=0): 	3750 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1867
(ID=0): Epoch 3800 Loss 23.62
(ID=0): 	vs MDL (w/o neural net) 26.42
(ID=0): 	3800 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1708
(ID=0): Epoch 3850 Loss 23.51
(ID=0): 	vs MDL (w/o neural net) 26.32
(ID=0): 	3850 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1778
(ID=0): Epoch 3900 Loss 27.63
(ID=0): 	vs MDL (w/o neural net) 30.29
(ID=0): 	3900 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1901
(ID=0): Epoch 3950 Loss 26.51
(ID=0): 	vs MDL (w/o neural net) 29.47
(ID=0): 	3950 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1833
(ID=0): Epoch 4000 Loss 24.68
(ID=0): 	vs MDL (w/o neural net) 27.27
(ID=0): 	4000 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1739
(ID=0): Epoch 4050 Loss 27.00
(ID=0): 	vs MDL (w/o neural net) 29.91
(ID=0): 	4050 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1827
Sampling 1000 programs from the prior on 48 CPUs...
Got 447/1000 valid samples.
(ID=0): Epoch 4100 Loss 26.60
(ID=0): 	vs MDL (w/o neural net) 29.14
(ID=0): 	4100 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1791
(ID=0): Epoch 4150 Loss 27.95
(ID=0): 	vs MDL (w/o neural net) 30.70
(ID=0): 	4150 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1885
(ID=0): Epoch 4200 Loss 24.26
(ID=0): 	vs MDL (w/o neural net) 26.91
(ID=0): 	4200 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1696
(ID=0): Epoch 4250 Loss 23.23
(ID=0): 	vs MDL (w/o neural net) 25.98
(ID=0): 	4250 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1700
(ID=0): Epoch 4300 Loss 29.28
(ID=0): 	vs MDL (w/o neural net) 32.11
(ID=0): 	4300 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1909
(ID=0): Epoch 4350 Loss 24.95
(ID=0): 	vs MDL (w/o neural net) 27.29
(ID=0): 	4350 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1768
(ID=0): Epoch 4400 Loss 27.46
(ID=0): 	vs MDL (w/o neural net) 30.40
(ID=0): 	4400 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1889
(ID=0): Epoch 4450 Loss 24.13
(ID=0): 	vs MDL (w/o neural net) 26.64
(ID=0): 	4450 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1760
(ID=0): Epoch 4500 Loss 26.23
(ID=0): 	vs MDL (w/o neural net) 29.07
(ID=0): 	4500 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1761
Sampling 1000 programs from the prior on 48 CPUs...
Got 453/1000 valid samples.
(ID=0): Epoch 4550 Loss 25.62
(ID=0): 	vs MDL (w/o neural net) 28.36
(ID=0): 	4550 cum grad steps. 16.3 steps/sec | 135-way aux classif loss 0.1778
(ID=0): Epoch 4600 Loss 25.49
(ID=0): 	vs MDL (w/o neural net) 28.11
(ID=0): 	4600 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1789
(ID=0): Epoch 4650 Loss 23.66
(ID=0): 	vs MDL (w/o neural net) 26.18
(ID=0): 	4650 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1673
(ID=0): Epoch 4700 Loss 24.21
(ID=0): 	vs MDL (w/o neural net) 26.64
(ID=0): 	4700 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1710
(ID=0): Epoch 4750 Loss 28.41
(ID=0): 	vs MDL (w/o neural net) 30.96
(ID=0): 	4750 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1870
(ID=0): Epoch 4800 Loss 24.58
(ID=0): 	vs MDL (w/o neural net) 27.82
(ID=0): 	4800 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1710
(ID=0): Epoch 4850 Loss 25.19
(ID=0): 	vs MDL (w/o neural net) 28.21
(ID=0): 	4850 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1729
(ID=0): Epoch 4900 Loss 24.24
(ID=0): 	vs MDL (w/o neural net) 27.08
(ID=0): 	4900 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1658
(ID=0): Epoch 4950 Loss 26.57
(ID=0): 	vs MDL (w/o neural net) 29.33
(ID=0): 	4950 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1758
Sampling 1000 programs from the prior on 48 CPUs...
Got 470/1000 valid samples.
(ID=0): Epoch 5000 Loss 27.01
(ID=0): 	vs MDL (w/o neural net) 29.76
(ID=0): 	5000 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1825
(ID=0): Epoch 5050 Loss 26.28
(ID=0): 	vs MDL (w/o neural net) 29.03
(ID=0): 	5050 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1759
(ID=0): Epoch 5100 Loss 24.20
(ID=0): 	vs MDL (w/o neural net) 26.70
(ID=0): 	5100 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1739
(ID=0): Epoch 5150 Loss 26.16
(ID=0): 	vs MDL (w/o neural net) 28.95
(ID=0): 	5150 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1810
(ID=0): Epoch 5200 Loss 26.61
(ID=0): 	vs MDL (w/o neural net) 29.55
(ID=0): 	5200 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1789
(ID=0): Epoch 5250 Loss 26.87
(ID=0): 	vs MDL (w/o neural net) 29.37
(ID=0): 	5250 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1845
(ID=0): Epoch 5300 Loss 31.54
(ID=0): 	vs MDL (w/o neural net) 34.75
(ID=0): 	5300 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.2011
(ID=0): Epoch 5350 Loss 25.41
(ID=0): 	vs MDL (w/o neural net) 28.21
(ID=0): 	5350 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1779
(ID=0): Epoch 5400 Loss 26.90
(ID=0): 	vs MDL (w/o neural net) 30.02
(ID=0): 	5400 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1831
Sampling 1000 programs from the prior on 48 CPUs...
Got 442/1000 valid samples.
(ID=0): Epoch 5450 Loss 26.25
(ID=0): 	vs MDL (w/o neural net) 28.69
(ID=0): 	5450 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1933
(ID=0): Epoch 5500 Loss 25.20
(ID=0): 	vs MDL (w/o neural net) 27.84
(ID=0): 	5500 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1780
(ID=0): Epoch 5550 Loss 26.20
(ID=0): 	vs MDL (w/o neural net) 29.10
(ID=0): 	5550 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1806
(ID=0): Epoch 5600 Loss 24.66
(ID=0): 	vs MDL (w/o neural net) 27.17
(ID=0): 	5600 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1803
(ID=0): Epoch 5650 Loss 25.59
(ID=0): 	vs MDL (w/o neural net) 28.37
(ID=0): 	5650 cum grad steps. 16.5 steps/sec | 135-way aux classif loss 0.1845
(ID=0): Epoch 5700 Loss 26.64
(ID=0): 	vs MDL (w/o neural net) 29.51
(ID=0): 	5700 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1840
(ID=0): Epoch 5750 Loss 25.41
(ID=0): 	vs MDL (w/o neural net) 27.86
(ID=0): 	5750 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1805
(ID=0): Epoch 5800 Loss 25.63
(ID=0): 	vs MDL (w/o neural net) 28.35
(ID=0): 	5800 cum grad steps. 16.6 steps/sec | 135-way aux classif loss 0.1841
(ID=0): Epoch 5850 Loss 28.62
(ID=0): 	vs MDL (w/o neural net) 31.47
(ID=0): 	5850 cum grad steps. 16.7 steps/sec | 135-way aux classif loss 0.1902
Sampling 1000 programs from the prior on 48 CPUs...
Got 433/1000 valid samples.
(ID=0): Epoch 5900 Loss 25.07
(ID=0): 	vs MDL (w/o neural net) 27.86
(ID=0): 	5900 cum grad steps. 16.4 steps/sec | 135-way aux classif loss 0.1773
(ID=0):   Trained recognition model in 360.0116014480591 seconds
Currently using this much memory: 1265229824
Trained an ensemble of 1 recognition models, now enumerating.
Enumerating from recognizer 0 of 1
Evaluated recognition model in 3.8 seconds
Using experimental Python parallelism with 48 CPUs
Enumerated         0 programs | 400 jobs | 0 CPUs | 400 tasks | 1600.0m CPU rem | 33.3m rem | 0.0 avg lb
Enumerated     1,527 programs | 400 jobs | 47 CPUs | 400 tasks | 1596.3m CPU rem | 33.3m rem | 1.6 avg lb
Enumerated     3,986 programs | 400 jobs | 47 CPUs | 400 tasks | 1591.9m CPU rem | 33.2m rem | 1.9 avg lb
Enumerated     6,690 programs | 400 jobs | 47 CPUs | 400 tasks | 1587.5m CPU rem | 33.1m rem | 2.2 avg lb
Enumerated    31,101 programs | 399 jobs | 47 CPUs | 399 tasks | 1579.4m CPU rem | 32.9m rem | 2.5 avg lb
Enumerated    73,162 programs | 397 jobs | 47 CPUs | 397 tasks | 1567.9m CPU rem | 32.7m rem | 2.8 avg lb
Enumerated   111,425 programs | 394 jobs | 47 CPUs | 394 tasks | 1553.1m CPU rem | 32.4m rem | 3.0 avg lb
Enumerated   127,821 programs | 394 jobs | 47 CPUs | 394 tasks | 1548.9m CPU rem | 32.3m rem | 3.3 avg lb
Enumerated   147,698 programs | 394 jobs | 47 CPUs | 394 tasks | 1544.6m CPU rem | 32.2m rem | 3.6 avg lb
Enumerated   172,206 programs | 394 jobs | 47 CPUs | 394 tasks | 1540.1m CPU rem | 32.1m rem | 3.9 avg lb
Enumerated   202,165 programs | 394 jobs | 47 CPUs | 394 tasks | 1535.9m CPU rem | 32.0m rem | 4.2 avg lb
Enumerated   222,252 programs | 394 jobs | 47 CPUs | 394 tasks | 1531.6m CPU rem | 31.9m rem | 4.5 avg lb
Enumerated   254,384 programs | 393 jobs | 47 CPUs | 393 tasks | 1523.7m CPU rem | 31.7m rem | 4.8 avg lb
Enumerated   280,080 programs | 393 jobs | 47 CPUs | 393 tasks | 1519.4m CPU rem | 31.7m rem | 5.1 avg lb
Enumerated   309,423 programs | 393 jobs | 47 CPUs | 393 tasks | 1515.1m CPU rem | 31.6m rem | 5.4 avg lb
Enumerated   329,108 programs | 393 jobs | 47 CPUs | 393 tasks | 1510.7m CPU rem | 31.5m rem | 5.7 avg lb
Enumerated   354,185 programs | 392 jobs | 47 CPUs | 392 tasks | 1502.9m CPU rem | 31.3m rem | 6.0 avg lb
Enumerated   369,648 programs | 391 jobs | 47 CPUs | 391 tasks | 1495.1m CPU rem | 31.1m rem | 6.3 avg lb
Enumerated   393,758 programs | 391 jobs | 47 CPUs | 391 tasks | 1490.9m CPU rem | 31.1m rem | 6.6 avg lb
Enumerated   418,424 programs | 388 jobs | 47 CPUs | 388 tasks | 1476.1m CPU rem | 30.8m rem | 6.9 avg lb
Enumerated   456,730 programs | 388 jobs | 47 CPUs | 388 tasks | 1471.8m CPU rem | 30.7m rem | 7.2 avg lb
Enumerated   486,057 programs | 388 jobs | 47 CPUs | 388 tasks | 1467.6m CPU rem | 30.6m rem | 7.5 avg lb
Enumerated   511,033 programs | 388 jobs | 47 CPUs | 388 tasks | 1463.5m CPU rem | 30.5m rem | 7.8 avg lb
Enumerated   531,475 programs | 387 jobs | 47 CPUs | 387 tasks | 1455.9m CPU rem | 30.3m rem | 8.1 avg lb
Enumerated   559,725 programs | 387 jobs | 47 CPUs | 387 tasks | 1451.7m CPU rem | 30.2m rem | 8.4 avg lb
Enumerated   598,064 programs | 386 jobs | 47 CPUs | 386 tasks | 1443.9m CPU rem | 30.1m rem | 8.7 avg lb
Enumerated   627,163 programs | 384 jobs | 47 CPUs | 384 tasks | 1432.6m CPU rem | 29.8m rem | 9.0 avg lb
Enumerated   647,660 programs | 384 jobs | 47 CPUs | 384 tasks | 1428.4m CPU rem | 29.8m rem | 9.3 avg lb
Enumerated   677,778 programs | 383 jobs | 47 CPUs | 383 tasks | 1420.6m CPU rem | 29.6m rem | 9.6 avg lb
Enumerated   715,709 programs | 383 jobs | 47 CPUs | 383 tasks | 1416.5m CPU rem | 29.5m rem | 9.9 avg lb
Enumerated   748,970 programs | 382 jobs | 47 CPUs | 382 tasks | 1408.9m CPU rem | 29.4m rem | 10.2 avg lb
Enumerated   777,828 programs | 381 jobs | 47 CPUs | 381 tasks | 1401.2m CPU rem | 29.2m rem | 10.6 avg lb
Enumerated   802,163 programs | 380 jobs | 47 CPUs | 380 tasks | 1393.6m CPU rem | 29.0m rem | 10.9 avg lb
Enumerated   823,052 programs | 380 jobs | 47 CPUs | 380 tasks | 1389.1m CPU rem | 28.9m rem | 11.2 avg lb
Enumerated   847,920 programs | 380 jobs | 47 CPUs | 380 tasks | 1385.0m CPU rem | 28.9m rem | 11.5 avg lb
Enumerated   877,220 programs | 380 jobs | 47 CPUs | 380 tasks | 1380.9m CPU rem | 28.8m rem | 11.8 avg lb
Enumerated   905,937 programs | 379 jobs | 47 CPUs | 379 tasks | 1373.3m CPU rem | 28.6m rem | 12.0 avg lb
Enumerated   931,115 programs | 379 jobs | 47 CPUs | 379 tasks | 1368.9m CPU rem | 28.5m rem | 12.1 avg lb
Enumerated   964,550 programs | 379 jobs | 47 CPUs | 379 tasks | 1364.8m CPU rem | 28.4m rem | 12.1 avg lb
Enumerated   993,300 programs | 378 jobs | 47 CPUs | 378 tasks | 1356.8m CPU rem | 28.3m rem | 12.2 avg lb
Enumerated 1,014,669 programs | 378 jobs | 47 CPUs | 378 tasks | 1352.4m CPU rem | 28.2m rem | 12.2 avg lb
Enumerated 1,036,910 programs | 378 jobs | 47 CPUs | 378 tasks | 1348.2m CPU rem | 28.1m rem | 12.3 avg lb
Enumerated 1,043,518 programs | 378 jobs | 47 CPUs | 378 tasks | 1343.9m CPU rem | 28.0m rem | 12.3 avg lb
Enumerated 1,048,468 programs | 378 jobs | 47 CPUs | 378 tasks | 1339.6m CPU rem | 27.9m rem | 12.4 avg lb
Enumerated 1,052,142 programs | 378 jobs | 47 CPUs | 378 tasks | 1335.2m CPU rem | 27.8m rem | 12.4 avg lb
Enumerated 1,058,597 programs | 378 jobs | 47 CPUs | 378 tasks | 1330.9m CPU rem | 27.7m rem | 12.5 avg lb
Enumerated 1,094,833 programs | 378 jobs | 47 CPUs | 378 tasks | 1326.8m CPU rem | 27.6m rem | 12.5 avg lb
Enumerated 1,160,049 programs | 378 jobs | 47 CPUs | 378 tasks | 1322.5m CPU rem | 27.6m rem | 12.5 avg lb
Enumerated 1,209,057 programs | 378 jobs | 47 CPUs | 378 tasks | 1318.0m CPU rem | 27.5m rem | 12.6 avg lb
Enumerated 1,247,377 programs | 378 jobs | 47 CPUs | 378 tasks | 1313.5m CPU rem | 27.4m rem | 12.6 avg lb
Enumerated 1,267,412 programs | 378 jobs | 47 CPUs | 378 tasks | 1309.4m CPU rem | 27.3m rem | 12.6 avg lb
Enumerated 1,331,857 programs | 378 jobs | 47 CPUs | 378 tasks | 1304.5m CPU rem | 27.2m rem | 12.7 avg lb
Enumerated 1,380,776 programs | 378 jobs | 47 CPUs | 378 tasks | 1300.2m CPU rem | 27.1m rem | 12.7 avg lb
Enumerated 1,440,061 programs | 378 jobs | 47 CPUs | 378 tasks | 1295.4m CPU rem | 27.0m rem | 12.7 avg lb
Enumerated 1,522,283 programs | 378 jobs | 47 CPUs | 378 tasks | 1291.3m CPU rem | 26.9m rem | 12.8 avg lb
Enumerated 1,606,016 programs | 378 jobs | 47 CPUs | 378 tasks | 1287.2m CPU rem | 26.8m rem | 12.8 avg lb
Enumerated 1,658,179 programs | 377 jobs | 47 CPUs | 377 tasks | 1279.3m CPU rem | 26.7m rem | 12.9 avg lb
Enumerated 1,722,957 programs | 377 jobs | 47 CPUs | 377 tasks | 1274.9m CPU rem | 26.6m rem | 12.9 avg lb
Enumerated 1,775,538 programs | 377 jobs | 47 CPUs | 377 tasks | 1270.5m CPU rem | 26.5m rem | 12.9 avg lb
Enumerated 1,841,828 programs | 377 jobs | 47 CPUs | 377 tasks | 1265.7m CPU rem | 26.4m rem | 13.0 avg lb
Enumerated 1,875,313 programs | 377 jobs | 47 CPUs | 377 tasks | 1260.8m CPU rem | 26.3m rem | 13.0 avg lb
Enumerated 1,924,306 programs | 377 jobs | 47 CPUs | 377 tasks | 1256.5m CPU rem | 26.2m rem | 13.1 avg lb
Enumerated 1,973,341 programs | 377 jobs | 47 CPUs | 377 tasks | 1251.8m CPU rem | 26.1m rem | 13.1 avg lb
Enumerated 2,072,219 programs | 377 jobs | 47 CPUs | 377 tasks | 1246.8m CPU rem | 26.0m rem | 13.1 avg lb
Enumerated 2,108,452 programs | 377 jobs | 47 CPUs | 377 tasks | 1242.5m CPU rem | 25.9m rem | 13.1 avg lb
Enumerated 2,160,186 programs | 377 jobs | 47 CPUs | 377 tasks | 1238.2m CPU rem | 25.8m rem | 13.2 avg lb
Enumerated 2,197,498 programs | 377 jobs | 47 CPUs | 377 tasks | 1233.2m CPU rem | 25.7m rem | 13.2 avg lb
Enumerated 2,246,861 programs | 377 jobs | 47 CPUs | 377 tasks | 1228.8m CPU rem | 25.6m rem | 13.3 avg lb
Enumerated 2,360,860 programs | 377 jobs | 47 CPUs | 377 tasks | 1224.5m CPU rem | 25.5m rem | 13.3 avg lb
Enumerated 2,428,578 programs | 377 jobs | 47 CPUs | 377 tasks | 1220.0m CPU rem | 25.4m rem | 13.3 avg lb
Enumerated 2,463,832 programs | 377 jobs | 47 CPUs | 377 tasks | 1215.2m CPU rem | 25.3m rem | 13.4 avg lb
Enumerated 2,512,742 programs | 377 jobs | 47 CPUs | 377 tasks | 1210.8m CPU rem | 25.2m rem | 13.4 avg lb
Enumerated 2,578,987 programs | 377 jobs | 47 CPUs | 377 tasks | 1206.5m CPU rem | 25.1m rem | 13.4 avg lb
Enumerated 2,635,401 programs | 377 jobs | 47 CPUs | 377 tasks | 1201.7m CPU rem | 25.0m rem | 13.5 avg lb
Enumerated 2,671,674 programs | 377 jobs | 47 CPUs | 377 tasks | 1197.2m CPU rem | 24.9m rem | 13.5 avg lb
Enumerated 2,750,645 programs | 377 jobs | 47 CPUs | 377 tasks | 1192.5m CPU rem | 24.8m rem | 13.5 avg lb
Enumerated 2,835,496 programs | 377 jobs | 47 CPUs | 377 tasks | 1187.9m CPU rem | 24.7m rem | 13.6 avg lb
Enumerated 2,902,219 programs | 377 jobs | 47 CPUs | 377 tasks | 1183.7m CPU rem | 24.7m rem | 13.6 avg lb
Enumerated 2,953,137 programs | 377 jobs | 47 CPUs | 377 tasks | 1178.9m CPU rem | 24.6m rem | 13.6 avg lb
Enumerated 2,987,296 programs | 377 jobs | 47 CPUs | 377 tasks | 1174.1m CPU rem | 24.5m rem | 13.7 avg lb
Enumerated 3,038,481 programs | 376 jobs | 47 CPUs | 376 tasks | 1167.2m CPU rem | 24.3m rem | 13.7 avg lb
Enumerated 3,090,023 programs | 376 jobs | 47 CPUs | 376 tasks | 1162.9m CPU rem | 24.2m rem | 13.7 avg lb
Enumerated 3,153,722 programs | 376 jobs | 47 CPUs | 376 tasks | 1158.7m CPU rem | 24.1m rem | 13.8 avg lb
Enumerated 3,202,179 programs | 376 jobs | 47 CPUs | 376 tasks | 1154.5m CPU rem | 24.1m rem | 13.8 avg lb
Enumerated 3,268,959 programs | 376 jobs | 47 CPUs | 376 tasks | 1150.3m CPU rem | 24.0m rem | 13.8 avg lb
Enumerated 3,350,456 programs | 376 jobs | 47 CPUs | 376 tasks | 1145.9m CPU rem | 23.9m rem | 13.9 avg lb
Enumerated 3,383,647 programs | 376 jobs | 47 CPUs | 376 tasks | 1141.6m CPU rem | 23.8m rem | 13.9 avg lb
Enumerated 3,463,455 programs | 376 jobs | 47 CPUs | 376 tasks | 1137.1m CPU rem | 23.7m rem | 13.9 avg lb
Enumerated 3,515,384 programs | 376 jobs | 47 CPUs | 376 tasks | 1132.2m CPU rem | 23.6m rem | 14.0 avg lb
Enumerated 3,566,921 programs | 376 jobs | 47 CPUs | 376 tasks | 1127.9m CPU rem | 23.5m rem | 14.0 avg lb
Enumerated 3,634,007 programs | 374 jobs | 47 CPUs | 374 tasks | 1117.7m CPU rem | 23.3m rem | 14.0 avg lb
Enumerated 3,682,627 programs | 374 jobs | 47 CPUs | 374 tasks | 1113.3m CPU rem | 23.2m rem | 14.1 avg lb
Enumerated 3,746,965 programs | 374 jobs | 47 CPUs | 374 tasks | 1108.8m CPU rem | 23.1m rem | 14.1 avg lb
Enumerated 3,788,987 programs | 374 jobs | 47 CPUs | 374 tasks | 1104.2m CPU rem | 23.0m rem | 14.1 avg lb
Enumerated 3,847,874 programs | 374 jobs | 47 CPUs | 374 tasks | 1099.9m CPU rem | 22.9m rem | 14.2 avg lb
Enumerated 3,906,361 programs | 374 jobs | 47 CPUs | 374 tasks | 1095.8m CPU rem | 22.8m rem | 14.2 avg lb
Enumerated 4,027,719 programs | 373 jobs | 47 CPUs | 373 tasks | 1089.4m CPU rem | 22.7m rem | 14.3 avg lb
Enumerated 4,090,589 programs | 372 jobs | 47 CPUs | 372 tasks | 1081.8m CPU rem | 22.5m rem | 14.3 avg lb
Enumerated 4,129,647 programs | 371 jobs | 47 CPUs | 371 tasks | 1074.1m CPU rem | 22.4m rem | 14.4 avg lb
Enumerated 4,166,323 programs | 371 jobs | 47 CPUs | 371 tasks | 1069.5m CPU rem | 22.3m rem | 14.4 avg lb
Enumerated 4,233,644 programs | 371 jobs | 47 CPUs | 371 tasks | 1064.7m CPU rem | 22.2m rem | 14.4 avg lb
Enumerated 4,261,934 programs | 371 jobs | 47 CPUs | 371 tasks | 1060.4m CPU rem | 22.1m rem | 14.5 avg lb
Enumerated 4,266,539 programs | 371 jobs | 47 CPUs | 371 tasks | 1056.1m CPU rem | 22.0m rem | 14.5 avg lb
Enumerated 4,307,426 programs | 371 jobs | 47 CPUs | 371 tasks | 1051.3m CPU rem | 21.9m rem | 14.5 avg lb
Enumerated 4,320,976 programs | 370 jobs | 47 CPUs | 370 tasks | 1043.8m CPU rem | 21.7m rem | 14.5 avg lb
Enumerated 4,329,474 programs | 370 jobs | 47 CPUs | 370 tasks | 1039.5m CPU rem | 21.7m rem | 14.6 avg lb
Enumerated 4,352,162 programs | 370 jobs | 47 CPUs | 370 tasks | 1033.5m CPU rem | 21.5m rem | 14.6 avg lb
Enumerated 4,409,363 programs | 369 jobs | 47 CPUs | 369 tasks | 977.7m CPU rem | 20.4m rem | 14.6 avg lb
Enumerated 4,634,401 programs | 364 jobs | 47 CPUs | 364 tasks | 973.6m CPU rem | 20.3m rem | 14.6 avg lb
Enumerated 4,755,895 programs | 363 jobs | 47 CPUs | 363 tasks | 969.2m CPU rem | 20.2m rem | 14.6 avg lb
Enumerated 5,005,502 programs | 358 jobs | 47 CPUs | 358 tasks | 965.0m CPU rem | 20.1m rem | 14.6 avg lb
Enumerated 5,305,078 programs | 352 jobs | 47 CPUs | 352 tasks | 960.4m CPU rem | 20.0m rem | 14.6 avg lb
Enumerated 5,470,587 programs | 348 jobs | 47 CPUs | 348 tasks | 955.7m CPU rem | 19.9m rem | 14.7 avg lb
Enumerated 5,651,042 programs | 346 jobs | 47 CPUs | 346 tasks | 951.4m CPU rem | 19.8m rem | 14.7 avg lb
Enumerated 5,763,832 programs | 343 jobs | 47 CPUs | 343 tasks | 946.9m CPU rem | 19.7m rem | 14.7 avg lb
Enumerated 5,907,908 programs | 343 jobs | 47 CPUs | 343 tasks | 942.8m CPU rem | 19.6m rem | 14.7 avg lb
Enumerated 5,975,277 programs | 336 jobs | 47 CPUs | 336 tasks | 938.7m CPU rem | 19.6m rem | 14.7 avg lb
Enumerated 6,181,118 programs | 332 jobs | 47 CPUs | 332 tasks | 934.8m CPU rem | 19.5m rem | 14.8 avg lb
Enumerated 6,390,968 programs | 329 jobs | 47 CPUs | 329 tasks | 930.6m CPU rem | 19.4m rem | 14.8 avg lb
Enumerated 6,496,846 programs | 328 jobs | 47 CPUs | 328 tasks | 926.5m CPU rem | 19.3m rem | 14.8 avg lb
Enumerated 6,667,285 programs | 326 jobs | 47 CPUs | 326 tasks | 922.6m CPU rem | 19.2m rem | 14.9 avg lb
Enumerated 6,825,523 programs | 323 jobs | 47 CPUs | 323 tasks | 918.5m CPU rem | 19.1m rem | 14.9 avg lb
Enumerated 6,982,432 programs | 322 jobs | 47 CPUs | 322 tasks | 913.8m CPU rem | 19.0m rem | 14.9 avg lb
Enumerated 7,039,166 programs | 322 jobs | 47 CPUs | 322 tasks | 909.1m CPU rem | 18.9m rem | 15.0 avg lb
Enumerated 7,047,204 programs | 322 jobs | 47 CPUs | 322 tasks | 904.7m CPU rem | 18.8m rem | 15.0 avg lb
Enumerated 7,060,290 programs | 322 jobs | 47 CPUs | 322 tasks | 900.2m CPU rem | 18.8m rem | 15.0 avg lb
Enumerated 7,071,960 programs | 322 jobs | 47 CPUs | 322 tasks | 883.2m CPU rem | 18.4m rem | 15.0 avg lb
Enumerated 7,124,276 programs | 321 jobs | 47 CPUs | 321 tasks | 862.4m CPU rem | 18.0m rem | 15.0 avg lb
Enumerated 7,180,420 programs | 320 jobs | 47 CPUs | 320 tasks | 858.0m CPU rem | 17.9m rem | 15.0 avg lb
Enumerated 7,347,325 programs | 317 jobs | 47 CPUs | 317 tasks | 853.0m CPU rem | 17.8m rem | 15.0 avg lb
Enumerated 7,549,258 programs | 313 jobs | 47 CPUs | 313 tasks | 848.8m CPU rem | 17.7m rem | 15.1 avg lb
Enumerated 7,652,960 programs | 311 jobs | 47 CPUs | 311 tasks | 844.5m CPU rem | 17.6m rem | 15.1 avg lb
Enumerated 7,708,865 programs | 310 jobs | 47 CPUs | 310 tasks | 839.5m CPU rem | 17.5m rem | 15.1 avg lb
Enumerated 7,913,677 programs | 306 jobs | 47 CPUs | 306 tasks | 833.6m CPU rem | 17.4m rem | 15.1 avg lb
Enumerated 8,108,736 programs | 302 jobs | 47 CPUs | 302 tasks | 829.2m CPU rem | 17.3m rem | 15.1 avg lb
Enumerated 8,161,906 programs | 301 jobs | 47 CPUs | 301 tasks | 824.7m CPU rem | 17.2m rem | 15.1 avg lb
Enumerated 8,281,381 programs | 299 jobs | 47 CPUs | 299 tasks | 819.9m CPU rem | 17.1m rem | 15.2 avg lb
Enumerated 8,433,273 programs | 296 jobs | 47 CPUs | 296 tasks | 815.6m CPU rem | 17.0m rem | 15.2 avg lb
Enumerated 8,523,116 programs | 294 jobs | 47 CPUs | 294 tasks | 809.3m CPU rem | 16.9m rem | 15.2 avg lb
Enumerated 8,763,363 programs | 289 jobs | 47 CPUs | 289 tasks | 803.6m CPU rem | 16.7m rem | 15.2 avg lb
Enumerated 9,006,559 programs | 284 jobs | 47 CPUs | 284 tasks | 799.2m CPU rem | 16.7m rem | 15.3 avg lb
Enumerated 9,238,001 programs | 277 jobs | 47 CPUs | 277 tasks | 791.9m CPU rem | 16.5m rem | 15.3 avg lb
Enumerated 9,440,205 programs | 275 jobs | 47 CPUs | 275 tasks | 786.8m CPU rem | 16.4m rem | 15.3 avg lb
Enumerated 9,508,037 programs | 274 jobs | 47 CPUs | 274 tasks | 780.9m CPU rem | 16.3m rem | 15.4 avg lb
Enumerated 9,519,992 programs | 274 jobs | 47 CPUs | 274 tasks | 775.4m CPU rem | 16.2m rem | 15.4 avg lb
Enumerated 9,527,741 programs | 274 jobs | 47 CPUs | 274 tasks | 763.8m CPU rem | 15.9m rem | 15.4 avg lb
Enumerated 9,578,052 programs | 273 jobs | 47 CPUs | 273 tasks | 758.8m CPU rem | 15.8m rem | 15.4 avg lb
Enumerated 9,581,514 programs | 273 jobs | 47 CPUs | 273 tasks | 753.2m CPU rem | 15.7m rem | 15.4 avg lb
Enumerated 9,585,454 programs | 272 jobs | 47 CPUs | 272 tasks | 744.0m CPU rem | 15.5m rem | 15.4 avg lb
Enumerated 9,634,993 programs | 271 jobs | 47 CPUs | 271 tasks | 732.9m CPU rem | 15.3m rem | 15.4 avg lb
Enumerated 9,736,659 programs | 269 jobs | 47 CPUs | 269 tasks | 728.1m CPU rem | 15.2m rem | 15.5 avg lb
Enumerated 9,888,021 programs | 266 jobs | 47 CPUs | 266 tasks | 723.8m CPU rem | 15.1m rem | 15.5 avg lb
Enumerated 9,995,482 programs | 264 jobs | 47 CPUs | 264 tasks | 719.1m CPU rem | 15.0m rem | 15.5 avg lb
Enumerated 10,197,317 programs | 260 jobs | 47 CPUs | 260 tasks | 714.8m CPU rem | 14.9m rem | 15.6 avg lb
Enumerated 10,354,549 programs | 257 jobs | 47 CPUs | 257 tasks | 709.5m CPU rem | 14.8m rem | 15.6 avg lb
Enumerated 10,512,167 programs | 254 jobs | 47 CPUs | 254 tasks | 704.9m CPU rem | 14.7m rem | 15.6 avg lb
Enumerated 10,666,030 programs | 250 jobs | 47 CPUs | 250 tasks | 700.6m CPU rem | 14.6m rem | 15.7 avg lb
Enumerated 10,724,563 programs | 249 jobs | 47 CPUs | 249 tasks | 695.4m CPU rem | 14.5m rem | 15.7 avg lb
Enumerated 10,827,542 programs | 248 jobs | 47 CPUs | 248 tasks | 689.8m CPU rem | 14.4m rem | 15.7 avg lb
Enumerated 10,920,365 programs | 246 jobs | 47 CPUs | 246 tasks | 685.0m CPU rem | 14.3m rem | 15.8 avg lb
Enumerated 11,158,059 programs | 241 jobs | 47 CPUs | 241 tasks | 680.8m CPU rem | 14.2m rem | 15.8 avg lb
Enumerated 11,319,471 programs | 237 jobs | 47 CPUs | 237 tasks | 676.3m CPU rem | 14.1m rem | 15.9 avg lb
Enumerated 11,475,981 programs | 234 jobs | 47 CPUs | 234 tasks | 671.7m CPU rem | 14.0m rem | 15.9 avg lb
Enumerated 11,627,492 programs | 232 jobs | 47 CPUs | 232 tasks | 667.0m CPU rem | 13.9m rem | 15.9 avg lb
Enumerated 11,811,735 programs | 228 jobs | 47 CPUs | 228 tasks | 662.2m CPU rem | 13.8m rem | 16.0 avg lb
Enumerated 11,924,023 programs | 226 jobs | 47 CPUs | 226 tasks | 656.9m CPU rem | 13.7m rem | 16.1 avg lb
Enumerated 11,936,472 programs | 226 jobs | 47 CPUs | 226 tasks | 651.3m CPU rem | 13.6m rem | 16.1 avg lb
Enumerated 11,989,143 programs | 225 jobs | 47 CPUs | 225 tasks | 644.2m CPU rem | 13.4m rem | 16.1 avg lb
Enumerated 12,004,485 programs | 225 jobs | 47 CPUs | 225 tasks | 635.8m CPU rem | 13.2m rem | 16.2 avg lb
Enumerated 12,052,947 programs | 224 jobs | 47 CPUs | 224 tasks | 628.1m CPU rem | 13.1m rem | 16.2 avg lb
Enumerated 12,112,885 programs | 223 jobs | 47 CPUs | 223 tasks | 620.5m CPU rem | 12.9m rem | 16.2 avg lb
Enumerated 12,193,074 programs | 222 jobs | 47 CPUs | 222 tasks | 615.1m CPU rem | 12.8m rem | 16.2 avg lb
Enumerated 12,267,623 programs | 221 jobs | 47 CPUs | 221 tasks | 610.8m CPU rem | 12.7m rem | 16.3 avg lb
Enumerated 12,327,438 programs | 220 jobs | 47 CPUs | 220 tasks | 605.5m CPU rem | 12.6m rem | 16.4 avg lb
Enumerated 12,467,969 programs | 218 jobs | 47 CPUs | 218 tasks | 601.3m CPU rem | 12.5m rem | 16.4 avg lb
Enumerated 12,574,744 programs | 215 jobs | 47 CPUs | 215 tasks | 593.9m CPU rem | 12.4m rem | 16.5 avg lb
Enumerated 12,810,165 programs | 212 jobs | 47 CPUs | 212 tasks | 589.1m CPU rem | 12.3m rem | 16.6 avg lb
Enumerated 12,887,998 programs | 210 jobs | 47 CPUs | 210 tasks | 581.8m CPU rem | 12.1m rem | 16.7 avg lb
Enumerated 13,012,691 programs | 208 jobs | 47 CPUs | 208 tasks | 577.4m CPU rem | 12.0m rem | 16.7 avg lb
Enumerated 13,286,398 programs | 202 jobs | 47 CPUs | 202 tasks | 573.5m CPU rem | 11.9m rem | 16.9 avg lb
Enumerated 13,399,933 programs | 198 jobs | 47 CPUs | 198 tasks | 563.5m CPU rem | 11.7m rem | 16.9 avg lb
Enumerated 13,515,315 programs | 196 jobs | 47 CPUs | 196 tasks | 556.1m CPU rem | 11.6m rem | 17.0 avg lb
Enumerated 13,666,061 programs | 194 jobs | 47 CPUs | 194 tasks | 551.7m CPU rem | 11.5m rem | 17.2 avg lb
Enumerated 13,815,803 programs | 191 jobs | 47 CPUs | 191 tasks | 544.5m CPU rem | 11.3m rem | 17.3 avg lb
Enumerated 13,960,250 programs | 186 jobs | 47 CPUs | 186 tasks | 540.4m CPU rem | 11.3m rem | 17.4 avg lb
Enumerated 14,179,598 programs | 183 jobs | 47 CPUs | 183 tasks | 536.7m CPU rem | 11.2m rem | 17.6 avg lb
Enumerated 14,372,525 programs | 180 jobs | 47 CPUs | 180 tasks | 532.9m CPU rem | 11.1m rem | 17.7 avg lb
Enumerated 14,618,735 programs | 178 jobs | 47 CPUs | 178 tasks | 525.7m CPU rem | 11.0m rem | 17.9 avg lb
Enumerated 14,790,638 programs | 176 jobs | 47 CPUs | 176 tasks | 521.7m CPU rem | 10.9m rem | 18.0 avg lb
Enumerated 14,885,418 programs | 176 jobs | 47 CPUs | 176 tasks | 517.7m CPU rem | 10.8m rem | 18.1 avg lb
Enumerated 15,054,071 programs | 176 jobs | 47 CPUs | 176 tasks | 513.3m CPU rem | 10.7m rem | 18.3 avg lb
Enumerated 15,139,779 programs | 176 jobs | 47 CPUs | 176 tasks | 509.0m CPU rem | 10.6m rem | 18.4 avg lb
Enumerated 15,239,601 programs | 176 jobs | 47 CPUs | 176 tasks | 504.6m CPU rem | 10.5m rem | 18.5 avg lb
Enumerated 15,361,175 programs | 175 jobs | 47 CPUs | 175 tasks | 494.9m CPU rem | 10.3m rem | 18.5 avg lb
Enumerated 15,488,442 programs | 175 jobs | 47 CPUs | 175 tasks | 490.1m CPU rem | 10.2m rem | 18.6 avg lb
Enumerated 15,659,816 programs | 174 jobs | 47 CPUs | 174 tasks | 483.2m CPU rem | 10.1m rem | 18.7 avg lb
Enumerated 15,692,182 programs | 174 jobs | 47 CPUs | 174 tasks | 477.3m CPU rem | 9.9m rem | 18.7 avg lb
Enumerated 16,054,414 programs | 174 jobs | 47 CPUs | 174 tasks | 472.9m CPU rem | 9.9m rem | 18.9 avg lb
Enumerated 16,139,003 programs | 173 jobs | 47 CPUs | 173 tasks | 465.1m CPU rem | 9.7m rem | 18.9 avg lb
Enumerated 16,224,302 programs | 172 jobs | 47 CPUs | 172 tasks | 457.8m CPU rem | 9.5m rem | 19.0 avg lb
Enumerated 16,383,704 programs | 171 jobs | 47 CPUs | 171 tasks | 450.5m CPU rem | 9.4m rem | 19.1 avg lb
Enumerated 16,559,189 programs | 171 jobs | 47 CPUs | 171 tasks | 445.3m CPU rem | 9.3m rem | 19.2 avg lb
Enumerated 16,744,445 programs | 171 jobs | 47 CPUs | 171 tasks | 440.0m CPU rem | 9.2m rem | 19.3 avg lb
Enumerated 16,849,947 programs | 170 jobs | 47 CPUs | 170 tasks | 435.4m CPU rem | 9.1m rem | 19.4 avg lb
Enumerated 16,974,064 programs | 170 jobs | 47 CPUs | 170 tasks | 431.2m CPU rem | 9.0m rem | 19.4 avg lb
Enumerated 17,008,448 programs | 170 jobs | 47 CPUs | 170 tasks | 427.0m CPU rem | 8.9m rem | 19.5 avg lb
Enumerated 17,056,795 programs | 169 jobs | 47 CPUs | 169 tasks | 422.6m CPU rem | 8.8m rem | 19.5 avg lb
Enumerated 17,254,556 programs | 167 jobs | 47 CPUs | 167 tasks | 418.1m CPU rem | 8.7m rem | 19.6 avg lb
Enumerated 17,396,672 programs | 165 jobs | 47 CPUs | 165 tasks | 413.9m CPU rem | 8.6m rem | 19.7 avg lb
Enumerated 17,576,759 programs | 163 jobs | 47 CPUs | 163 tasks | 408.4m CPU rem | 8.5m rem | 19.7 avg lb
Enumerated 17,712,164 programs | 161 jobs | 47 CPUs | 161 tasks | 403.3m CPU rem | 8.4m rem | 19.8 avg lb
Enumerated 17,933,862 programs | 160 jobs | 47 CPUs | 160 tasks | 398.7m CPU rem | 8.3m rem | 19.9 avg lb
Enumerated 18,047,041 programs | 159 jobs | 47 CPUs | 159 tasks | 394.4m CPU rem | 8.2m rem | 19.9 avg lb
Enumerated 18,089,007 programs | 158 jobs | 47 CPUs | 158 tasks | 385.8m CPU rem | 8.0m rem | 20.0 avg lb
Enumerated 18,340,222 programs | 156 jobs | 47 CPUs | 156 tasks | 381.5m CPU rem | 7.9m rem | 20.1 avg lb
Enumerated 18,468,814 programs | 156 jobs | 47 CPUs | 156 tasks | 377.3m CPU rem | 7.9m rem | 20.2 avg lb
Enumerated 18,574,362 programs | 155 jobs | 47 CPUs | 155 tasks | 372.9m CPU rem | 7.8m rem | 20.2 avg lb
Enumerated 18,900,802 programs | 149 jobs | 47 CPUs | 149 tasks | 367.6m CPU rem | 7.7m rem | 20.3 avg lb
Enumerated 19,116,285 programs | 149 jobs | 47 CPUs | 149 tasks | 363.5m CPU rem | 7.6m rem | 20.5 avg lb
Enumerated 19,295,819 programs | 148 jobs | 47 CPUs | 148 tasks | 359.1m CPU rem | 7.5m rem | 20.6 avg lb
Enumerated 19,353,771 programs | 147 jobs | 47 CPUs | 147 tasks | 354.4m CPU rem | 7.4m rem | 20.6 avg lb
Enumerated 19,528,871 programs | 145 jobs | 47 CPUs | 145 tasks | 347.9m CPU rem | 7.2m rem | 20.6 avg lb
Enumerated 19,644,133 programs | 145 jobs | 47 CPUs | 145 tasks | 340.6m CPU rem | 7.1m rem | 20.7 avg lb
Enumerated 19,664,361 programs | 145 jobs | 47 CPUs | 145 tasks | 334.6m CPU rem | 7.0m rem | 20.7 avg lb
Enumerated 19,890,658 programs | 142 jobs | 47 CPUs | 142 tasks | 328.0m CPU rem | 6.8m rem | 20.8 avg lb
Enumerated 20,051,270 programs | 141 jobs | 47 CPUs | 141 tasks | 322.6m CPU rem | 6.7m rem | 20.9 avg lb
Enumerated 20,057,726 programs | 140 jobs | 47 CPUs | 140 tasks | 318.2m CPU rem | 6.6m rem | 20.9 avg lb
Enumerated 20,399,903 programs | 136 jobs | 47 CPUs | 136 tasks | 310.5m CPU rem | 6.5m rem | 21.0 avg lb
Enumerated 20,504,463 programs | 136 jobs | 47 CPUs | 136 tasks | 306.2m CPU rem | 6.4m rem | 21.0 avg lb
Enumerated 20,762,003 programs | 133 jobs | 47 CPUs | 133 tasks | 300.8m CPU rem | 6.3m rem | 21.1 avg lb
Enumerated 20,811,388 programs | 133 jobs | 47 CPUs | 133 tasks | 288.8m CPU rem | 6.0m rem | 21.1 avg lb
Enumerated 21,021,885 programs | 132 jobs | 47 CPUs | 132 tasks | 284.3m CPU rem | 5.9m rem | 21.2 avg lb
Enumerated 21,191,519 programs | 131 jobs | 47 CPUs | 131 tasks | 276.8m CPU rem | 5.8m rem | 21.2 avg lb
Enumerated 21,265,706 programs | 130 jobs | 47 CPUs | 130 tasks | 272.0m CPU rem | 5.7m rem | 21.3 avg lb
Enumerated 21,425,536 programs | 130 jobs | 47 CPUs | 130 tasks | 267.3m CPU rem | 5.6m rem | 21.3 avg lb
Enumerated 21,954,532 programs | 126 jobs | 47 CPUs | 126 tasks | 262.3m CPU rem | 5.5m rem | 21.5 avg lb
Enumerated 22,418,535 programs | 122 jobs | 47 CPUs | 122 tasks | 257.7m CPU rem | 5.4m rem | 21.5 avg lb
Enumerated 22,579,749 programs | 120 jobs | 47 CPUs | 120 tasks | 253.5m CPU rem | 5.3m rem | 21.6 avg lb
Enumerated 22,820,607 programs | 118 jobs | 47 CPUs | 118 tasks | 248.6m CPU rem | 5.2m rem | 21.7 avg lb
Enumerated 22,916,403 programs | 117 jobs | 47 CPUs | 117 tasks | 242.9m CPU rem | 5.1m rem | 21.8 avg lb
Enumerated 23,140,418 programs | 116 jobs | 47 CPUs | 116 tasks | 235.0m CPU rem | 4.9m rem | 21.8 avg lb
Enumerated 23,150,397 programs | 116 jobs | 47 CPUs | 116 tasks | 227.4m CPU rem | 4.7m rem | 21.8 avg lb
Enumerated 23,402,114 programs | 113 jobs | 47 CPUs | 113 tasks | 221.8m CPU rem | 4.6m rem | 21.9 avg lb
Enumerated 23,489,778 programs | 112 jobs | 47 CPUs | 112 tasks | 215.4m CPU rem | 4.5m rem | 21.9 avg lb
Enumerated 23,770,251 programs | 109 jobs | 47 CPUs | 109 tasks | 210.6m CPU rem | 4.4m rem | 22.0 avg lb
Enumerated 23,979,260 programs | 107 jobs | 47 CPUs | 107 tasks | 203.3m CPU rem | 4.2m rem | 22.1 avg lb
Enumerated 24,191,436 programs | 106 jobs | 47 CPUs | 106 tasks | 198.0m CPU rem | 4.1m rem | 22.2 avg lb
Enumerated 24,294,856 programs | 105 jobs | 47 CPUs | 105 tasks | 193.7m CPU rem | 4.0m rem | 22.2 avg lb
Enumerated 24,434,735 programs | 101 jobs | 47 CPUs | 101 tasks | 187.3m CPU rem | 3.9m rem | 22.3 avg lb
Enumerated 24,632,235 programs | 100 jobs | 47 CPUs | 100 tasks | 183.0m CPU rem | 3.8m rem | 22.3 avg lb
Enumerated 24,667,586 programs | 100 jobs | 47 CPUs | 100 tasks | 178.2m CPU rem | 3.7m rem | 22.4 avg lb
Enumerated 24,850,822 programs | 97 jobs | 47 CPUs | 97 tasks | 174.0m CPU rem | 3.6m rem | 22.5 avg lb
Enumerated 25,142,841 programs | 97 jobs | 47 CPUs | 97 tasks | 169.3m CPU rem | 3.5m rem | 22.6 avg lb
Enumerated 25,404,955 programs | 95 jobs | 47 CPUs | 95 tasks | 163.6m CPU rem | 3.4m rem | 22.7 avg lb
Enumerated 25,429,557 programs | 92 jobs | 47 CPUs | 92 tasks | 157.8m CPU rem | 3.3m rem | 22.8 avg lb
Enumerated 25,560,675 programs | 92 jobs | 47 CPUs | 92 tasks | 153.6m CPU rem | 3.2m rem | 22.8 avg lb
Enumerated 26,022,685 programs | 87 jobs | 47 CPUs | 87 tasks | 149.5m CPU rem | 3.1m rem | 23.0 avg lb
Enumerated 26,138,993 programs | 83 jobs | 47 CPUs | 83 tasks | 143.6m CPU rem | 3.0m rem | 23.1 avg lb
Enumerated 26,562,939 programs | 81 jobs | 47 CPUs | 81 tasks | 139.3m CPU rem | 2.9m rem | 23.3 avg lb
Enumerated 27,004,091 programs | 75 jobs | 47 CPUs | 75 tasks | 134.2m CPU rem | 2.8m rem | 23.7 avg lb
Enumerated 27,165,899 programs | 73 jobs | 47 CPUs | 73 tasks | 128.4m CPU rem | 2.7m rem | 23.8 avg lb
Enumerated 27,287,847 programs | 72 jobs | 47 CPUs | 72 tasks | 124.2m CPU rem | 2.6m rem | 23.8 avg lb
Enumerated 27,552,435 programs | 68 jobs | 47 CPUs | 68 tasks | 119.9m CPU rem | 2.5m rem | 24.1 avg lb
Enumerated 27,634,588 programs | 67 jobs | 47 CPUs | 67 tasks | 113.6m CPU rem | 2.4m rem | 24.2 avg lb
Enumerated 27,848,855 programs | 64 jobs | 47 CPUs | 64 tasks | 107.4m CPU rem | 2.2m rem | 24.4 avg lb
Enumerated 28,091,899 programs | 61 jobs | 47 CPUs | 61 tasks | 103.2m CPU rem | 2.1m rem | 24.7 avg lb
Enumerated 28,151,461 programs | 60 jobs | 47 CPUs | 60 tasks | 98.6m CPU rem | 2.1m rem | 24.8 avg lb
Enumerated 28,382,212 programs | 56 jobs | 47 CPUs | 56 tasks | 89.9m CPU rem | 1.9m rem | 25.2 avg lb
Enumerated 28,670,809 programs | 54 jobs | 47 CPUs | 54 tasks | 84.6m CPU rem | 1.8m rem | 25.5 avg lb
Enumerated 28,814,487 programs | 52 jobs | 47 CPUs | 52 tasks | 80.2m CPU rem | 1.7m rem | 25.8 avg lb
Enumerated 28,897,584 programs | 51 jobs | 47 CPUs | 51 tasks | 75.8m CPU rem | 1.6m rem | 26.0 avg lb
Enumerated 29,118,324 programs | 50 jobs | 47 CPUs | 50 tasks | 70.8m CPU rem | 1.5m rem | 26.4 avg lb
Enumerated 29,234,046 programs | 47 jobs | 46 CPUs | 47 tasks | 66.5m CPU rem | 1.4m rem | 26.6 avg lb
Enumerated 29,375,501 programs | 46 jobs | 47 CPUs | 46 tasks | 62.2m CPU rem | 1.3m rem | 26.8 avg lb
Enumerated 29,450,169 programs | 46 jobs | 45 CPUs | 46 tasks | 58.4m CPU rem | 1.2m rem | 26.9 avg lb
Enumerated 29,663,017 programs | 44 jobs | 46 CPUs | 44 tasks | 53.6m CPU rem | 1.2m rem | 27.1 avg lb
Enumerated 29,875,482 programs | 43 jobs | 45 CPUs | 43 tasks | 45.9m CPU rem | 1.0m rem | 27.5 avg lb
Enumerated 30,132,239 programs | 40 jobs | 44 CPUs | 40 tasks | 42.1m CPU rem | 1.0m rem | 27.8 avg lb
Enumerated 30,458,028 programs | 37 jobs | 46 CPUs | 37 tasks | 38.5m CPU rem | 1.0m rem | 28.1 avg lb
Enumerated 30,701,260 programs | 35 jobs | 46 CPUs | 35 tasks | 35.5m CPU rem | 1.0m rem | 28.3 avg lb
Enumerated 31,028,856 programs | 30 jobs | 42 CPUs | 30 tasks | 30.3m CPU rem | 1.0m rem | 28.9 avg lb
Enumerated 31,260,342 programs | 28 jobs | 44 CPUs | 28 tasks | 27.0m CPU rem | 0.9m rem | 29.2 avg lb
Enumerated 31,446,667 programs | 26 jobs | 45 CPUs | 26 tasks | 24.5m CPU rem | 0.9m rem | 29.5 avg lb
Enumerated 31,676,589 programs | 24 jobs | 40 CPUs | 24 tasks | 20.8m CPU rem | 0.8m rem | 30.0 avg lb
Enumerated 31,815,252 programs | 22 jobs | 38 CPUs | 22 tasks | 18.2m CPU rem | 0.8m rem | 30.3 avg lb
Enumerated 32,044,499 programs | 19 jobs | 47 CPUs | 19 tasks | 15.8m CPU rem | 0.8m rem | 31.1 avg lb
Enumerated 32,314,499 programs | 19 jobs | 44 CPUs | 19 tasks | 13.6m CPU rem | 0.7m rem | 31.2 avg lb
Enumerated 32,491,034 programs | 17 jobs | 47 CPUs | 17 tasks | 10.9m CPU rem | 0.6m rem | 31.6 avg lb
Enumerated 32,576,748 programs | 17 jobs | 46 CPUs | 17 tasks | 8.7m CPU rem | 0.5m rem | 31.6 avg lb
Enumerated 32,766,144 programs | 15 jobs | 46 CPUs | 15 tasks | 6.9m CPU rem | 0.4m rem | 32.3 avg lb
Enumerated 33,099,955 programs | 13 jobs | 44 CPUs | 13 tasks | 5.3m CPU rem | 0.4m rem | 33.2 avg lb
Enumerated 33,331,817 programs | 13 jobs | 46 CPUs | 13 tasks | 3.1m CPU rem | 0.2m rem | 33.4 avg lb
Enumerated 33,487,920 programs | 9 jobs | 39 CPUs | 9 tasks | 2.2m CPU rem | 0.2m rem | 34.7 avg lb
Enumerated 33,864,460 programs | 6 jobs | 43 CPUs | 6 tasks | 1.5m CPU rem | 0.2m rem | 36.0 avg lb
Enumerated 33,871,208 programs | 5 jobs | 29 CPUs | 5 tasks | 1.1m CPU rem | 0.2m rem | 36.8 avg lb
Enumerated 34,019,984 programs | 3 jobs | 9 CPUs | 3 tasks | 0.2m CPU rem | 0.1m rem | 36.7 avg lb
Enumerated 34,173,743 programs | 1 jobs | 0 CPUs | 1 tasks | 0.0m CPU rem | 0.0m rem | 22.0 avg lb
We enumerated this many programs, for each task:
	 [139600, 4646, 129623, 84841, 106274, 129772, 124835, 85648, 77954, 119987, 118078, 119987, 86940, 4707, 123578, 122214, 92841, 82236, 86754, 114516, 4839, 120926, 80719, 85518, 78374, 127298, 112865, 120440, 70125, 79892, 4776, 82728, 110383, 120108, 115935, 4847, 111002, 128560, 113887, 111196, 1475, 110166, 108758, 103786, 1382, 78881, 111670, 73004, 4794, 79438, 75403, 119478, 139053, 79530, 74233, 279458, 9312, 79450, 104309, 112657, 94437, 116143, 73531, 72426, 76108, 67057, 75862, 109774, 114696, 96117, 108375, 153061, 111428, 74753, 106981, 71454, 68556, 107234, 10791, 67503, 113797, 76929, 9235, 74942, 73612, 74789, 1386, 77190, 107776, 68768, 75432, 70152, 104077, 112249, 5263, 68729, 69227, 70131, 105680, 130277, 73997, 112162, 264363, 123293, 73664, 71242, 71416, 111670, 72405, 84273, 117164, 69156, 4677, 76674, 67336, 125818, 70341, 67443, 113896, 73715, 118940, 74316, 119510, 73002, 105327, 75154, 77490, 108443, 10132, 119662, 74857, 74367, 72701, 69126, 122372, 111064, 70412, 68237, 120681, 2439, 73586, 9478, 108051, 151114, 72013, 122867, 76046, 75526, 112582, 4642, 74206, 4775, 119754, 103977, 4653, 109570, 113653, 66698, 70226, 110255, 68366, 90886, 114682, 3368, 100192, 72047, 165139, 119672, 108003, 70530, 80172, 4995, 72212, 4769, 93736, 73667, 4736, 5060, 1336, 148137, 114211, 101126, 71345, 64347, 62544, 157717, 66516, 77296, 119848, 109850, 98887, 68297, 71901, 114173, 72168, 68981, 74532, 59240, 75824, 113084, 73900, 66934, 67918, 68275, 60553, 69130, 130361, 94608, 72146, 8198, 131668, 123231, 69958, 114641, 67641, 68605, 113640, 4836, 113096, 68136, 62965, 110835, 128874, 69435, 114547, 112517, 121201, 113132, 131706, 69852, 73539, 74583, 67756, 70489, 137269, 152940, 75798, 68462, 70738, 111802, 4653, 112445, 68267, 70478, 70431, 68512, 75416, 75717, 4584, 129930, 4682, 70951, 118584, 129529, 88664, 73352, 175626, 70217, 67978, 113805, 71977, 136961, 4804, 67844, 97769, 134132, 20385, 68847, 62285, 107000, 114431, 73821, 113020, 72705, 66639, 20789, 117298, 71130, 68630, 73370, 67934, 120478, 119519, 72708, 62303, 66148, 117299, 72395, 64575, 70388, 4698, 68493, 68351, 121348, 77784, 164882, 73577, 70214, 130677, 4839, 67879, 117323, 67672, 129720, 111105, 67390, 68724, 70556, 4658, 58730, 6422, 121296, 68504, 116340, 131844, 122910, 5234, 155719, 67483, 73687, 153928, 118090, 124062, 68211, 73559, 66609, 124074, 72929, 74153, 116704, 127099, 73727, 121917, 187067, 70637, 117230, 72119, 20693, 67026, 68953, 122793, 113029, 113611, 73209, 123057, 4694, 170915, 73494, 73540, 72910, 100363, 73926, 73990, 111908, 26109, 120798, 76563, 70625, 67152, 111942, 114678, 131104, 107380, 69103, 73455, 61526, 67808, 121668, 115971, 68142, 75962, 121439, 132325, 135018, 74792, 73119, 4807, 76720, 75485, 4879, 119120, 74250, 67270, 70009, 1924, 158881, 71094, 76219, 69408, 106013, 72619, 118962, 139789, 69470, 172037, 72056, 117604, 77792, 78586, 94650]
Recognizer 0 solved 54/400 tasks; total tasks solved is now 54.
Best recognizer: 0.
Currently using this much memory: 1270980608
Recognition model enumeration results for the best recognizer.
HIT 00d62c1b w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)) ; log prior = -5.750115 ; log likelihood = 0.000000
HIT 0b148d64 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -6.254436 ; log likelihood = 0.000000
HIT 1190e5a7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0)) ; log prior = -6.269379 ; log likelihood = 0.000000
HIT 1cf80156 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) $0)) ; log prior = -6.007114 ; log likelihood = 0.000000
HIT 1f85a75f w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -6.063959 ; log likelihood = 0.000000
HIT 22168020 w/ (lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)) ; log prior = -7.818085 ; log likelihood = 0.000000
HIT 22eb0ac0 w/ (lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)) ; log prior = -7.872857 ; log likelihood = 0.000000
HIT 23b5c85d w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)) ; log prior = -5.911485 ; log likelihood = 0.000000
HIT 28bf18c6 w/ (lambda (repeatX (#(lambda (ic_composegrowing (split8 $0))) $0))) ; log prior = -18.628937 ; log likelihood = 0.000000
HIT 39a8645d w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) $0)) ; log prior = -10.420392 ; log likelihood = 0.000000
HIT 3af2c5a8 w/ (lambda (#(lambda (mirrorY (mirrorX $0))) $0)) ; log prior = -8.965890 ; log likelihood = 0.000000
HIT 3c9b0459 w/ (lambda (rot180 $0)) ; log prior = -8.903616 ; log likelihood = 0.000000
HIT 4258a5f9 w/ (lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0)) ; log prior = -7.656048 ; log likelihood = 0.000000
HIT 445eab21 w/ (lambda (countToXY (countColours $0) (topcol $0))) ; log prior = -12.880695 ; log likelihood = 0.000000
HIT 496994bd w/ (lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)) ; log prior = -5.700476 ; log likelihood = 0.000000
HIT 4c4377d9 w/ (lambda (mirrorY (flipx $0))) ; log prior = -19.748903 ; log likelihood = 0.000000
HIT 5582e5ca w/ (lambda (#(lambda (colourHull (topcol $0))) $0 $0)) ; log prior = -9.581097 ; log likelihood = 0.000000
HIT 6150a2bd w/ (lambda (rot180 $0)) ; log prior = -6.438464 ; log likelihood = 0.000000
HIT 62c24649 w/ (lambda (#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)) ; log prior = -8.574484 ; log likelihood = 0.000000
HIT 67a3c6ac w/ (lambda (flipy $0)) ; log prior = -5.889873 ; log likelihood = 0.000000
HIT 67e8384a w/ (lambda (#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)) ; log prior = -10.578543 ; log likelihood = 0.000000
HIT 68b16354 w/ (lambda (flipx $0)) ; log prior = -5.691646 ; log likelihood = 0.000000
HIT 6d0aefbc w/ (lambda (mirrorX $0)) ; log prior = -10.444981 ; log likelihood = 0.000000
HIT 6fa7a44f w/ (lambda (mirrorY $0)) ; log prior = -10.712151 ; log likelihood = 0.000000
HIT 72ca375d w/ (lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)) ; log prior = -6.436463 ; log likelihood = 0.000000
HIT 7468f01a w/ (lambda (#(lambda (ic_compress2 (flipy $0))) $0)) ; log prior = -5.939287 ; log likelihood = 0.000000
HIT 746b3537 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)) ; log prior = -5.641556 ; log likelihood = 0.000000
HIT 74dd1130 w/ (lambda (swapxy $0)) ; log prior = -8.275910 ; log likelihood = 0.000000
HIT 7b6016b9 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(fillobj c2) $0) c3)) ; log prior = -13.042360 ; log likelihood = 0.000000
HIT 8be77c9e w/ (lambda (mirrorY $0)) ; log prior = -8.893286 ; log likelihood = 0.000000
HIT 90c28cc7 w/ (lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)) ; log prior = -5.639831 ; log likelihood = 0.000000
HIT 9565186b w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0))) ; log prior = -19.622160 ; log likelihood = 0.000000
HIT 9dfd6313 w/ (lambda (swapxy $0)) ; log prior = -5.558382 ; log likelihood = 0.000000
HIT a416b8f3 w/ (lambda (repeatX $0)) ; log prior = -6.147197 ; log likelihood = 0.000000
HIT a5313dff w/ (lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0)) ; log prior = -5.531573 ; log likelihood = 0.000000
HIT a740d043 w/ (lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) ; log prior = -10.891837 ; log likelihood = 0.000000
HIT a87f7484 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)) ; log prior = -6.041240 ; log likelihood = 0.000000
HIT aabf363d w/ (lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))) ; log prior = -10.398666 ; log likelihood = 0.000000
HIT b1948b0a w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)) ; log prior = -8.115382 ; log likelihood = 0.000000
HIT b9b7f026 w/ (lambda (#(lambda (colourPixel (topcol $0))) (ic_connectY $0))) ; log prior = -10.255506 ; log likelihood = 0.000000
HIT be94b721 w/ (lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0)) ; log prior = -6.011416 ; log likelihood = 0.000000
HIT c8f0f002 w/ (lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)) ; log prior = -5.587149 ; log likelihood = 0.000000
HIT c9e6f938 w/ (lambda (mirrorX $0)) ; log prior = -8.727470 ; log likelihood = 0.000000
HIT ce22a75a w/ (lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1)) ; log prior = -8.752732 ; log likelihood = 0.000000
HIT d037b0a7 w/ (lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))) ; log prior = -18.010537 ; log likelihood = 0.000000
HIT d5d6de2d w/ (lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2)) ; log prior = -8.290981 ; log likelihood = 0.000000
HIT d631b094 w/ (lambda (countToY (countPixels $0) (rarestcol $0))) ; log prior = -12.124990 ; log likelihood = 0.000000
HIT d9fac9be w/ (lambda (#(lambda (pickcommon (split8 $0))) $0)) ; log prior = -5.332647 ; log likelihood = 0.000000
HIT de1cd16c w/ (lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0))) ; log prior = -9.259113 ; log likelihood = 0.000000
HIT ded97339 w/ (lambda (ic_composegrowing (#(lambda (lambda (mklist $0 ($1 ic_connectY)))) (lambda ($0 $1)) (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)))) ; log prior = -20.288795 ; log likelihood = 0.000000
HIT e3497940 w/ (lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0))) ; log prior = -16.166503 ; log likelihood = 0.000000
HIT eb5a1d5d w/ (lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)) ; log prior = -5.468265 ; log likelihood = 0.000000
HIT ed36ccf7 w/ (lambda (rot90 $0)) ; log prior = -9.422373 ; log likelihood = 0.000000
HIT f25ffba3 w/ (lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0)) ; log prior = -6.855660 ; log likelihood = 0.000000
Hits 54/400 tasks
Average description length of a program solving a task: 9.064683 nats
Recognition model average:  11 sec.	median: 0 	max: 163 	standard deviation 29
Cumulative results for the full ensemble of 1 recognizers: 
Frontiers discovered bottom up: 54
Total frontiers: 57
Average search time:  11 sec.	median: 0 	max: 163 	standard deviation 29
54 / 400 total hit tasks
              bottom miss  bottom hit  
top miss          346           5      
top hit            0           49      
Currently using this much memory: 1270718464
Showing the top 5 programs in each frontier being sent to the compressor:
00d62c1b
-0.13	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))
-2.78	(lambda (fillobj c4 $0))
-4.72	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.76	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.76	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))

0b148d64
-1.39	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.39	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-1.40	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-1.42	(lambda (#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))) $0))
-5.99	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))

1190e5a7
-0.73	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-0.74	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-5.33	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-5.33	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.33	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))

1cf80156
-2.27	(lambda (#(lambda (ic_composegrowing (split8 $0))) $0))
-2.29	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-2.30	(lambda (ic_compress2 $0))
-2.30	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-2.31	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))

1f85a75f
-1.46	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.46	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-1.47	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))) $0))
-1.48	(lambda (#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))) $0))
-4.33	(lambda (ic_pickunique (ic_splitall $0)))

2013d3e2
-1.37	(lambda (left_half (top_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.37	(lambda (top_half (left_half (#(lambda (ic_composegrowing (split8 $0))) $0))))
-1.40	(lambda (left_half (top_half (ic_compress2 $0))))
-1.40	(lambda (top_half (left_half (ic_compress2 $0))))

22168020
-1.11	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-1.11	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-1.15	(lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0))
-5.75	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)))
-5.75	(lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

22eb0ac0
-1.11	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-1.11	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-1.15	(lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0))
-5.75	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) $0)))
-5.75	(lambda (#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

23b5c85d
-0.72	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))
-0.74	(lambda (#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0))) $0))
-5.32	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-5.32	(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.32	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))

28bf18c6
-2.28	(lambda (repeatX (#(lambda (ic_composegrowing (split8 $0))) $0)))
-2.30	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (repeatX $0)))
-2.30	(lambda (repeatX (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-2.30	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (repeatX $0)))
-2.30	(lambda (repeatX (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))

2dee498d
-2.17	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (rot90 $0))))
-2.18	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_embed $0 (swapxy $0))))
-2.19	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (rot90 $0))))
-2.20	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_embed $0 (swapxy $0))))
-2.20	(lambda (ic_compress2 (ic_embed $0 (rot90 $0))))

39a8645d
-1.14	(lambda (#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) $0))
-1.14	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) $0))
-3.99	(lambda (pickcommon (split8 $0)))
-5.72	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))

3af2c5a8
-0.73	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-0.73	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-5.35	(lambda (mirrorX (mirrorY $0)))
-5.35	(lambda (mirrorY (mirrorX $0)))
-5.35	(lambda (#(lambda (flipx (mirrorY $0))) (mirrorX $0)))

3c9b0459
-1.12	(lambda (rot180 $0))
-1.12	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-5.72	(lambda (#(lambda (ic_composegrowing (split8 $0))) (rot180 $0)))
-5.72	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

40853293
-0.70	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.70	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-5.37	(lambda (ic_toorigin (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-5.37	(lambda (ic_toorigin (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-12.50	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))

4258a5f9
-0.14	(lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0))
-2.74	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c5))
-4.73	(lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.77	(lambda (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.77	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0)))

445eab21
-1.18	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-1.18	(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-1.21	(lambda (#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) (#(lambda (colourPixel (topcol $0))) $0)))
-3.45	(lambda (countToXY (countColours $0) (topcol $0)))
-3.81	(lambda (#(lambda (mirrorY (mirrorX $0))) (colourPixel (topcol $0))))

496994bd
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.70	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (overlay $0 (flipx $0))) $0)))
-5.70	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))

4c4377d9
-2.18	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-2.18	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)))
-2.19	(lambda (mirrorY (#(lambda (overlay $0 (flipx $0))) $0)))
-2.19	(lambda (#(lambda (flipx (mirrorY $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-2.20	(lambda (mirrorY (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)))

5582e5ca
-0.14	(lambda (#(lambda (colourHull (topcol $0))) $0 $0))
-2.74	(lambda (colourHull (topcol $0) $0))
-4.75	(lambda (#(lambda (colourHull (topcol $0))) $0 (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.75	(lambda (#(lambda (colourHull (topcol $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0) $0))
-4.75	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (colourHull (topcol $0))) $0 $0)))

6150a2bd
-1.12	(lambda (rot180 $0))
-1.12	(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-5.72	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (rot180 $0)))
-5.72	(lambda (rot180 (#(lambda (overlay (ic_connectY $0) $0)) $0)))

62c24649
-1.11	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-1.11	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.71	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

67a3c6ac
-1.40	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.40	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-1.40	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.41	(lambda (flipy $0))
-6.00	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

67e8384a
-1.11	(lambda (#(lambda (mirrorY (mirrorX $0))) $0))
-1.11	(lambda (#(lambda (mirrorX (mirrorY $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.71	(lambda (#(lambda (mirrorY (mirrorX $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

68b16354
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (flipx $0))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-5.71	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

6d0aefbc
-0.09	(lambda (mirrorX $0))
-4.69	(lambda (#(lambda (ic_composegrowing (split8 $0))) (mirrorX $0)))
-4.69	(lambda (mirrorX (#(lambda (ic_composegrowing (split8 $0))) $0)))
-4.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorX $0)))
-4.69	(lambda (mirrorX (#(lambda (overlay (ic_connectY $0) $0)) $0)))

6fa7a44f
-1.11	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))
-1.13	(lambda (mirrorY $0))
-1.13	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.71	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))

72ca375d
-0.73	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-0.74	(lambda (#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) $0))
-5.32	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0)))
-5.32	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-5.33	(lambda (#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))

7468f01a
-1.12	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.12	(lambda (#(lambda (ic_compress2 (flipy $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-5.72	(lambda (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))
-5.72	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0)))

746b3537
-1.64	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.65	(lambda (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0))
-1.66	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.66	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.67	(lambda (ic_compress3 $0))

74dd1130
-1.12	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.12	(lambda (swapxy $0))
-1.13	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))
-5.72	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-5.72	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

7b6016b9
-0.72	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(fillobj c2) $0) c3))
-0.75	(lambda (set_bg c3 (#(fillobj c2) $0)))
-3.26	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (fillobj c2 $0) c3))
-7.96	(lambda (set_bg c3 (ic_erasecol c3 (#(fillobj c2) $0))))
-7.99	(lambda (set_bg c3 (ic_erasecol c9 (#(fillobj c2) $0))))

8be77c9e
-0.73	(lambda (mirrorY $0))
-0.73	(lambda (#(lambda (flipx (mirrorY $0))) $0))
-5.32	(lambda (left_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-5.32	(lambda (left_half (#(lambda (mirrorX (mirrorY $0))) $0)))
-5.33	(lambda (mirrorY (#(lambda (overlay (ic_connectY $0) $0)) $0)))

90c28cc7
-1.14	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.17	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.17	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-3.77	(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c6))
-3.77	(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c9))

9565186b
-0.16	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-2.75	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5))
-2.78	(lambda (set_bg c5 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-5.37	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c5 c5))
-5.37	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) (#(lambda (ic_filtercol (topcol $0) $0)) $0) c6 c5))

9dfd6313
-1.12	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.12	(lambda (swapxy $0))
-1.13	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0))
-5.72	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-5.72	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

a416b8f3
-0.08	(lambda (repeatX $0))
-4.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (repeatX $0)))
-4.69	(lambda (repeatX (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (repeatX $0)))
-4.69	(lambda (repeatX (#(lambda (overlay $0 (ic_connectY $0))) $0)))

a5313dff
-0.13	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) $0))
-2.71	(lambda (fillobj c1 $0))
-4.76	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))
-4.76	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-4.77	(lambda (#(fillobj c2) (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))

a740d043
-0.26	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-2.86	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c1)))
-2.89	(lambda (#(lambda (ic_composegrowing (split8 $0))) (ic_erasecol c1 $0)))
-3.15	(lambda (ic_composegrowing (ic_splitall (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))))
-3.16	(lambda (ic_composegrowing (split8 (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))))

a87f7484
-1.12	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-1.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))) $0))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-5.72	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))

aabf363d
-0.59	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0)))
-2.16	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (rarestcol $0)))
-2.16	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-2.16	(lambda (#(lambda (lambda (ic_connectX (get_bg $0 $1)))) $0 (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)))
-3.19	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) (#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0))) $0) c1))

b1948b0a
-0.14	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2))
-2.77	(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6 c2))
-4.73	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) $0 c2)))
-4.73	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0) c2))
-4.74	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6)) (#(lambda (overlay (ic_connectY $0) $0)) $0) c2))

b9b7f026
-2.28	(lambda (#(lambda (colourPixel (topcol $0))) (ic_connectX $0)))
-2.28	(lambda (#(lambda (colourPixel (topcol $0))) (ic_connectY $0)))
-2.30	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectX $0)))
-2.30	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (ic_connectY $0)))
-2.30	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) (ic_connectX $0)))

be94b721
-1.12	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))
-1.12	(lambda (#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0))) $0))
-1.13	(lambda (#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0))) $0))
-5.71	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-5.71	(lambda (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))

c8f0f002
-0.09	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0))
-4.69	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (ic_composegrowing (split8 $0))) $0)))
-4.69	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))
-4.69	(lambda (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-4.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5)) $0)))

c9e6f938
-0.09	(lambda (mirrorX $0))
-4.67	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (mirrorX $0)))
-4.67	(lambda (mirrorX (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.70	(lambda (top_half (#(lambda (mirrorY (mirrorX $0))) $0)))
-4.70	(lambda (top_half (#(lambda (mirrorX (mirrorY $0))) $0)))

ce22a75a
-0.36	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 c1))
-2.43	(lambda (#(lambda (overlay (ic_connectY $0) $0)) (ic_makeborder $0)))
-2.43	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (ic_makeborder $0)))
-2.46	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (ic_makeborder $0)))
-4.95	(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0) c1))

d037b0a7
-0.06	(lambda (top_half (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0)))
-3.64	(lambda (ic_embed (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0) $0))
-4.67	(lambda (top_half (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (flipx (mirrorY $0))) $0))))
-4.68	(lambda (top_half (#(lambda (overlay $0 (ic_connectY $0))) (mirrorY $0))))
-4.70	(lambda (top_half (flipx (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0))) $0))))

d5d6de2d
-0.20	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 c2))
-2.78	(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3 c2))
-3.80	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (topcol $0)))
-3.80	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (rarestcol $0)))
-3.80	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3)) $0 (#(lambda (rarestcol (rot180 $0))) $0)))

d631b094
-1.40	(lambda (countToY (countPixels $0) (topcol $0)))
-1.40	(lambda (countToY (countPixels $0) (rarestcol $0)))
-1.40	(lambda (countToY (countPixels $0) (#(lambda (rarestcol (rot180 $0))) $0)))
-1.40	(lambda (countToY (countPixels $0) (#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0)))
-6.00	(lambda (#(lambda (overlay $0 (ic_connectY $0))) (countToY (countPixels $0) (topcol $0))))

d9fac9be
-1.13	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) $0))
-1.14	(lambda (#(lambda (pickcommon (split8 $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0))) $0))
-4.00	(lambda (pickcommon (split8 $0)))
-5.73	(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (ic_composegrowing (split8 $0))) $0)))

de1cd16c
-0.19	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0)))
-2.80	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)))
-2.82	(lambda (colourPixel (topcol (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0))))
-4.79	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) $0))))
-4.83	(lambda (#(lambda (colourPixel (topcol $0))) (#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5)) (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))))

ded97339
-0.69	(lambda (#(lambda (overlay (ic_connectY $0) $0)) $0))
-0.69	(lambda (#(lambda (overlay $0 (ic_connectY $0))) $0))
-12.49	(lambda (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (ic_connectY $0)))))
-12.89	(lambda (ic_composegrowing (#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1)))) $0 (lambda (lambda ($0 $1))))))
-14.62	(lambda (ic_composegrowing (lcons $0 (split8 (ic_connectY $0)))))

e3497940
-0.01	(lambda (left_half (#(lambda (overlay (flipy $0))) $0 $0)))
-4.70	(lambda (left_half (overlay $0 (flipy $0))))
-8.23	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist ($0 $1) $1))) $0 (lambda (flipy $0))))))
-8.23	(lambda (left_half (ic_composegrowing (#(lambda (lambda (mklist $1 ($0 $1)))) $0 (lambda (flipy $0))))))

eb5a1d5d
-1.64	(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) $0))
-1.65	(lambda (#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.66	(lambda (#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0))) $0))
-1.66	(lambda (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0))
-1.67	(lambda (ic_compress3 $0))

ed36ccf7
-0.08	(lambda (rot90 $0))
-4.67	(lambda (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) (rot90 $0)))
-4.67	(lambda (rot90 (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-4.72	(lambda (#(lambda (fillobj c1 (ic_toorigin $0))) (rot90 $0)))
-4.72	(lambda (rot90 (#(lambda (fillobj c1 (ic_toorigin $0))) $0)))

f25ffba3
-1.11	(lambda (#(lambda (overlay $0 (flipx $0))) $0))
-1.12	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0))) $0))
-1.14	(lambda (#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0))) $0))
-5.71	(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-5.72	(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))

Compression message saved to: compressionMessages/2023-04-15T05:14:15.495053
Compression backend will run for most 99 iterations
Total number of candidates: 2891
Constructed version spaces and coalesced candidates in 2.85369s.
Trimmed down the beam, have only 248 best candidates
Rewrote topK in 5.88716s.
Initial score: -557.702572
Scored candidates in 21.0118s.
Improved score to -557.258485 (dScore=0.444088) w/ new primitive
	#(lambda (split8 (mirrorX (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))) : grid -> list(grid)
rewrote all of the frontiers in 4.51132s.
Completed one step of memory consolidation in 35.375s.
New primitive is used 0 times in the best programs in each of the frontiers.
Here is where it is used:
Total number of candidates: 2946
Constructed version spaces and coalesced candidates in 2.6378s.
Trimmed down the beam, have only 248 best candidates
Rewrote topK in 5.69677s.
Initial score: -558.204024
Scored candidates in 21.1569s.
No improvement possible.
Completed one step of memory consolidation in 30.2466s.
completed ocaml compression in 1.09543m.
Finished consolidation.
Induced a grammar in 66.6 seconds
Grammar after iteration 5:
-0.588817	t0	$_
0.000000	grid -> pos	getpos
0.000000	grid -> size	getsize
-0.001106	grid -> count	countPixels
-0.002507	grid -> list(grid)	ic_splitall
-0.003814	grid -> list(grid)	split8
-0.006313	grid -> list(grid) -> list(grid)	lcons
-0.006313	grid -> list(grid)	ic_splitcols
-0.006313	grid -> list(grid)	ic_splitcolumns
-0.006313	grid -> list(grid)	ic_splitrows
-0.006313	grid -> grid -> list(grid)	mklist
-0.006313	(grid -> grid) -> list(grid) -> list(grid)	map
-0.032753	grid -> count	countColours
-0.127663	colour	c2
-0.155693	colour	c3
-0.156823	colour	c1
-0.174365	grid -> colour	topcol
-0.177592	grid -> colour	rarestcol
-0.180558	colour	c5
-0.187469	colour	c6
-0.187762	colour	c4
-0.188783	colour	c9
-0.189414	colour	c7
-0.190491	colour	c8
-1.639535	grid -> grid	left_half
-1.639597	grid -> grid	top_half
-1.639863	grid -> grid	repeatX
-1.640382	grid -> grid	mirrorX
-1.660984	grid -> grid	rot90
-1.666104	grid -> grid	mirrorY
-1.670787	grid -> grid -> grid	ic_embed
-1.671224	grid -> grid	swapxy
-1.671689	count -> colour -> grid	countToY
-1.673315	grid -> grid	ic_compress2
-1.682252	grid -> grid	rot180
-1.682693	grid -> grid	flipx
-1.686769	colour -> grid -> grid	set_bg
-1.687896	grid -> grid	ic_connectX
-1.688003	grid -> grid	ic_connectY
-1.692065	grid -> grid	ic_compress3
-1.693745	grid -> grid	rot270
-1.695878	grid -> grid	ic_makeborder
-1.696053	grid -> grid	flipy
-1.698927	colour -> grid -> grid	fillobj
-1.700959	colour -> grid	colourPixel
-1.701249	colour -> grid -> grid	ic_erasecol
-1.701792	list(grid) -> grid	ic_composegrowing
-1.702267	colour -> grid -> grid	colourHull
-1.702276	grid -> grid	ic_toorigin
-1.703315	list(grid) -> grid	pickcommon
-1.703336	count -> colour -> grid	countToXY
-1.703988	grid -> grid -> grid	logical_and
-1.704066	list(grid) -> grid	ic_pickunique
-1.704066	list(grid) -> grid	pickmax_size
-1.704066	list(grid) -> grid	pickmax_neg_size
-1.704066	list(grid) -> grid	pickmax_cols
-1.704066	list(grid) -> grid	pickmax_interior_count
-1.704066	list(grid) -> grid	pickmax_neg_interior_count
-1.704176	grid -> grid -> grid	overlay
-1.704182	grid -> grid	ic_center
-1.704412	colour -> grid -> grid	ic_filtercol
-1.704479	colour -> grid -> grid	setcol
-1.704479	grid -> grid	ic_fill
-1.704479	grid -> grid	ic_interior
-1.704479	count -> colour -> grid	countToX
-1.704479	grid -> grid	right_half
-1.704479	grid -> grid	bottom_half
-1.704479	list(grid) -> grid	pickmax_count
-1.704479	list(grid) -> grid	pickmax_neg_count
-1.704479	list(grid) -> grid	pickmax_x_pos
-1.704479	list(grid) -> grid	pickmax_x_neg
-1.704479	list(grid) -> grid	pickmax_y_pos
-1.704479	list(grid) -> grid	pickmax_y_neg
-1.704479	grid -> grid	repeatY
-1.704479	colour -> grid -> grid	get_bg
-0.006304	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist ($0 $1) $1)))
-0.006304	grid -> (grid -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 $1))))
-0.006313	grid -> (grid -> (grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0)))))) $1 ($0 $1))))
-0.006313	grid -> ((grid -> grid) -> grid) -> list(grid)	#(lambda (lambda (mklist $1 ($0 (lambda (ic_connectY $0))))))
-0.006313	((grid -> grid) -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist $0 ($1 ic_connectY))))
-0.006313	((grid -> grid) -> grid -> grid) -> grid -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $0 ($1 (lambda (ic_connectY $0))))))
-0.006313	grid -> list(grid)	#(lambda (split8 (mirrorX (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0))))
-0.006313	t0 -> ((grid -> grid) -> t0 -> grid) -> grid -> list(grid)	#(lambda (lambda (mklist ($0 ic_connectY $1))))
-0.006313	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist ($0 $1) $1))) $1 ($0 ic_connectY))))
-0.006313	grid -> ((grid -> grid) -> grid -> grid) -> list(grid)	#(lambda (lambda (#(lambda (lambda (mklist $1 ($0 $1)))) $1 ($0 ic_connectY))))
-0.177670	grid -> colour	#(lambda (rarestcol (rot180 $0)))
-0.177744	grid -> colour	#(lambda (rarestcol (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.624435	grid -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1))
-1.633276	grid -> grid	#(lambda (ic_composegrowing (split8 $0)))
-1.637899	grid -> grid	#(lambda (colourPixel (topcol $0)))
-1.639684	grid -> grid	#(lambda (overlay (ic_connectY $0) $0))
-1.641905	grid -> grid	#(lambda (overlay $0 (ic_connectY $0)))
-1.643510	grid -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c7 c5))
-1.650388	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (mirrorY $0)))
-1.653556	grid -> grid	#(lambda (#(lambda (lambda (fillobj $0 (ic_makeborder $1)))) $0 (#(lambda (rarestcol (rot180 $0))) $0)))
-1.654708	grid -> grid	#(lambda (mirrorY (mirrorX $0)))
-1.654821	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2))))) $0 c6))
-1.655106	grid -> grid	#(lambda (ic_compress2 (ic_compress3 $0)))
-1.655331	grid -> grid	#(lambda (mirrorX (mirrorY $0)))
-1.658454	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.658920	grid -> grid	#(lambda (overlay $0 (flipx $0)))
-1.660596	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.661141	grid -> grid	#(lambda (#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1)))) $0 c5))
-1.661886	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0)))
-1.663474	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (ic_compress2 (ic_compress3 $0))) $0))) $0)))
-1.666394	grid -> grid	#(lambda (flipx (mirrorY $0)))
-1.667823	grid -> grid	#(lambda (fillobj c1 (ic_toorigin $0)))
-1.668447	grid -> grid	#(lambda (ic_filtercol (topcol $0) $0))
-1.668680	grid -> grid	#(lambda (swapxy (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.669801	grid -> grid	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) $0)))
-1.669841	grid -> grid	#(fillobj c2)
-1.670468	grid -> colour -> grid	#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c3))
-1.671999	grid -> grid -> grid	#(lambda (overlay (flipy $0)))
-1.673053	grid -> grid	#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0)))
-1.673475	grid -> grid	#(lambda (#(lambda (mirrorX (mirrorY $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.673536	grid -> grid -> grid	#(lambda (colourHull (topcol $0)))
-1.677596	grid -> grid	#(lambda (#(lambda (#(lambda (pickcommon (split8 $0))) (mirrorX $0))) (#(lambda (#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2))))) $0 c4 c1)) $0)))
-1.677904	grid -> colour -> grid	#(lambda (lambda (fillobj $0 (ic_makeborder $1))))
-1.679339	grid -> grid	#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0)))
-1.679505	grid -> grid	#(lambda (#(lambda (ic_composegrowing (split8 $0))) (#(lambda (ic_compress2 (#(lambda (ic_filtercol (topcol $0) $0)) $0))) $0)))
-1.679505	grid -> grid	#(lambda (ic_compress2 (ic_filtercol (topcol $0) $0)))
-1.679676	grid -> grid	#(lambda (pickcommon (split8 $0)))
-1.680037	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_filtercol (rarestcol $0) $0))) (#(lambda (pickcommon (split8 $0))) $0)))
-1.681053	grid -> grid	#(lambda (#(lambda (ic_compress2 (ic_compress3 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.681518	grid -> grid	#(lambda (swapxy (#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0))) $0)))
-1.681826	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (#(lambda (ic_compress2 (ic_compress3 $0))) $0)))
-1.682571	grid -> grid	#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0)))
-1.682678	grid -> grid	#(lambda (#(lambda (#(lambda (overlay $0 (ic_connectY $0))) (rot180 $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.683138	grid -> grid	#(lambda (#(lambda (overlay (ic_connectY $0) $0)) (swapxy $0)))
-1.683381	grid -> grid	#(lambda (#(lambda (overlay $0 (flipx $0))) (#(lambda (overlay $0 (flipx $0))) $0)))
-1.685086	grid -> grid	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay $0 (ic_connectY $0))) $0)))
-1.685195	grid -> grid	#(lambda (#(lambda (ic_compress2 (flipy $0))) (#(lambda (overlay (ic_connectY $0) $0)) $0)))
-1.685195	grid -> grid	#(lambda (ic_compress2 (flipy $0)))
-1.692364	grid -> colour -> grid	#(lambda (lambda (ic_connectX (get_bg $0 $1))))
-1.698138	grid -> colour -> grid	#(lambda (lambda (ic_erasecol $0 (#(lambda (ic_compress2 (ic_compress3 $0))) $1))))
-1.701308	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (ic_erasecol $0 (fillobj $1 $2)))))
-1.701617	grid -> colour -> colour -> grid	#(lambda (lambda (lambda (set_bg $0 (ic_erasecol $1 $2)))))
Currently using this much memory: 1270718464
Exported checkpoint to ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=5_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
 [+] Cleared recognition model from:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=5_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False.pickle
     and exported to:
     ./experimentOutputs/arc/_aic=0.1_arity=3_BO=False_CO=False_ES=1_ET=240_HR=1.0_it=5_MF=10_noConsolidation=False_pc=30.0_RT=360_RR=False_RW=False_solver=python_STM=True_L=0.1_TRR=default_K=5_topkNotMAP=False_graph=True.pickle
     Use this one for graphing.
Exporting primitive graph to ./experimentOutputs/arc/_primitives_4_depth.pdf
Exported primitive graph to ./experimentOutputs/arc/_primitives_4_unordered.pdf
ecIterator count 4
